
magicGloveEmbeddedLayer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004eec  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08005088  08005088  00015088  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005110  08005110  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005110  08005110  00015110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005118  08005118  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005118  08005118  00015118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800511c  0800511c  0001511c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005120  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  20000078  08005194  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  08005194  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f033  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000215a  00000000  00000000  0002f0d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f20  00000000  00000000  00031238  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e18  00000000  00000000  00032158  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016ef4  00000000  00000000  00032f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c121  00000000  00000000  00049e64  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e686  00000000  00000000  00055f85  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e460b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004228  00000000  00000000  000e4688  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000078 	.word	0x20000078
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800506c 	.word	0x0800506c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000007c 	.word	0x2000007c
 80001d4:	0800506c 	.word	0x0800506c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_uldivmod>:
 8000ab0:	b953      	cbnz	r3, 8000ac8 <__aeabi_uldivmod+0x18>
 8000ab2:	b94a      	cbnz	r2, 8000ac8 <__aeabi_uldivmod+0x18>
 8000ab4:	2900      	cmp	r1, #0
 8000ab6:	bf08      	it	eq
 8000ab8:	2800      	cmpeq	r0, #0
 8000aba:	bf1c      	itt	ne
 8000abc:	f04f 31ff 	movne.w	r1, #4294967295
 8000ac0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac4:	f000 b972 	b.w	8000dac <__aeabi_idiv0>
 8000ac8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000acc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ad0:	f000 f806 	bl	8000ae0 <__udivmoddi4>
 8000ad4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000adc:	b004      	add	sp, #16
 8000ade:	4770      	bx	lr

08000ae0 <__udivmoddi4>:
 8000ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae4:	9e08      	ldr	r6, [sp, #32]
 8000ae6:	4604      	mov	r4, r0
 8000ae8:	4688      	mov	r8, r1
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d14b      	bne.n	8000b86 <__udivmoddi4+0xa6>
 8000aee:	428a      	cmp	r2, r1
 8000af0:	4615      	mov	r5, r2
 8000af2:	d967      	bls.n	8000bc4 <__udivmoddi4+0xe4>
 8000af4:	fab2 f282 	clz	r2, r2
 8000af8:	b14a      	cbz	r2, 8000b0e <__udivmoddi4+0x2e>
 8000afa:	f1c2 0720 	rsb	r7, r2, #32
 8000afe:	fa01 f302 	lsl.w	r3, r1, r2
 8000b02:	fa20 f707 	lsr.w	r7, r0, r7
 8000b06:	4095      	lsls	r5, r2
 8000b08:	ea47 0803 	orr.w	r8, r7, r3
 8000b0c:	4094      	lsls	r4, r2
 8000b0e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b12:	0c23      	lsrs	r3, r4, #16
 8000b14:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b18:	fa1f fc85 	uxth.w	ip, r5
 8000b1c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b20:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b24:	fb07 f10c 	mul.w	r1, r7, ip
 8000b28:	4299      	cmp	r1, r3
 8000b2a:	d909      	bls.n	8000b40 <__udivmoddi4+0x60>
 8000b2c:	18eb      	adds	r3, r5, r3
 8000b2e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b32:	f080 811b 	bcs.w	8000d6c <__udivmoddi4+0x28c>
 8000b36:	4299      	cmp	r1, r3
 8000b38:	f240 8118 	bls.w	8000d6c <__udivmoddi4+0x28c>
 8000b3c:	3f02      	subs	r7, #2
 8000b3e:	442b      	add	r3, r5
 8000b40:	1a5b      	subs	r3, r3, r1
 8000b42:	b2a4      	uxth	r4, r4
 8000b44:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b48:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b50:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b54:	45a4      	cmp	ip, r4
 8000b56:	d909      	bls.n	8000b6c <__udivmoddi4+0x8c>
 8000b58:	192c      	adds	r4, r5, r4
 8000b5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b5e:	f080 8107 	bcs.w	8000d70 <__udivmoddi4+0x290>
 8000b62:	45a4      	cmp	ip, r4
 8000b64:	f240 8104 	bls.w	8000d70 <__udivmoddi4+0x290>
 8000b68:	3802      	subs	r0, #2
 8000b6a:	442c      	add	r4, r5
 8000b6c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b70:	eba4 040c 	sub.w	r4, r4, ip
 8000b74:	2700      	movs	r7, #0
 8000b76:	b11e      	cbz	r6, 8000b80 <__udivmoddi4+0xa0>
 8000b78:	40d4      	lsrs	r4, r2
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	e9c6 4300 	strd	r4, r3, [r6]
 8000b80:	4639      	mov	r1, r7
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d909      	bls.n	8000b9e <__udivmoddi4+0xbe>
 8000b8a:	2e00      	cmp	r6, #0
 8000b8c:	f000 80eb 	beq.w	8000d66 <__udivmoddi4+0x286>
 8000b90:	2700      	movs	r7, #0
 8000b92:	e9c6 0100 	strd	r0, r1, [r6]
 8000b96:	4638      	mov	r0, r7
 8000b98:	4639      	mov	r1, r7
 8000b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9e:	fab3 f783 	clz	r7, r3
 8000ba2:	2f00      	cmp	r7, #0
 8000ba4:	d147      	bne.n	8000c36 <__udivmoddi4+0x156>
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d302      	bcc.n	8000bb0 <__udivmoddi4+0xd0>
 8000baa:	4282      	cmp	r2, r0
 8000bac:	f200 80fa 	bhi.w	8000da4 <__udivmoddi4+0x2c4>
 8000bb0:	1a84      	subs	r4, r0, r2
 8000bb2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	4698      	mov	r8, r3
 8000bba:	2e00      	cmp	r6, #0
 8000bbc:	d0e0      	beq.n	8000b80 <__udivmoddi4+0xa0>
 8000bbe:	e9c6 4800 	strd	r4, r8, [r6]
 8000bc2:	e7dd      	b.n	8000b80 <__udivmoddi4+0xa0>
 8000bc4:	b902      	cbnz	r2, 8000bc8 <__udivmoddi4+0xe8>
 8000bc6:	deff      	udf	#255	; 0xff
 8000bc8:	fab2 f282 	clz	r2, r2
 8000bcc:	2a00      	cmp	r2, #0
 8000bce:	f040 808f 	bne.w	8000cf0 <__udivmoddi4+0x210>
 8000bd2:	1b49      	subs	r1, r1, r5
 8000bd4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bd8:	fa1f f885 	uxth.w	r8, r5
 8000bdc:	2701      	movs	r7, #1
 8000bde:	fbb1 fcfe 	udiv	ip, r1, lr
 8000be2:	0c23      	lsrs	r3, r4, #16
 8000be4:	fb0e 111c 	mls	r1, lr, ip, r1
 8000be8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bec:	fb08 f10c 	mul.w	r1, r8, ip
 8000bf0:	4299      	cmp	r1, r3
 8000bf2:	d907      	bls.n	8000c04 <__udivmoddi4+0x124>
 8000bf4:	18eb      	adds	r3, r5, r3
 8000bf6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bfa:	d202      	bcs.n	8000c02 <__udivmoddi4+0x122>
 8000bfc:	4299      	cmp	r1, r3
 8000bfe:	f200 80cd 	bhi.w	8000d9c <__udivmoddi4+0x2bc>
 8000c02:	4684      	mov	ip, r0
 8000c04:	1a59      	subs	r1, r3, r1
 8000c06:	b2a3      	uxth	r3, r4
 8000c08:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c0c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c10:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c14:	fb08 f800 	mul.w	r8, r8, r0
 8000c18:	45a0      	cmp	r8, r4
 8000c1a:	d907      	bls.n	8000c2c <__udivmoddi4+0x14c>
 8000c1c:	192c      	adds	r4, r5, r4
 8000c1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c22:	d202      	bcs.n	8000c2a <__udivmoddi4+0x14a>
 8000c24:	45a0      	cmp	r8, r4
 8000c26:	f200 80b6 	bhi.w	8000d96 <__udivmoddi4+0x2b6>
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	eba4 0408 	sub.w	r4, r4, r8
 8000c30:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c34:	e79f      	b.n	8000b76 <__udivmoddi4+0x96>
 8000c36:	f1c7 0c20 	rsb	ip, r7, #32
 8000c3a:	40bb      	lsls	r3, r7
 8000c3c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c40:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c44:	fa01 f407 	lsl.w	r4, r1, r7
 8000c48:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c4c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c50:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c54:	4325      	orrs	r5, r4
 8000c56:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c5a:	0c2c      	lsrs	r4, r5, #16
 8000c5c:	fb08 3319 	mls	r3, r8, r9, r3
 8000c60:	fa1f fa8e 	uxth.w	sl, lr
 8000c64:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c68:	fb09 f40a 	mul.w	r4, r9, sl
 8000c6c:	429c      	cmp	r4, r3
 8000c6e:	fa02 f207 	lsl.w	r2, r2, r7
 8000c72:	fa00 f107 	lsl.w	r1, r0, r7
 8000c76:	d90b      	bls.n	8000c90 <__udivmoddi4+0x1b0>
 8000c78:	eb1e 0303 	adds.w	r3, lr, r3
 8000c7c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c80:	f080 8087 	bcs.w	8000d92 <__udivmoddi4+0x2b2>
 8000c84:	429c      	cmp	r4, r3
 8000c86:	f240 8084 	bls.w	8000d92 <__udivmoddi4+0x2b2>
 8000c8a:	f1a9 0902 	sub.w	r9, r9, #2
 8000c8e:	4473      	add	r3, lr
 8000c90:	1b1b      	subs	r3, r3, r4
 8000c92:	b2ad      	uxth	r5, r5
 8000c94:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c98:	fb08 3310 	mls	r3, r8, r0, r3
 8000c9c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ca0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ca4:	45a2      	cmp	sl, r4
 8000ca6:	d908      	bls.n	8000cba <__udivmoddi4+0x1da>
 8000ca8:	eb1e 0404 	adds.w	r4, lr, r4
 8000cac:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb0:	d26b      	bcs.n	8000d8a <__udivmoddi4+0x2aa>
 8000cb2:	45a2      	cmp	sl, r4
 8000cb4:	d969      	bls.n	8000d8a <__udivmoddi4+0x2aa>
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	4474      	add	r4, lr
 8000cba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cbe:	fba0 8902 	umull	r8, r9, r0, r2
 8000cc2:	eba4 040a 	sub.w	r4, r4, sl
 8000cc6:	454c      	cmp	r4, r9
 8000cc8:	46c2      	mov	sl, r8
 8000cca:	464b      	mov	r3, r9
 8000ccc:	d354      	bcc.n	8000d78 <__udivmoddi4+0x298>
 8000cce:	d051      	beq.n	8000d74 <__udivmoddi4+0x294>
 8000cd0:	2e00      	cmp	r6, #0
 8000cd2:	d069      	beq.n	8000da8 <__udivmoddi4+0x2c8>
 8000cd4:	ebb1 050a 	subs.w	r5, r1, sl
 8000cd8:	eb64 0403 	sbc.w	r4, r4, r3
 8000cdc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ce0:	40fd      	lsrs	r5, r7
 8000ce2:	40fc      	lsrs	r4, r7
 8000ce4:	ea4c 0505 	orr.w	r5, ip, r5
 8000ce8:	e9c6 5400 	strd	r5, r4, [r6]
 8000cec:	2700      	movs	r7, #0
 8000cee:	e747      	b.n	8000b80 <__udivmoddi4+0xa0>
 8000cf0:	f1c2 0320 	rsb	r3, r2, #32
 8000cf4:	fa20 f703 	lsr.w	r7, r0, r3
 8000cf8:	4095      	lsls	r5, r2
 8000cfa:	fa01 f002 	lsl.w	r0, r1, r2
 8000cfe:	fa21 f303 	lsr.w	r3, r1, r3
 8000d02:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d06:	4338      	orrs	r0, r7
 8000d08:	0c01      	lsrs	r1, r0, #16
 8000d0a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d0e:	fa1f f885 	uxth.w	r8, r5
 8000d12:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d16:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1a:	fb07 f308 	mul.w	r3, r7, r8
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	fa04 f402 	lsl.w	r4, r4, r2
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x256>
 8000d26:	1869      	adds	r1, r5, r1
 8000d28:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d2c:	d22f      	bcs.n	8000d8e <__udivmoddi4+0x2ae>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d92d      	bls.n	8000d8e <__udivmoddi4+0x2ae>
 8000d32:	3f02      	subs	r7, #2
 8000d34:	4429      	add	r1, r5
 8000d36:	1acb      	subs	r3, r1, r3
 8000d38:	b281      	uxth	r1, r0
 8000d3a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d3e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d42:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d46:	fb00 f308 	mul.w	r3, r0, r8
 8000d4a:	428b      	cmp	r3, r1
 8000d4c:	d907      	bls.n	8000d5e <__udivmoddi4+0x27e>
 8000d4e:	1869      	adds	r1, r5, r1
 8000d50:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d54:	d217      	bcs.n	8000d86 <__udivmoddi4+0x2a6>
 8000d56:	428b      	cmp	r3, r1
 8000d58:	d915      	bls.n	8000d86 <__udivmoddi4+0x2a6>
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	4429      	add	r1, r5
 8000d5e:	1ac9      	subs	r1, r1, r3
 8000d60:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d64:	e73b      	b.n	8000bde <__udivmoddi4+0xfe>
 8000d66:	4637      	mov	r7, r6
 8000d68:	4630      	mov	r0, r6
 8000d6a:	e709      	b.n	8000b80 <__udivmoddi4+0xa0>
 8000d6c:	4607      	mov	r7, r0
 8000d6e:	e6e7      	b.n	8000b40 <__udivmoddi4+0x60>
 8000d70:	4618      	mov	r0, r3
 8000d72:	e6fb      	b.n	8000b6c <__udivmoddi4+0x8c>
 8000d74:	4541      	cmp	r1, r8
 8000d76:	d2ab      	bcs.n	8000cd0 <__udivmoddi4+0x1f0>
 8000d78:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d7c:	eb69 020e 	sbc.w	r2, r9, lr
 8000d80:	3801      	subs	r0, #1
 8000d82:	4613      	mov	r3, r2
 8000d84:	e7a4      	b.n	8000cd0 <__udivmoddi4+0x1f0>
 8000d86:	4660      	mov	r0, ip
 8000d88:	e7e9      	b.n	8000d5e <__udivmoddi4+0x27e>
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	e795      	b.n	8000cba <__udivmoddi4+0x1da>
 8000d8e:	4667      	mov	r7, ip
 8000d90:	e7d1      	b.n	8000d36 <__udivmoddi4+0x256>
 8000d92:	4681      	mov	r9, r0
 8000d94:	e77c      	b.n	8000c90 <__udivmoddi4+0x1b0>
 8000d96:	3802      	subs	r0, #2
 8000d98:	442c      	add	r4, r5
 8000d9a:	e747      	b.n	8000c2c <__udivmoddi4+0x14c>
 8000d9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000da0:	442b      	add	r3, r5
 8000da2:	e72f      	b.n	8000c04 <__udivmoddi4+0x124>
 8000da4:	4638      	mov	r0, r7
 8000da6:	e708      	b.n	8000bba <__udivmoddi4+0xda>
 8000da8:	4637      	mov	r7, r6
 8000daa:	e6e9      	b.n	8000b80 <__udivmoddi4+0xa0>

08000dac <__aeabi_idiv0>:
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop

08000db0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000db4:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <HAL_Init+0x40>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a0d      	ldr	r2, [pc, #52]	; (8000df0 <HAL_Init+0x40>)
 8000dba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <HAL_Init+0x40>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <HAL_Init+0x40>)
 8000dc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <HAL_Init+0x40>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a07      	ldr	r2, [pc, #28]	; (8000df0 <HAL_Init+0x40>)
 8000dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd8:	2003      	movs	r0, #3
 8000dda:	f000 f94d 	bl	8001078 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dde:	2000      	movs	r0, #0
 8000de0:	f000 f808 	bl	8000df4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de4:	f003 fca8 	bl	8004738 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40023c00 	.word	0x40023c00

08000df4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dfc:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <HAL_InitTick+0x54>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <HAL_InitTick+0x58>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	4619      	mov	r1, r3
 8000e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 f965 	bl	80010e2 <HAL_SYSTICK_Config>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e00e      	b.n	8000e40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2b0f      	cmp	r3, #15
 8000e26:	d80a      	bhi.n	8000e3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	6879      	ldr	r1, [r7, #4]
 8000e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e30:	f000 f92d 	bl	800108e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e34:	4a06      	ldr	r2, [pc, #24]	; (8000e50 <HAL_InitTick+0x5c>)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	e000      	b.n	8000e40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000008 	.word	0x20000008
 8000e4c:	20000004 	.word	0x20000004
 8000e50:	20000000 	.word	0x20000000

08000e54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <HAL_IncTick+0x20>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <HAL_IncTick+0x24>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4413      	add	r3, r2
 8000e64:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <HAL_IncTick+0x24>)
 8000e66:	6013      	str	r3, [r2, #0]
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	20000004 	.word	0x20000004
 8000e78:	2000010c 	.word	0x2000010c

08000e7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e80:	4b03      	ldr	r3, [pc, #12]	; (8000e90 <HAL_GetTick+0x14>)
 8000e82:	681b      	ldr	r3, [r3, #0]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	2000010c 	.word	0x2000010c

08000e94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e9c:	f7ff ffee 	bl	8000e7c <HAL_GetTick>
 8000ea0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eac:	d005      	beq.n	8000eba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eae:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <HAL_Delay+0x40>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eba:	bf00      	nop
 8000ebc:	f7ff ffde 	bl	8000e7c <HAL_GetTick>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	68fa      	ldr	r2, [r7, #12]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d8f7      	bhi.n	8000ebc <HAL_Delay+0x28>
  {
  }
}
 8000ecc:	bf00      	nop
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000004 	.word	0x20000004

08000ed8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <__NVIC_SetPriorityGrouping+0x44>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eee:	68ba      	ldr	r2, [r7, #8]
 8000ef0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0a:	4a04      	ldr	r2, [pc, #16]	; (8000f1c <__NVIC_SetPriorityGrouping+0x44>)
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	60d3      	str	r3, [r2, #12]
}
 8000f10:	bf00      	nop
 8000f12:	3714      	adds	r7, #20
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f24:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <__NVIC_GetPriorityGrouping+0x18>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	0a1b      	lsrs	r3, r3, #8
 8000f2a:	f003 0307 	and.w	r3, r3, #7
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	db0b      	blt.n	8000f66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	f003 021f 	and.w	r2, r3, #31
 8000f54:	4907      	ldr	r1, [pc, #28]	; (8000f74 <__NVIC_EnableIRQ+0x38>)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	095b      	lsrs	r3, r3, #5
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000e100 	.word	0xe000e100

08000f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	6039      	str	r1, [r7, #0]
 8000f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	db0a      	blt.n	8000fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	490c      	ldr	r1, [pc, #48]	; (8000fc4 <__NVIC_SetPriority+0x4c>)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	0112      	lsls	r2, r2, #4
 8000f98:	b2d2      	uxtb	r2, r2
 8000f9a:	440b      	add	r3, r1
 8000f9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa0:	e00a      	b.n	8000fb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	4908      	ldr	r1, [pc, #32]	; (8000fc8 <__NVIC_SetPriority+0x50>)
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	f003 030f 	and.w	r3, r3, #15
 8000fae:	3b04      	subs	r3, #4
 8000fb0:	0112      	lsls	r2, r2, #4
 8000fb2:	b2d2      	uxtb	r2, r2
 8000fb4:	440b      	add	r3, r1
 8000fb6:	761a      	strb	r2, [r3, #24]
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000e100 	.word	0xe000e100
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b089      	sub	sp, #36	; 0x24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	f1c3 0307 	rsb	r3, r3, #7
 8000fe6:	2b04      	cmp	r3, #4
 8000fe8:	bf28      	it	cs
 8000fea:	2304      	movcs	r3, #4
 8000fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	2b06      	cmp	r3, #6
 8000ff4:	d902      	bls.n	8000ffc <NVIC_EncodePriority+0x30>
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3b03      	subs	r3, #3
 8000ffa:	e000      	b.n	8000ffe <NVIC_EncodePriority+0x32>
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	f04f 32ff 	mov.w	r2, #4294967295
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43da      	mvns	r2, r3
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	401a      	ands	r2, r3
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001014:	f04f 31ff 	mov.w	r1, #4294967295
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	fa01 f303 	lsl.w	r3, r1, r3
 800101e:	43d9      	mvns	r1, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	4313      	orrs	r3, r2
         );
}
 8001026:	4618      	mov	r0, r3
 8001028:	3724      	adds	r7, #36	; 0x24
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
	...

08001034 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3b01      	subs	r3, #1
 8001040:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001044:	d301      	bcc.n	800104a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001046:	2301      	movs	r3, #1
 8001048:	e00f      	b.n	800106a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800104a:	4a0a      	ldr	r2, [pc, #40]	; (8001074 <SysTick_Config+0x40>)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3b01      	subs	r3, #1
 8001050:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001052:	210f      	movs	r1, #15
 8001054:	f04f 30ff 	mov.w	r0, #4294967295
 8001058:	f7ff ff8e 	bl	8000f78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800105c:	4b05      	ldr	r3, [pc, #20]	; (8001074 <SysTick_Config+0x40>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001062:	4b04      	ldr	r3, [pc, #16]	; (8001074 <SysTick_Config+0x40>)
 8001064:	2207      	movs	r2, #7
 8001066:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	e000e010 	.word	0xe000e010

08001078 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff ff29 	bl	8000ed8 <__NVIC_SetPriorityGrouping>
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800108e:	b580      	push	{r7, lr}
 8001090:	b086      	sub	sp, #24
 8001092:	af00      	add	r7, sp, #0
 8001094:	4603      	mov	r3, r0
 8001096:	60b9      	str	r1, [r7, #8]
 8001098:	607a      	str	r2, [r7, #4]
 800109a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010a0:	f7ff ff3e 	bl	8000f20 <__NVIC_GetPriorityGrouping>
 80010a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	68b9      	ldr	r1, [r7, #8]
 80010aa:	6978      	ldr	r0, [r7, #20]
 80010ac:	f7ff ff8e 	bl	8000fcc <NVIC_EncodePriority>
 80010b0:	4602      	mov	r2, r0
 80010b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b6:	4611      	mov	r1, r2
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff5d 	bl	8000f78 <__NVIC_SetPriority>
}
 80010be:	bf00      	nop
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	4603      	mov	r3, r0
 80010ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ff31 	bl	8000f3c <__NVIC_EnableIRQ>
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff ffa2 	bl	8001034 <SysTick_Config>
 80010f0:	4603      	mov	r3, r0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b089      	sub	sp, #36	; 0x24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800110e:	2300      	movs	r3, #0
 8001110:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
 8001116:	e159      	b.n	80013cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001118:	2201      	movs	r2, #1
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	697a      	ldr	r2, [r7, #20]
 8001128:	4013      	ands	r3, r2
 800112a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	429a      	cmp	r2, r3
 8001132:	f040 8148 	bne.w	80013c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	2b02      	cmp	r3, #2
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_Init+0x4a>
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	2b12      	cmp	r3, #18
 8001144:	d123      	bne.n	800118e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	08da      	lsrs	r2, r3, #3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	3208      	adds	r2, #8
 800114e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001152:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	220f      	movs	r2, #15
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	691a      	ldr	r2, [r3, #16]
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	f003 0307 	and.w	r3, r3, #7
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4313      	orrs	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	08da      	lsrs	r2, r3, #3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3208      	adds	r2, #8
 8001188:	69b9      	ldr	r1, [r7, #24]
 800118a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	2203      	movs	r2, #3
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4013      	ands	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 0203 	and.w	r2, r3, #3
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d00b      	beq.n	80011e2 <HAL_GPIO_Init+0xe6>
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d007      	beq.n	80011e2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011d6:	2b11      	cmp	r3, #17
 80011d8:	d003      	beq.n	80011e2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2b12      	cmp	r3, #18
 80011e0:	d130      	bne.n	8001244 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	2203      	movs	r2, #3
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43db      	mvns	r3, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4013      	ands	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	68da      	ldr	r2, [r3, #12]
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4313      	orrs	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001218:	2201      	movs	r2, #1
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	091b      	lsrs	r3, r3, #4
 800122e:	f003 0201 	and.w	r2, r3, #1
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	2203      	movs	r2, #3
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127c:	2b00      	cmp	r3, #0
 800127e:	f000 80a2 	beq.w	80013c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	4b56      	ldr	r3, [pc, #344]	; (80013e0 <HAL_GPIO_Init+0x2e4>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	4a55      	ldr	r2, [pc, #340]	; (80013e0 <HAL_GPIO_Init+0x2e4>)
 800128c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001290:	6453      	str	r3, [r2, #68]	; 0x44
 8001292:	4b53      	ldr	r3, [pc, #332]	; (80013e0 <HAL_GPIO_Init+0x2e4>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800129e:	4a51      	ldr	r2, [pc, #324]	; (80013e4 <HAL_GPIO_Init+0x2e8>)
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	089b      	lsrs	r3, r3, #2
 80012a4:	3302      	adds	r3, #2
 80012a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	f003 0303 	and.w	r3, r3, #3
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	220f      	movs	r2, #15
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43db      	mvns	r3, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4013      	ands	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a48      	ldr	r2, [pc, #288]	; (80013e8 <HAL_GPIO_Init+0x2ec>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d019      	beq.n	80012fe <HAL_GPIO_Init+0x202>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a47      	ldr	r2, [pc, #284]	; (80013ec <HAL_GPIO_Init+0x2f0>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d013      	beq.n	80012fa <HAL_GPIO_Init+0x1fe>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a46      	ldr	r2, [pc, #280]	; (80013f0 <HAL_GPIO_Init+0x2f4>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d00d      	beq.n	80012f6 <HAL_GPIO_Init+0x1fa>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a45      	ldr	r2, [pc, #276]	; (80013f4 <HAL_GPIO_Init+0x2f8>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d007      	beq.n	80012f2 <HAL_GPIO_Init+0x1f6>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a44      	ldr	r2, [pc, #272]	; (80013f8 <HAL_GPIO_Init+0x2fc>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d101      	bne.n	80012ee <HAL_GPIO_Init+0x1f2>
 80012ea:	2304      	movs	r3, #4
 80012ec:	e008      	b.n	8001300 <HAL_GPIO_Init+0x204>
 80012ee:	2307      	movs	r3, #7
 80012f0:	e006      	b.n	8001300 <HAL_GPIO_Init+0x204>
 80012f2:	2303      	movs	r3, #3
 80012f4:	e004      	b.n	8001300 <HAL_GPIO_Init+0x204>
 80012f6:	2302      	movs	r3, #2
 80012f8:	e002      	b.n	8001300 <HAL_GPIO_Init+0x204>
 80012fa:	2301      	movs	r3, #1
 80012fc:	e000      	b.n	8001300 <HAL_GPIO_Init+0x204>
 80012fe:	2300      	movs	r3, #0
 8001300:	69fa      	ldr	r2, [r7, #28]
 8001302:	f002 0203 	and.w	r2, r2, #3
 8001306:	0092      	lsls	r2, r2, #2
 8001308:	4093      	lsls	r3, r2
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4313      	orrs	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001310:	4934      	ldr	r1, [pc, #208]	; (80013e4 <HAL_GPIO_Init+0x2e8>)
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	089b      	lsrs	r3, r3, #2
 8001316:	3302      	adds	r3, #2
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800131e:	4b37      	ldr	r3, [pc, #220]	; (80013fc <HAL_GPIO_Init+0x300>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	43db      	mvns	r3, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4013      	ands	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d003      	beq.n	8001342 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	4313      	orrs	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001342:	4a2e      	ldr	r2, [pc, #184]	; (80013fc <HAL_GPIO_Init+0x300>)
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001348:	4b2c      	ldr	r3, [pc, #176]	; (80013fc <HAL_GPIO_Init+0x300>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	43db      	mvns	r3, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4013      	ands	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d003      	beq.n	800136c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	4313      	orrs	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800136c:	4a23      	ldr	r2, [pc, #140]	; (80013fc <HAL_GPIO_Init+0x300>)
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001372:	4b22      	ldr	r3, [pc, #136]	; (80013fc <HAL_GPIO_Init+0x300>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	43db      	mvns	r3, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4013      	ands	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d003      	beq.n	8001396 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	4313      	orrs	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001396:	4a19      	ldr	r2, [pc, #100]	; (80013fc <HAL_GPIO_Init+0x300>)
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800139c:	4b17      	ldr	r3, [pc, #92]	; (80013fc <HAL_GPIO_Init+0x300>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	43db      	mvns	r3, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4013      	ands	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d003      	beq.n	80013c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	4313      	orrs	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013c0:	4a0e      	ldr	r2, [pc, #56]	; (80013fc <HAL_GPIO_Init+0x300>)
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	3301      	adds	r3, #1
 80013ca:	61fb      	str	r3, [r7, #28]
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	2b0f      	cmp	r3, #15
 80013d0:	f67f aea2 	bls.w	8001118 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013d4:	bf00      	nop
 80013d6:	3724      	adds	r7, #36	; 0x24
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40013800 	.word	0x40013800
 80013e8:	40020000 	.word	0x40020000
 80013ec:	40020400 	.word	0x40020400
 80013f0:	40020800 	.word	0x40020800
 80013f4:	40020c00 	.word	0x40020c00
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40013c00 	.word	0x40013c00

08001400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	460b      	mov	r3, r1
 800140a:	807b      	strh	r3, [r7, #2]
 800140c:	4613      	mov	r3, r2
 800140e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001410:	787b      	ldrb	r3, [r7, #1]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001416:	887a      	ldrh	r2, [r7, #2]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800141c:	e003      	b.n	8001426 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800141e:	887b      	ldrh	r3, [r7, #2]
 8001420:	041a      	lsls	r2, r3, #16
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	619a      	str	r2, [r3, #24]
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001432:	b480      	push	{r7}
 8001434:	b083      	sub	sp, #12
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
 800143a:	460b      	mov	r3, r1
 800143c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	695a      	ldr	r2, [r3, #20]
 8001442:	887b      	ldrh	r3, [r7, #2]
 8001444:	401a      	ands	r2, r3
 8001446:	887b      	ldrh	r3, [r7, #2]
 8001448:	429a      	cmp	r2, r3
 800144a:	d104      	bne.n	8001456 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800144c:	887b      	ldrh	r3, [r7, #2]
 800144e:	041a      	lsls	r2, r3, #16
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001454:	e002      	b.n	800145c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001456:	887a      	ldrh	r2, [r7, #2]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	619a      	str	r2, [r3, #24]
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001472:	4b08      	ldr	r3, [pc, #32]	; (8001494 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001474:	695a      	ldr	r2, [r3, #20]
 8001476:	88fb      	ldrh	r3, [r7, #6]
 8001478:	4013      	ands	r3, r2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d006      	beq.n	800148c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800147e:	4a05      	ldr	r2, [pc, #20]	; (8001494 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001480:	88fb      	ldrh	r3, [r7, #6]
 8001482:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001484:	88fb      	ldrh	r3, [r7, #6]
 8001486:	4618      	mov	r0, r3
 8001488:	f002 ff20 	bl	80042cc <HAL_GPIO_EXTI_Callback>
  }
}
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40013c00 	.word	0x40013c00

08001498 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e10f      	b.n	80016ca <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d106      	bne.n	80014c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f002 faf2 	bl	8003aa8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2224      	movs	r2, #36	; 0x24
 80014c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f022 0201 	bic.w	r2, r2, #1
 80014da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014dc:	f001 fc76 	bl	8002dcc <HAL_RCC_GetPCLK1Freq>
 80014e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	4a7b      	ldr	r2, [pc, #492]	; (80016d4 <HAL_I2C_Init+0x23c>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d807      	bhi.n	80014fc <HAL_I2C_Init+0x64>
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	4a7a      	ldr	r2, [pc, #488]	; (80016d8 <HAL_I2C_Init+0x240>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	bf94      	ite	ls
 80014f4:	2301      	movls	r3, #1
 80014f6:	2300      	movhi	r3, #0
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	e006      	b.n	800150a <HAL_I2C_Init+0x72>
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	4a77      	ldr	r2, [pc, #476]	; (80016dc <HAL_I2C_Init+0x244>)
 8001500:	4293      	cmp	r3, r2
 8001502:	bf94      	ite	ls
 8001504:	2301      	movls	r3, #1
 8001506:	2300      	movhi	r3, #0
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e0db      	b.n	80016ca <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	4a72      	ldr	r2, [pc, #456]	; (80016e0 <HAL_I2C_Init+0x248>)
 8001516:	fba2 2303 	umull	r2, r3, r2, r3
 800151a:	0c9b      	lsrs	r3, r3, #18
 800151c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68ba      	ldr	r2, [r7, #8]
 800152e:	430a      	orrs	r2, r1
 8001530:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	4a64      	ldr	r2, [pc, #400]	; (80016d4 <HAL_I2C_Init+0x23c>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d802      	bhi.n	800154c <HAL_I2C_Init+0xb4>
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	3301      	adds	r3, #1
 800154a:	e009      	b.n	8001560 <HAL_I2C_Init+0xc8>
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001552:	fb02 f303 	mul.w	r3, r2, r3
 8001556:	4a63      	ldr	r2, [pc, #396]	; (80016e4 <HAL_I2C_Init+0x24c>)
 8001558:	fba2 2303 	umull	r2, r3, r2, r3
 800155c:	099b      	lsrs	r3, r3, #6
 800155e:	3301      	adds	r3, #1
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	6812      	ldr	r2, [r2, #0]
 8001564:	430b      	orrs	r3, r1
 8001566:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001572:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	4956      	ldr	r1, [pc, #344]	; (80016d4 <HAL_I2C_Init+0x23c>)
 800157c:	428b      	cmp	r3, r1
 800157e:	d80d      	bhi.n	800159c <HAL_I2C_Init+0x104>
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	1e59      	subs	r1, r3, #1
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	fbb1 f3f3 	udiv	r3, r1, r3
 800158e:	3301      	adds	r3, #1
 8001590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001594:	2b04      	cmp	r3, #4
 8001596:	bf38      	it	cc
 8001598:	2304      	movcc	r3, #4
 800159a:	e04f      	b.n	800163c <HAL_I2C_Init+0x1a4>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d111      	bne.n	80015c8 <HAL_I2C_Init+0x130>
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	1e58      	subs	r0, r3, #1
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6859      	ldr	r1, [r3, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	440b      	add	r3, r1
 80015b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80015b6:	3301      	adds	r3, #1
 80015b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015bc:	2b00      	cmp	r3, #0
 80015be:	bf0c      	ite	eq
 80015c0:	2301      	moveq	r3, #1
 80015c2:	2300      	movne	r3, #0
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	e012      	b.n	80015ee <HAL_I2C_Init+0x156>
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	1e58      	subs	r0, r3, #1
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6859      	ldr	r1, [r3, #4]
 80015d0:	460b      	mov	r3, r1
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	440b      	add	r3, r1
 80015d6:	0099      	lsls	r1, r3, #2
 80015d8:	440b      	add	r3, r1
 80015da:	fbb0 f3f3 	udiv	r3, r0, r3
 80015de:	3301      	adds	r3, #1
 80015e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	bf0c      	ite	eq
 80015e8:	2301      	moveq	r3, #1
 80015ea:	2300      	movne	r3, #0
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_I2C_Init+0x15e>
 80015f2:	2301      	movs	r3, #1
 80015f4:	e022      	b.n	800163c <HAL_I2C_Init+0x1a4>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d10e      	bne.n	800161c <HAL_I2C_Init+0x184>
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	1e58      	subs	r0, r3, #1
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6859      	ldr	r1, [r3, #4]
 8001606:	460b      	mov	r3, r1
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	440b      	add	r3, r1
 800160c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001610:	3301      	adds	r3, #1
 8001612:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800161a:	e00f      	b.n	800163c <HAL_I2C_Init+0x1a4>
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	1e58      	subs	r0, r3, #1
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6859      	ldr	r1, [r3, #4]
 8001624:	460b      	mov	r3, r1
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	440b      	add	r3, r1
 800162a:	0099      	lsls	r1, r3, #2
 800162c:	440b      	add	r3, r1
 800162e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001632:	3301      	adds	r3, #1
 8001634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001638:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800163c:	6879      	ldr	r1, [r7, #4]
 800163e:	6809      	ldr	r1, [r1, #0]
 8001640:	4313      	orrs	r3, r2
 8001642:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	69da      	ldr	r2, [r3, #28]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a1b      	ldr	r3, [r3, #32]
 8001656:	431a      	orrs	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	430a      	orrs	r2, r1
 800165e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800166a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	6911      	ldr	r1, [r2, #16]
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	68d2      	ldr	r2, [r2, #12]
 8001676:	4311      	orrs	r1, r2
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6812      	ldr	r2, [r2, #0]
 800167c:	430b      	orrs	r3, r1
 800167e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	695a      	ldr	r2, [r3, #20]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	431a      	orrs	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	430a      	orrs	r2, r1
 800169a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f042 0201 	orr.w	r2, r2, #1
 80016aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2220      	movs	r2, #32
 80016b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	000186a0 	.word	0x000186a0
 80016d8:	001e847f 	.word	0x001e847f
 80016dc:	003d08ff 	.word	0x003d08ff
 80016e0:	431bde83 	.word	0x431bde83
 80016e4:	10624dd3 	.word	0x10624dd3

080016e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b088      	sub	sp, #32
 80016ec:	af02      	add	r7, sp, #8
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	607a      	str	r2, [r7, #4]
 80016f2:	461a      	mov	r2, r3
 80016f4:	460b      	mov	r3, r1
 80016f6:	817b      	strh	r3, [r7, #10]
 80016f8:	4613      	mov	r3, r2
 80016fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80016fc:	f7ff fbbe 	bl	8000e7c <HAL_GetTick>
 8001700:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b20      	cmp	r3, #32
 800170c:	f040 80e0 	bne.w	80018d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	2319      	movs	r3, #25
 8001716:	2201      	movs	r2, #1
 8001718:	4970      	ldr	r1, [pc, #448]	; (80018dc <HAL_I2C_Master_Transmit+0x1f4>)
 800171a:	68f8      	ldr	r0, [r7, #12]
 800171c:	f000 fd56 	bl	80021cc <I2C_WaitOnFlagUntilTimeout>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001726:	2302      	movs	r3, #2
 8001728:	e0d3      	b.n	80018d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001730:	2b01      	cmp	r3, #1
 8001732:	d101      	bne.n	8001738 <HAL_I2C_Master_Transmit+0x50>
 8001734:	2302      	movs	r3, #2
 8001736:	e0cc      	b.n	80018d2 <HAL_I2C_Master_Transmit+0x1ea>
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2201      	movs	r2, #1
 800173c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	2b01      	cmp	r3, #1
 800174c:	d007      	beq.n	800175e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f042 0201 	orr.w	r2, r2, #1
 800175c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800176c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2221      	movs	r2, #33	; 0x21
 8001772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2210      	movs	r2, #16
 800177a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2200      	movs	r2, #0
 8001782:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	893a      	ldrh	r2, [r7, #8]
 800178e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001794:	b29a      	uxth	r2, r3
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	4a50      	ldr	r2, [pc, #320]	; (80018e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800179e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80017a0:	8979      	ldrh	r1, [r7, #10]
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	6a3a      	ldr	r2, [r7, #32]
 80017a6:	68f8      	ldr	r0, [r7, #12]
 80017a8:	f000 fbe4 	bl	8001f74 <I2C_MasterRequestWrite>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e08d      	b.n	80018d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	695b      	ldr	r3, [r3, #20]
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	613b      	str	r3, [r7, #16]
 80017ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80017cc:	e066      	b.n	800189c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017ce:	697a      	ldr	r2, [r7, #20]
 80017d0:	6a39      	ldr	r1, [r7, #32]
 80017d2:	68f8      	ldr	r0, [r7, #12]
 80017d4:	f000 fdd0 	bl	8002378 <I2C_WaitOnTXEFlagUntilTimeout>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d00d      	beq.n	80017fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	2b04      	cmp	r3, #4
 80017e4:	d107      	bne.n	80017f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e06b      	b.n	80018d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fe:	781a      	ldrb	r2, [r3, #0]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180a:	1c5a      	adds	r2, r3, #1
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001814:	b29b      	uxth	r3, r3
 8001816:	3b01      	subs	r3, #1
 8001818:	b29a      	uxth	r2, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001822:	3b01      	subs	r3, #1
 8001824:	b29a      	uxth	r2, r3
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	695b      	ldr	r3, [r3, #20]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	2b04      	cmp	r3, #4
 8001836:	d11b      	bne.n	8001870 <HAL_I2C_Master_Transmit+0x188>
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800183c:	2b00      	cmp	r3, #0
 800183e:	d017      	beq.n	8001870 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001844:	781a      	ldrb	r2, [r3, #0]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001850:	1c5a      	adds	r2, r3, #1
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800185a:	b29b      	uxth	r3, r3
 800185c:	3b01      	subs	r3, #1
 800185e:	b29a      	uxth	r2, r3
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001868:	3b01      	subs	r3, #1
 800186a:	b29a      	uxth	r2, r3
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001870:	697a      	ldr	r2, [r7, #20]
 8001872:	6a39      	ldr	r1, [r7, #32]
 8001874:	68f8      	ldr	r0, [r7, #12]
 8001876:	f000 fdc0 	bl	80023fa <I2C_WaitOnBTFFlagUntilTimeout>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d00d      	beq.n	800189c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001884:	2b04      	cmp	r3, #4
 8001886:	d107      	bne.n	8001898 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001896:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e01a      	b.n	80018d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d194      	bne.n	80017ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2220      	movs	r2, #32
 80018b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80018cc:	2300      	movs	r3, #0
 80018ce:	e000      	b.n	80018d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80018d0:	2302      	movs	r3, #2
  }
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	00100002 	.word	0x00100002
 80018e0:	ffff0000 	.word	0xffff0000

080018e4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08c      	sub	sp, #48	; 0x30
 80018e8:	af02      	add	r7, sp, #8
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	607a      	str	r2, [r7, #4]
 80018ee:	461a      	mov	r2, r3
 80018f0:	460b      	mov	r3, r1
 80018f2:	817b      	strh	r3, [r7, #10]
 80018f4:	4613      	mov	r3, r2
 80018f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018f8:	f7ff fac0 	bl	8000e7c <HAL_GetTick>
 80018fc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b20      	cmp	r3, #32
 8001908:	f040 820b 	bne.w	8001d22 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800190c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	2319      	movs	r3, #25
 8001912:	2201      	movs	r2, #1
 8001914:	497c      	ldr	r1, [pc, #496]	; (8001b08 <HAL_I2C_Master_Receive+0x224>)
 8001916:	68f8      	ldr	r0, [r7, #12]
 8001918:	f000 fc58 	bl	80021cc <I2C_WaitOnFlagUntilTimeout>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001922:	2302      	movs	r3, #2
 8001924:	e1fe      	b.n	8001d24 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800192c:	2b01      	cmp	r3, #1
 800192e:	d101      	bne.n	8001934 <HAL_I2C_Master_Receive+0x50>
 8001930:	2302      	movs	r3, #2
 8001932:	e1f7      	b.n	8001d24 <HAL_I2C_Master_Receive+0x440>
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	2b01      	cmp	r3, #1
 8001948:	d007      	beq.n	800195a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f042 0201 	orr.w	r2, r2, #1
 8001958:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001968:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2222      	movs	r2, #34	; 0x22
 800196e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2210      	movs	r2, #16
 8001976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2200      	movs	r2, #0
 800197e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	893a      	ldrh	r2, [r7, #8]
 800198a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001990:	b29a      	uxth	r2, r3
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	4a5c      	ldr	r2, [pc, #368]	; (8001b0c <HAL_I2C_Master_Receive+0x228>)
 800199a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800199c:	8979      	ldrh	r1, [r7, #10]
 800199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019a2:	68f8      	ldr	r0, [r7, #12]
 80019a4:	f000 fb5c 	bl	8002060 <I2C_MasterRequestRead>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e1b8      	b.n	8001d24 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d113      	bne.n	80019e2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019ba:	2300      	movs	r3, #0
 80019bc:	623b      	str	r3, [r7, #32]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	695b      	ldr	r3, [r3, #20]
 80019c4:	623b      	str	r3, [r7, #32]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	623b      	str	r3, [r7, #32]
 80019ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	e18c      	b.n	8001cfc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d11b      	bne.n	8001a22 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019fa:	2300      	movs	r3, #0
 80019fc:	61fb      	str	r3, [r7, #28]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	695b      	ldr	r3, [r3, #20]
 8001a04:	61fb      	str	r3, [r7, #28]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	61fb      	str	r3, [r7, #28]
 8001a0e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	e16c      	b.n	8001cfc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d11b      	bne.n	8001a62 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a38:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61bb      	str	r3, [r7, #24]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	695b      	ldr	r3, [r3, #20]
 8001a54:	61bb      	str	r3, [r7, #24]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	61bb      	str	r3, [r7, #24]
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	e14c      	b.n	8001cfc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001a70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	695b      	ldr	r3, [r3, #20]
 8001a7c:	617b      	str	r3, [r7, #20]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	617b      	str	r3, [r7, #20]
 8001a86:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001a88:	e138      	b.n	8001cfc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	f200 80f1 	bhi.w	8001c76 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d123      	bne.n	8001ae4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	f000 fceb 	bl	800247c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e139      	b.n	8001d24 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	691a      	ldr	r2, [r3, #16]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac2:	1c5a      	adds	r2, r3, #1
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001acc:	3b01      	subs	r3, #1
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	3b01      	subs	r3, #1
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ae2:	e10b      	b.n	8001cfc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d14e      	bne.n	8001b8a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aee:	9300      	str	r3, [sp, #0]
 8001af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001af2:	2200      	movs	r2, #0
 8001af4:	4906      	ldr	r1, [pc, #24]	; (8001b10 <HAL_I2C_Master_Receive+0x22c>)
 8001af6:	68f8      	ldr	r0, [r7, #12]
 8001af8:	f000 fb68 	bl	80021cc <I2C_WaitOnFlagUntilTimeout>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d008      	beq.n	8001b14 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e10e      	b.n	8001d24 <HAL_I2C_Master_Receive+0x440>
 8001b06:	bf00      	nop
 8001b08:	00100002 	.word	0x00100002
 8001b0c:	ffff0000 	.word	0xffff0000
 8001b10:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	691a      	ldr	r2, [r3, #16]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b36:	1c5a      	adds	r2, r3, #1
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b40:	3b01      	subs	r3, #1
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	691a      	ldr	r2, [r3, #16]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b60:	b2d2      	uxtb	r2, r2
 8001b62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b68:	1c5a      	adds	r2, r3, #1
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b72:	3b01      	subs	r3, #1
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	3b01      	subs	r3, #1
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b88:	e0b8      	b.n	8001cfc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b90:	2200      	movs	r2, #0
 8001b92:	4966      	ldr	r1, [pc, #408]	; (8001d2c <HAL_I2C_Master_Receive+0x448>)
 8001b94:	68f8      	ldr	r0, [r7, #12]
 8001b96:	f000 fb19 	bl	80021cc <I2C_WaitOnFlagUntilTimeout>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e0bf      	b.n	8001d24 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	691a      	ldr	r2, [r3, #16]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc6:	1c5a      	adds	r2, r3, #1
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	3b01      	subs	r3, #1
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	9300      	str	r3, [sp, #0]
 8001bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bec:	2200      	movs	r2, #0
 8001bee:	494f      	ldr	r1, [pc, #316]	; (8001d2c <HAL_I2C_Master_Receive+0x448>)
 8001bf0:	68f8      	ldr	r0, [r7, #12]
 8001bf2:	f000 faeb 	bl	80021cc <I2C_WaitOnFlagUntilTimeout>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e091      	b.n	8001d24 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	691a      	ldr	r2, [r3, #16]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c22:	1c5a      	adds	r2, r3, #1
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c2c:	3b01      	subs	r3, #1
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	691a      	ldr	r2, [r3, #16]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4c:	b2d2      	uxtb	r2, r2
 8001c4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c54:	1c5a      	adds	r2, r3, #1
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c74:	e042      	b.n	8001cfc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c7a:	68f8      	ldr	r0, [r7, #12]
 8001c7c:	f000 fbfe 	bl	800247c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e04c      	b.n	8001d24 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	691a      	ldr	r2, [r3, #16]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9c:	1c5a      	adds	r2, r3, #1
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	f003 0304 	and.w	r3, r3, #4
 8001cc6:	2b04      	cmp	r3, #4
 8001cc8:	d118      	bne.n	8001cfc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	691a      	ldr	r2, [r3, #16]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd4:	b2d2      	uxtb	r2, r2
 8001cd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cdc:	1c5a      	adds	r2, r3, #1
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	f47f aec2 	bne.w	8001a8a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2220      	movs	r2, #32
 8001d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	e000      	b.n	8001d24 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001d22:	2302      	movs	r3, #2
  }
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3728      	adds	r7, #40	; 0x28
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	00010004 	.word	0x00010004

08001d30 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08a      	sub	sp, #40	; 0x28
 8001d34:	af02      	add	r7, sp, #8
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	607a      	str	r2, [r7, #4]
 8001d3a:	603b      	str	r3, [r7, #0]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001d40:	f7ff f89c 	bl	8000e7c <HAL_GetTick>
 8001d44:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001d46:	2301      	movs	r3, #1
 8001d48:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b20      	cmp	r3, #32
 8001d54:	f040 8105 	bne.w	8001f62 <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	9300      	str	r3, [sp, #0]
 8001d5c:	2319      	movs	r3, #25
 8001d5e:	2201      	movs	r2, #1
 8001d60:	4982      	ldr	r1, [pc, #520]	; (8001f6c <HAL_I2C_IsDeviceReady+0x23c>)
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f000 fa32 	bl	80021cc <I2C_WaitOnFlagUntilTimeout>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	e0f8      	b.n	8001f64 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d101      	bne.n	8001d80 <HAL_I2C_IsDeviceReady+0x50>
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	e0f1      	b.n	8001f64 <HAL_I2C_IsDeviceReady+0x234>
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d007      	beq.n	8001da6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f042 0201 	orr.w	r2, r2, #1
 8001da4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001db4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2224      	movs	r2, #36	; 0x24
 8001dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4a6a      	ldr	r2, [pc, #424]	; (8001f70 <HAL_I2C_IsDeviceReady+0x240>)
 8001dc8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dd8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001de6:	68f8      	ldr	r0, [r7, #12]
 8001de8:	f000 f9f0 	bl	80021cc <I2C_WaitOnFlagUntilTimeout>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e0b6      	b.n	8001f64 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001df6:	897b      	ldrh	r3, [r7, #10]
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e04:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001e06:	f7ff f839 	bl	8000e7c <HAL_GetTick>
 8001e0a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	bf0c      	ite	eq
 8001e1a:	2301      	moveq	r3, #1
 8001e1c:	2300      	movne	r3, #0
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	695b      	ldr	r3, [r3, #20]
 8001e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e30:	bf0c      	ite	eq
 8001e32:	2301      	moveq	r3, #1
 8001e34:	2300      	movne	r3, #0
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001e3a:	e025      	b.n	8001e88 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e3c:	f7ff f81e 	bl	8000e7c <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d302      	bcc.n	8001e52 <HAL_I2C_IsDeviceReady+0x122>
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d103      	bne.n	8001e5a <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	22a0      	movs	r2, #160	; 0xa0
 8001e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	695b      	ldr	r3, [r3, #20]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	bf0c      	ite	eq
 8001e68:	2301      	moveq	r3, #1
 8001e6a:	2300      	movne	r3, #0
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e7e:	bf0c      	ite	eq
 8001e80:	2301      	moveq	r3, #1
 8001e82:	2300      	movne	r3, #0
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2ba0      	cmp	r3, #160	; 0xa0
 8001e92:	d005      	beq.n	8001ea0 <HAL_I2C_IsDeviceReady+0x170>
 8001e94:	7dfb      	ldrb	r3, [r7, #23]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d102      	bne.n	8001ea0 <HAL_I2C_IsDeviceReady+0x170>
 8001e9a:	7dbb      	ldrb	r3, [r7, #22]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d0cd      	beq.n	8001e3c <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2220      	movs	r2, #32
 8001ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d129      	bne.n	8001f0a <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ec4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	613b      	str	r3, [r7, #16]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	695b      	ldr	r3, [r3, #20]
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	613b      	str	r3, [r7, #16]
 8001eda:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	2319      	movs	r3, #25
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	4921      	ldr	r1, [pc, #132]	; (8001f6c <HAL_I2C_IsDeviceReady+0x23c>)
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f000 f970 	bl	80021cc <I2C_WaitOnFlagUntilTimeout>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e036      	b.n	8001f64 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2220      	movs	r2, #32
 8001efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001f06:	2300      	movs	r3, #0
 8001f08:	e02c      	b.n	8001f64 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f18:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f22:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	2319      	movs	r3, #25
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	490f      	ldr	r1, [pc, #60]	; (8001f6c <HAL_I2C_IsDeviceReady+0x23c>)
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f000 f94c 	bl	80021cc <I2C_WaitOnFlagUntilTimeout>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e012      	b.n	8001f64 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	3301      	adds	r3, #1
 8001f42:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	f4ff af3e 	bcc.w	8001dca <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2220      	movs	r2, #32
 8001f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e000      	b.n	8001f64 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8001f62:	2302      	movs	r3, #2
  }
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3720      	adds	r7, #32
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	00100002 	.word	0x00100002
 8001f70:	ffff0000 	.word	0xffff0000

08001f74 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b088      	sub	sp, #32
 8001f78:	af02      	add	r7, sp, #8
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	607a      	str	r2, [r7, #4]
 8001f7e:	603b      	str	r3, [r7, #0]
 8001f80:	460b      	mov	r3, r1
 8001f82:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f88:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	2b08      	cmp	r3, #8
 8001f8e:	d006      	beq.n	8001f9e <I2C_MasterRequestWrite+0x2a>
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d003      	beq.n	8001f9e <I2C_MasterRequestWrite+0x2a>
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f9c:	d108      	bne.n	8001fb0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	e00b      	b.n	8001fc8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb4:	2b12      	cmp	r3, #18
 8001fb6:	d107      	bne.n	8001fc8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fc6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	9300      	str	r3, [sp, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f000 f8f9 	bl	80021cc <I2C_WaitOnFlagUntilTimeout>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e035      	b.n	8002050 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001fec:	d108      	bne.n	8002000 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001fee:	897b      	ldrh	r3, [r7, #10]
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ffc:	611a      	str	r2, [r3, #16]
 8001ffe:	e01b      	b.n	8002038 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002000:	897b      	ldrh	r3, [r7, #10]
 8002002:	11db      	asrs	r3, r3, #7
 8002004:	b2db      	uxtb	r3, r3
 8002006:	f003 0306 	and.w	r3, r3, #6
 800200a:	b2db      	uxtb	r3, r3
 800200c:	f063 030f 	orn	r3, r3, #15
 8002010:	b2da      	uxtb	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	490e      	ldr	r1, [pc, #56]	; (8002058 <I2C_MasterRequestWrite+0xe4>)
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f000 f92b 	bl	800227a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e010      	b.n	8002050 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800202e:	897b      	ldrh	r3, [r7, #10]
 8002030:	b2da      	uxtb	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	4907      	ldr	r1, [pc, #28]	; (800205c <I2C_MasterRequestWrite+0xe8>)
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f000 f91b 	bl	800227a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e000      	b.n	8002050 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	00010008 	.word	0x00010008
 800205c:	00010002 	.word	0x00010002

08002060 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b088      	sub	sp, #32
 8002064:	af02      	add	r7, sp, #8
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	607a      	str	r2, [r7, #4]
 800206a:	603b      	str	r3, [r7, #0]
 800206c:	460b      	mov	r3, r1
 800206e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002074:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002084:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	2b08      	cmp	r3, #8
 800208a:	d006      	beq.n	800209a <I2C_MasterRequestRead+0x3a>
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d003      	beq.n	800209a <I2C_MasterRequestRead+0x3a>
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002098:	d108      	bne.n	80020ac <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	e00b      	b.n	80020c4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b0:	2b11      	cmp	r3, #17
 80020b2:	d107      	bne.n	80020c4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	f000 f87b 	bl	80021cc <I2C_WaitOnFlagUntilTimeout>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e06d      	b.n	80021bc <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020e8:	d108      	bne.n	80020fc <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80020ea:	897b      	ldrh	r3, [r7, #10]
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	f043 0301 	orr.w	r3, r3, #1
 80020f2:	b2da      	uxtb	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	611a      	str	r2, [r3, #16]
 80020fa:	e053      	b.n	80021a4 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80020fc:	897b      	ldrh	r3, [r7, #10]
 80020fe:	11db      	asrs	r3, r3, #7
 8002100:	b2db      	uxtb	r3, r3
 8002102:	f003 0306 	and.w	r3, r3, #6
 8002106:	b2db      	uxtb	r3, r3
 8002108:	f063 030f 	orn	r3, r3, #15
 800210c:	b2da      	uxtb	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	492a      	ldr	r1, [pc, #168]	; (80021c4 <I2C_MasterRequestRead+0x164>)
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f000 f8ad 	bl	800227a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e048      	b.n	80021bc <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800212a:	897b      	ldrh	r3, [r7, #10]
 800212c:	b2da      	uxtb	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	4923      	ldr	r1, [pc, #140]	; (80021c8 <I2C_MasterRequestRead+0x168>)
 800213a:	68f8      	ldr	r0, [r7, #12]
 800213c:	f000 f89d 	bl	800227a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e038      	b.n	80021bc <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800214a:	2300      	movs	r3, #0
 800214c:	613b      	str	r3, [r7, #16]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	695b      	ldr	r3, [r3, #20]
 8002154:	613b      	str	r3, [r7, #16]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	613b      	str	r3, [r7, #16]
 800215e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800216e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f000 f825 	bl	80021cc <I2C_WaitOnFlagUntilTimeout>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e017      	b.n	80021bc <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800218c:	897b      	ldrh	r3, [r7, #10]
 800218e:	11db      	asrs	r3, r3, #7
 8002190:	b2db      	uxtb	r3, r3
 8002192:	f003 0306 	and.w	r3, r3, #6
 8002196:	b2db      	uxtb	r3, r3
 8002198:	f063 030e 	orn	r3, r3, #14
 800219c:	b2da      	uxtb	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	4907      	ldr	r1, [pc, #28]	; (80021c8 <I2C_MasterRequestRead+0x168>)
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f000 f865 	bl	800227a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e000      	b.n	80021bc <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	00010008 	.word	0x00010008
 80021c8:	00010002 	.word	0x00010002

080021cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	603b      	str	r3, [r7, #0]
 80021d8:	4613      	mov	r3, r2
 80021da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021dc:	e025      	b.n	800222a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e4:	d021      	beq.n	800222a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021e6:	f7fe fe49 	bl	8000e7c <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d302      	bcc.n	80021fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d116      	bne.n	800222a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2220      	movs	r2, #32
 8002206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	f043 0220 	orr.w	r2, r3, #32
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e023      	b.n	8002272 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	0c1b      	lsrs	r3, r3, #16
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b01      	cmp	r3, #1
 8002232:	d10d      	bne.n	8002250 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	43da      	mvns	r2, r3
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	4013      	ands	r3, r2
 8002240:	b29b      	uxth	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	bf0c      	ite	eq
 8002246:	2301      	moveq	r3, #1
 8002248:	2300      	movne	r3, #0
 800224a:	b2db      	uxtb	r3, r3
 800224c:	461a      	mov	r2, r3
 800224e:	e00c      	b.n	800226a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	43da      	mvns	r2, r3
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	4013      	ands	r3, r2
 800225c:	b29b      	uxth	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	bf0c      	ite	eq
 8002262:	2301      	moveq	r3, #1
 8002264:	2300      	movne	r3, #0
 8002266:	b2db      	uxtb	r3, r3
 8002268:	461a      	mov	r2, r3
 800226a:	79fb      	ldrb	r3, [r7, #7]
 800226c:	429a      	cmp	r2, r3
 800226e:	d0b6      	beq.n	80021de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b084      	sub	sp, #16
 800227e:	af00      	add	r7, sp, #0
 8002280:	60f8      	str	r0, [r7, #12]
 8002282:	60b9      	str	r1, [r7, #8]
 8002284:	607a      	str	r2, [r7, #4]
 8002286:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002288:	e051      	b.n	800232e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002294:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002298:	d123      	bne.n	80022e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80022b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2220      	movs	r2, #32
 80022be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	f043 0204 	orr.w	r2, r3, #4
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e046      	b.n	8002370 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e8:	d021      	beq.n	800232e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ea:	f7fe fdc7 	bl	8000e7c <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d302      	bcc.n	8002300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d116      	bne.n	800232e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2200      	movs	r2, #0
 8002304:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2220      	movs	r2, #32
 800230a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	f043 0220 	orr.w	r2, r3, #32
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e020      	b.n	8002370 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	0c1b      	lsrs	r3, r3, #16
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b01      	cmp	r3, #1
 8002336:	d10c      	bne.n	8002352 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	43da      	mvns	r2, r3
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	4013      	ands	r3, r2
 8002344:	b29b      	uxth	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	bf14      	ite	ne
 800234a:	2301      	movne	r3, #1
 800234c:	2300      	moveq	r3, #0
 800234e:	b2db      	uxtb	r3, r3
 8002350:	e00b      	b.n	800236a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	43da      	mvns	r2, r3
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	4013      	ands	r3, r2
 800235e:	b29b      	uxth	r3, r3
 8002360:	2b00      	cmp	r3, #0
 8002362:	bf14      	ite	ne
 8002364:	2301      	movne	r3, #1
 8002366:	2300      	moveq	r3, #0
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d18d      	bne.n	800228a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002384:	e02d      	b.n	80023e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f000 f8ce 	bl	8002528 <I2C_IsAcknowledgeFailed>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e02d      	b.n	80023f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800239c:	d021      	beq.n	80023e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800239e:	f7fe fd6d 	bl	8000e7c <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	68ba      	ldr	r2, [r7, #8]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d302      	bcc.n	80023b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d116      	bne.n	80023e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2220      	movs	r2, #32
 80023be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	f043 0220 	orr.w	r2, r3, #32
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e007      	b.n	80023f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ec:	2b80      	cmp	r3, #128	; 0x80
 80023ee:	d1ca      	bne.n	8002386 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b084      	sub	sp, #16
 80023fe:	af00      	add	r7, sp, #0
 8002400:	60f8      	str	r0, [r7, #12]
 8002402:	60b9      	str	r1, [r7, #8]
 8002404:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002406:	e02d      	b.n	8002464 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f000 f88d 	bl	8002528 <I2C_IsAcknowledgeFailed>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e02d      	b.n	8002474 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800241e:	d021      	beq.n	8002464 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002420:	f7fe fd2c 	bl	8000e7c <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	68ba      	ldr	r2, [r7, #8]
 800242c:	429a      	cmp	r2, r3
 800242e:	d302      	bcc.n	8002436 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d116      	bne.n	8002464 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2220      	movs	r2, #32
 8002440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002450:	f043 0220 	orr.w	r2, r3, #32
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e007      	b.n	8002474 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	f003 0304 	and.w	r3, r3, #4
 800246e:	2b04      	cmp	r3, #4
 8002470:	d1ca      	bne.n	8002408 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002488:	e042      	b.n	8002510 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	f003 0310 	and.w	r3, r3, #16
 8002494:	2b10      	cmp	r3, #16
 8002496:	d119      	bne.n	80024cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f06f 0210 	mvn.w	r2, #16
 80024a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2220      	movs	r2, #32
 80024ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e029      	b.n	8002520 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024cc:	f7fe fcd6 	bl	8000e7c <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d302      	bcc.n	80024e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d116      	bne.n	8002510 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2220      	movs	r2, #32
 80024ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fc:	f043 0220 	orr.w	r2, r3, #32
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e007      	b.n	8002520 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800251a:	2b40      	cmp	r3, #64	; 0x40
 800251c:	d1b5      	bne.n	800248a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800253a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800253e:	d11b      	bne.n	8002578 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002548:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2220      	movs	r2, #32
 8002554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002564:	f043 0204 	orr.w	r2, r3, #4
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e000      	b.n	800257a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
	...

08002588 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 800258c:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <HAL_PWR_PVD_IRQHandler+0x20>)
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d005      	beq.n	80025a4 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8002598:	f000 f808 	bl	80025ac <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800259c:	4b02      	ldr	r3, [pc, #8]	; (80025a8 <HAL_PWR_PVD_IRQHandler+0x20>)
 800259e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80025a2:	615a      	str	r2, [r3, #20]
  }
}
 80025a4:	bf00      	nop
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40013c00 	.word	0x40013c00

080025ac <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 80025b0:	bf00      	nop
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
	...

080025bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e22d      	b.n	8002a2a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d075      	beq.n	80026c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025da:	4ba3      	ldr	r3, [pc, #652]	; (8002868 <HAL_RCC_OscConfig+0x2ac>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 030c 	and.w	r3, r3, #12
 80025e2:	2b04      	cmp	r3, #4
 80025e4:	d00c      	beq.n	8002600 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025e6:	4ba0      	ldr	r3, [pc, #640]	; (8002868 <HAL_RCC_OscConfig+0x2ac>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025ee:	2b08      	cmp	r3, #8
 80025f0:	d112      	bne.n	8002618 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025f2:	4b9d      	ldr	r3, [pc, #628]	; (8002868 <HAL_RCC_OscConfig+0x2ac>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025fe:	d10b      	bne.n	8002618 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002600:	4b99      	ldr	r3, [pc, #612]	; (8002868 <HAL_RCC_OscConfig+0x2ac>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d05b      	beq.n	80026c4 <HAL_RCC_OscConfig+0x108>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d157      	bne.n	80026c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e208      	b.n	8002a2a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002620:	d106      	bne.n	8002630 <HAL_RCC_OscConfig+0x74>
 8002622:	4b91      	ldr	r3, [pc, #580]	; (8002868 <HAL_RCC_OscConfig+0x2ac>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a90      	ldr	r2, [pc, #576]	; (8002868 <HAL_RCC_OscConfig+0x2ac>)
 8002628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	e01d      	b.n	800266c <HAL_RCC_OscConfig+0xb0>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002638:	d10c      	bne.n	8002654 <HAL_RCC_OscConfig+0x98>
 800263a:	4b8b      	ldr	r3, [pc, #556]	; (8002868 <HAL_RCC_OscConfig+0x2ac>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a8a      	ldr	r2, [pc, #552]	; (8002868 <HAL_RCC_OscConfig+0x2ac>)
 8002640:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002644:	6013      	str	r3, [r2, #0]
 8002646:	4b88      	ldr	r3, [pc, #544]	; (8002868 <HAL_RCC_OscConfig+0x2ac>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a87      	ldr	r2, [pc, #540]	; (8002868 <HAL_RCC_OscConfig+0x2ac>)
 800264c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002650:	6013      	str	r3, [r2, #0]
 8002652:	e00b      	b.n	800266c <HAL_RCC_OscConfig+0xb0>
 8002654:	4b84      	ldr	r3, [pc, #528]	; (8002868 <HAL_RCC_OscConfig+0x2ac>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a83      	ldr	r2, [pc, #524]	; (8002868 <HAL_RCC_OscConfig+0x2ac>)
 800265a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800265e:	6013      	str	r3, [r2, #0]
 8002660:	4b81      	ldr	r3, [pc, #516]	; (8002868 <HAL_RCC_OscConfig+0x2ac>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a80      	ldr	r2, [pc, #512]	; (8002868 <HAL_RCC_OscConfig+0x2ac>)
 8002666:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800266a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d013      	beq.n	800269c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002674:	f7fe fc02 	bl	8000e7c <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800267c:	f7fe fbfe 	bl	8000e7c <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b64      	cmp	r3, #100	; 0x64
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e1cd      	b.n	8002a2a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268e:	4b76      	ldr	r3, [pc, #472]	; (8002868 <HAL_RCC_OscConfig+0x2ac>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d0f0      	beq.n	800267c <HAL_RCC_OscConfig+0xc0>
 800269a:	e014      	b.n	80026c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269c:	f7fe fbee 	bl	8000e7c <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026a4:	f7fe fbea 	bl	8000e7c <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b64      	cmp	r3, #100	; 0x64
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e1b9      	b.n	8002a2a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026b6:	4b6c      	ldr	r3, [pc, #432]	; (8002868 <HAL_RCC_OscConfig+0x2ac>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1f0      	bne.n	80026a4 <HAL_RCC_OscConfig+0xe8>
 80026c2:	e000      	b.n	80026c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d063      	beq.n	800279a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026d2:	4b65      	ldr	r3, [pc, #404]	; (8002868 <HAL_RCC_OscConfig+0x2ac>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 030c 	and.w	r3, r3, #12
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00b      	beq.n	80026f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026de:	4b62      	ldr	r3, [pc, #392]	; (8002868 <HAL_RCC_OscConfig+0x2ac>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026e6:	2b08      	cmp	r3, #8
 80026e8:	d11c      	bne.n	8002724 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ea:	4b5f      	ldr	r3, [pc, #380]	; (8002868 <HAL_RCC_OscConfig+0x2ac>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d116      	bne.n	8002724 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026f6:	4b5c      	ldr	r3, [pc, #368]	; (8002868 <HAL_RCC_OscConfig+0x2ac>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d005      	beq.n	800270e <HAL_RCC_OscConfig+0x152>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d001      	beq.n	800270e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e18d      	b.n	8002a2a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800270e:	4b56      	ldr	r3, [pc, #344]	; (8002868 <HAL_RCC_OscConfig+0x2ac>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	4952      	ldr	r1, [pc, #328]	; (8002868 <HAL_RCC_OscConfig+0x2ac>)
 800271e:	4313      	orrs	r3, r2
 8002720:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002722:	e03a      	b.n	800279a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d020      	beq.n	800276e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800272c:	4b4f      	ldr	r3, [pc, #316]	; (800286c <HAL_RCC_OscConfig+0x2b0>)
 800272e:	2201      	movs	r2, #1
 8002730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002732:	f7fe fba3 	bl	8000e7c <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002738:	e008      	b.n	800274c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800273a:	f7fe fb9f 	bl	8000e7c <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e16e      	b.n	8002a2a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800274c:	4b46      	ldr	r3, [pc, #280]	; (8002868 <HAL_RCC_OscConfig+0x2ac>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0f0      	beq.n	800273a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002758:	4b43      	ldr	r3, [pc, #268]	; (8002868 <HAL_RCC_OscConfig+0x2ac>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	4940      	ldr	r1, [pc, #256]	; (8002868 <HAL_RCC_OscConfig+0x2ac>)
 8002768:	4313      	orrs	r3, r2
 800276a:	600b      	str	r3, [r1, #0]
 800276c:	e015      	b.n	800279a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800276e:	4b3f      	ldr	r3, [pc, #252]	; (800286c <HAL_RCC_OscConfig+0x2b0>)
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002774:	f7fe fb82 	bl	8000e7c <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800277c:	f7fe fb7e 	bl	8000e7c <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e14d      	b.n	8002a2a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800278e:	4b36      	ldr	r3, [pc, #216]	; (8002868 <HAL_RCC_OscConfig+0x2ac>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1f0      	bne.n	800277c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0308 	and.w	r3, r3, #8
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d030      	beq.n	8002808 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d016      	beq.n	80027dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ae:	4b30      	ldr	r3, [pc, #192]	; (8002870 <HAL_RCC_OscConfig+0x2b4>)
 80027b0:	2201      	movs	r2, #1
 80027b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b4:	f7fe fb62 	bl	8000e7c <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027bc:	f7fe fb5e 	bl	8000e7c <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e12d      	b.n	8002a2a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ce:	4b26      	ldr	r3, [pc, #152]	; (8002868 <HAL_RCC_OscConfig+0x2ac>)
 80027d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d0f0      	beq.n	80027bc <HAL_RCC_OscConfig+0x200>
 80027da:	e015      	b.n	8002808 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027dc:	4b24      	ldr	r3, [pc, #144]	; (8002870 <HAL_RCC_OscConfig+0x2b4>)
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e2:	f7fe fb4b 	bl	8000e7c <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027e8:	e008      	b.n	80027fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027ea:	f7fe fb47 	bl	8000e7c <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e116      	b.n	8002a2a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027fc:	4b1a      	ldr	r3, [pc, #104]	; (8002868 <HAL_RCC_OscConfig+0x2ac>)
 80027fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1f0      	bne.n	80027ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 80a0 	beq.w	8002956 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002816:	2300      	movs	r3, #0
 8002818:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800281a:	4b13      	ldr	r3, [pc, #76]	; (8002868 <HAL_RCC_OscConfig+0x2ac>)
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10f      	bne.n	8002846 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	4b0f      	ldr	r3, [pc, #60]	; (8002868 <HAL_RCC_OscConfig+0x2ac>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	4a0e      	ldr	r2, [pc, #56]	; (8002868 <HAL_RCC_OscConfig+0x2ac>)
 8002830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002834:	6413      	str	r3, [r2, #64]	; 0x40
 8002836:	4b0c      	ldr	r3, [pc, #48]	; (8002868 <HAL_RCC_OscConfig+0x2ac>)
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002842:	2301      	movs	r3, #1
 8002844:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002846:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <HAL_RCC_OscConfig+0x2b8>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284e:	2b00      	cmp	r3, #0
 8002850:	d121      	bne.n	8002896 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002852:	4b08      	ldr	r3, [pc, #32]	; (8002874 <HAL_RCC_OscConfig+0x2b8>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a07      	ldr	r2, [pc, #28]	; (8002874 <HAL_RCC_OscConfig+0x2b8>)
 8002858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800285c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800285e:	f7fe fb0d 	bl	8000e7c <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002864:	e011      	b.n	800288a <HAL_RCC_OscConfig+0x2ce>
 8002866:	bf00      	nop
 8002868:	40023800 	.word	0x40023800
 800286c:	42470000 	.word	0x42470000
 8002870:	42470e80 	.word	0x42470e80
 8002874:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002878:	f7fe fb00 	bl	8000e7c <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e0cf      	b.n	8002a2a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288a:	4b6a      	ldr	r3, [pc, #424]	; (8002a34 <HAL_RCC_OscConfig+0x478>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0f0      	beq.n	8002878 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d106      	bne.n	80028ac <HAL_RCC_OscConfig+0x2f0>
 800289e:	4b66      	ldr	r3, [pc, #408]	; (8002a38 <HAL_RCC_OscConfig+0x47c>)
 80028a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a2:	4a65      	ldr	r2, [pc, #404]	; (8002a38 <HAL_RCC_OscConfig+0x47c>)
 80028a4:	f043 0301 	orr.w	r3, r3, #1
 80028a8:	6713      	str	r3, [r2, #112]	; 0x70
 80028aa:	e01c      	b.n	80028e6 <HAL_RCC_OscConfig+0x32a>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	2b05      	cmp	r3, #5
 80028b2:	d10c      	bne.n	80028ce <HAL_RCC_OscConfig+0x312>
 80028b4:	4b60      	ldr	r3, [pc, #384]	; (8002a38 <HAL_RCC_OscConfig+0x47c>)
 80028b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b8:	4a5f      	ldr	r2, [pc, #380]	; (8002a38 <HAL_RCC_OscConfig+0x47c>)
 80028ba:	f043 0304 	orr.w	r3, r3, #4
 80028be:	6713      	str	r3, [r2, #112]	; 0x70
 80028c0:	4b5d      	ldr	r3, [pc, #372]	; (8002a38 <HAL_RCC_OscConfig+0x47c>)
 80028c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c4:	4a5c      	ldr	r2, [pc, #368]	; (8002a38 <HAL_RCC_OscConfig+0x47c>)
 80028c6:	f043 0301 	orr.w	r3, r3, #1
 80028ca:	6713      	str	r3, [r2, #112]	; 0x70
 80028cc:	e00b      	b.n	80028e6 <HAL_RCC_OscConfig+0x32a>
 80028ce:	4b5a      	ldr	r3, [pc, #360]	; (8002a38 <HAL_RCC_OscConfig+0x47c>)
 80028d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d2:	4a59      	ldr	r2, [pc, #356]	; (8002a38 <HAL_RCC_OscConfig+0x47c>)
 80028d4:	f023 0301 	bic.w	r3, r3, #1
 80028d8:	6713      	str	r3, [r2, #112]	; 0x70
 80028da:	4b57      	ldr	r3, [pc, #348]	; (8002a38 <HAL_RCC_OscConfig+0x47c>)
 80028dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028de:	4a56      	ldr	r2, [pc, #344]	; (8002a38 <HAL_RCC_OscConfig+0x47c>)
 80028e0:	f023 0304 	bic.w	r3, r3, #4
 80028e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d015      	beq.n	800291a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ee:	f7fe fac5 	bl	8000e7c <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028f4:	e00a      	b.n	800290c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028f6:	f7fe fac1 	bl	8000e7c <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	f241 3288 	movw	r2, #5000	; 0x1388
 8002904:	4293      	cmp	r3, r2
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e08e      	b.n	8002a2a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800290c:	4b4a      	ldr	r3, [pc, #296]	; (8002a38 <HAL_RCC_OscConfig+0x47c>)
 800290e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d0ee      	beq.n	80028f6 <HAL_RCC_OscConfig+0x33a>
 8002918:	e014      	b.n	8002944 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800291a:	f7fe faaf 	bl	8000e7c <HAL_GetTick>
 800291e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002920:	e00a      	b.n	8002938 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002922:	f7fe faab 	bl	8000e7c <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002930:	4293      	cmp	r3, r2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e078      	b.n	8002a2a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002938:	4b3f      	ldr	r3, [pc, #252]	; (8002a38 <HAL_RCC_OscConfig+0x47c>)
 800293a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1ee      	bne.n	8002922 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002944:	7dfb      	ldrb	r3, [r7, #23]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d105      	bne.n	8002956 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800294a:	4b3b      	ldr	r3, [pc, #236]	; (8002a38 <HAL_RCC_OscConfig+0x47c>)
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	4a3a      	ldr	r2, [pc, #232]	; (8002a38 <HAL_RCC_OscConfig+0x47c>)
 8002950:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002954:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d064      	beq.n	8002a28 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800295e:	4b36      	ldr	r3, [pc, #216]	; (8002a38 <HAL_RCC_OscConfig+0x47c>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 030c 	and.w	r3, r3, #12
 8002966:	2b08      	cmp	r3, #8
 8002968:	d05c      	beq.n	8002a24 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	2b02      	cmp	r3, #2
 8002970:	d141      	bne.n	80029f6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002972:	4b32      	ldr	r3, [pc, #200]	; (8002a3c <HAL_RCC_OscConfig+0x480>)
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002978:	f7fe fa80 	bl	8000e7c <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002980:	f7fe fa7c 	bl	8000e7c <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e04b      	b.n	8002a2a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002992:	4b29      	ldr	r3, [pc, #164]	; (8002a38 <HAL_RCC_OscConfig+0x47c>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1f0      	bne.n	8002980 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69da      	ldr	r2, [r3, #28]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ac:	019b      	lsls	r3, r3, #6
 80029ae:	431a      	orrs	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b4:	085b      	lsrs	r3, r3, #1
 80029b6:	3b01      	subs	r3, #1
 80029b8:	041b      	lsls	r3, r3, #16
 80029ba:	431a      	orrs	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c0:	061b      	lsls	r3, r3, #24
 80029c2:	491d      	ldr	r1, [pc, #116]	; (8002a38 <HAL_RCC_OscConfig+0x47c>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029c8:	4b1c      	ldr	r3, [pc, #112]	; (8002a3c <HAL_RCC_OscConfig+0x480>)
 80029ca:	2201      	movs	r2, #1
 80029cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ce:	f7fe fa55 	bl	8000e7c <HAL_GetTick>
 80029d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029d4:	e008      	b.n	80029e8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029d6:	f7fe fa51 	bl	8000e7c <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e020      	b.n	8002a2a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e8:	4b13      	ldr	r3, [pc, #76]	; (8002a38 <HAL_RCC_OscConfig+0x47c>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0f0      	beq.n	80029d6 <HAL_RCC_OscConfig+0x41a>
 80029f4:	e018      	b.n	8002a28 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029f6:	4b11      	ldr	r3, [pc, #68]	; (8002a3c <HAL_RCC_OscConfig+0x480>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029fc:	f7fe fa3e 	bl	8000e7c <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a04:	f7fe fa3a 	bl	8000e7c <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e009      	b.n	8002a2a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a16:	4b08      	ldr	r3, [pc, #32]	; (8002a38 <HAL_RCC_OscConfig+0x47c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1f0      	bne.n	8002a04 <HAL_RCC_OscConfig+0x448>
 8002a22:	e001      	b.n	8002a28 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e000      	b.n	8002a2a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3718      	adds	r7, #24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	40007000 	.word	0x40007000
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	42470060 	.word	0x42470060

08002a40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d101      	bne.n	8002a54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e0ca      	b.n	8002bea <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a54:	4b67      	ldr	r3, [pc, #412]	; (8002bf4 <HAL_RCC_ClockConfig+0x1b4>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 030f 	and.w	r3, r3, #15
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d90c      	bls.n	8002a7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a62:	4b64      	ldr	r3, [pc, #400]	; (8002bf4 <HAL_RCC_ClockConfig+0x1b4>)
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a6a:	4b62      	ldr	r3, [pc, #392]	; (8002bf4 <HAL_RCC_ClockConfig+0x1b4>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d001      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e0b6      	b.n	8002bea <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d020      	beq.n	8002aca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d005      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a94:	4b58      	ldr	r3, [pc, #352]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	4a57      	ldr	r2, [pc, #348]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0308 	and.w	r3, r3, #8
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d005      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002aac:	4b52      	ldr	r3, [pc, #328]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	4a51      	ldr	r2, [pc, #324]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ab6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ab8:	4b4f      	ldr	r3, [pc, #316]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	494c      	ldr	r1, [pc, #304]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d044      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d107      	bne.n	8002aee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ade:	4b46      	ldr	r3, [pc, #280]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d119      	bne.n	8002b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e07d      	b.n	8002bea <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d003      	beq.n	8002afe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002afa:	2b03      	cmp	r3, #3
 8002afc:	d107      	bne.n	8002b0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002afe:	4b3e      	ldr	r3, [pc, #248]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d109      	bne.n	8002b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e06d      	b.n	8002bea <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b0e:	4b3a      	ldr	r3, [pc, #232]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e065      	b.n	8002bea <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b1e:	4b36      	ldr	r3, [pc, #216]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f023 0203 	bic.w	r2, r3, #3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	4933      	ldr	r1, [pc, #204]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b30:	f7fe f9a4 	bl	8000e7c <HAL_GetTick>
 8002b34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b36:	e00a      	b.n	8002b4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b38:	f7fe f9a0 	bl	8000e7c <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e04d      	b.n	8002bea <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4e:	4b2a      	ldr	r3, [pc, #168]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 020c 	and.w	r2, r3, #12
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d1eb      	bne.n	8002b38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b60:	4b24      	ldr	r3, [pc, #144]	; (8002bf4 <HAL_RCC_ClockConfig+0x1b4>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 030f 	and.w	r3, r3, #15
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d20c      	bcs.n	8002b88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6e:	4b21      	ldr	r3, [pc, #132]	; (8002bf4 <HAL_RCC_ClockConfig+0x1b4>)
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b76:	4b1f      	ldr	r3, [pc, #124]	; (8002bf4 <HAL_RCC_ClockConfig+0x1b4>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d001      	beq.n	8002b88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e030      	b.n	8002bea <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0304 	and.w	r3, r3, #4
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d008      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b94:	4b18      	ldr	r3, [pc, #96]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	4915      	ldr	r1, [pc, #84]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0308 	and.w	r3, r3, #8
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d009      	beq.n	8002bc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bb2:	4b11      	ldr	r3, [pc, #68]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	490d      	ldr	r1, [pc, #52]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bc6:	f000 f81d 	bl	8002c04 <HAL_RCC_GetSysClockFreq>
 8002bca:	4601      	mov	r1, r0
 8002bcc:	4b0a      	ldr	r3, [pc, #40]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	091b      	lsrs	r3, r3, #4
 8002bd2:	f003 030f 	and.w	r3, r3, #15
 8002bd6:	4a09      	ldr	r2, [pc, #36]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002bd8:	5cd3      	ldrb	r3, [r2, r3]
 8002bda:	fa21 f303 	lsr.w	r3, r1, r3
 8002bde:	4a08      	ldr	r2, [pc, #32]	; (8002c00 <HAL_RCC_ClockConfig+0x1c0>)
 8002be0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002be2:	2000      	movs	r0, #0
 8002be4:	f7fe f906 	bl	8000df4 <HAL_InitTick>

  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40023c00 	.word	0x40023c00
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	080050ac 	.word	0x080050ac
 8002c00:	20000008 	.word	0x20000008

08002c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	607b      	str	r3, [r7, #4]
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	2300      	movs	r3, #0
 8002c14:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002c16:	2300      	movs	r3, #0
 8002c18:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c1a:	4b63      	ldr	r3, [pc, #396]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 030c 	and.w	r3, r3, #12
 8002c22:	2b04      	cmp	r3, #4
 8002c24:	d007      	beq.n	8002c36 <HAL_RCC_GetSysClockFreq+0x32>
 8002c26:	2b08      	cmp	r3, #8
 8002c28:	d008      	beq.n	8002c3c <HAL_RCC_GetSysClockFreq+0x38>
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f040 80b4 	bne.w	8002d98 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c30:	4b5e      	ldr	r3, [pc, #376]	; (8002dac <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002c32:	60bb      	str	r3, [r7, #8]
       break;
 8002c34:	e0b3      	b.n	8002d9e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c36:	4b5e      	ldr	r3, [pc, #376]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002c38:	60bb      	str	r3, [r7, #8]
      break;
 8002c3a:	e0b0      	b.n	8002d9e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c3c:	4b5a      	ldr	r3, [pc, #360]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c44:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c46:	4b58      	ldr	r3, [pc, #352]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d04a      	beq.n	8002ce8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c52:	4b55      	ldr	r3, [pc, #340]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	099b      	lsrs	r3, r3, #6
 8002c58:	f04f 0400 	mov.w	r4, #0
 8002c5c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c60:	f04f 0200 	mov.w	r2, #0
 8002c64:	ea03 0501 	and.w	r5, r3, r1
 8002c68:	ea04 0602 	and.w	r6, r4, r2
 8002c6c:	4629      	mov	r1, r5
 8002c6e:	4632      	mov	r2, r6
 8002c70:	f04f 0300 	mov.w	r3, #0
 8002c74:	f04f 0400 	mov.w	r4, #0
 8002c78:	0154      	lsls	r4, r2, #5
 8002c7a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c7e:	014b      	lsls	r3, r1, #5
 8002c80:	4619      	mov	r1, r3
 8002c82:	4622      	mov	r2, r4
 8002c84:	1b49      	subs	r1, r1, r5
 8002c86:	eb62 0206 	sbc.w	r2, r2, r6
 8002c8a:	f04f 0300 	mov.w	r3, #0
 8002c8e:	f04f 0400 	mov.w	r4, #0
 8002c92:	0194      	lsls	r4, r2, #6
 8002c94:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c98:	018b      	lsls	r3, r1, #6
 8002c9a:	1a5b      	subs	r3, r3, r1
 8002c9c:	eb64 0402 	sbc.w	r4, r4, r2
 8002ca0:	f04f 0100 	mov.w	r1, #0
 8002ca4:	f04f 0200 	mov.w	r2, #0
 8002ca8:	00e2      	lsls	r2, r4, #3
 8002caa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002cae:	00d9      	lsls	r1, r3, #3
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	4614      	mov	r4, r2
 8002cb4:	195b      	adds	r3, r3, r5
 8002cb6:	eb44 0406 	adc.w	r4, r4, r6
 8002cba:	f04f 0100 	mov.w	r1, #0
 8002cbe:	f04f 0200 	mov.w	r2, #0
 8002cc2:	0262      	lsls	r2, r4, #9
 8002cc4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002cc8:	0259      	lsls	r1, r3, #9
 8002cca:	460b      	mov	r3, r1
 8002ccc:	4614      	mov	r4, r2
 8002cce:	4618      	mov	r0, r3
 8002cd0:	4621      	mov	r1, r4
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f04f 0400 	mov.w	r4, #0
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4623      	mov	r3, r4
 8002cdc:	f7fd fee8 	bl	8000ab0 <__aeabi_uldivmod>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	460c      	mov	r4, r1
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	e049      	b.n	8002d7c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ce8:	4b2f      	ldr	r3, [pc, #188]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	099b      	lsrs	r3, r3, #6
 8002cee:	f04f 0400 	mov.w	r4, #0
 8002cf2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002cf6:	f04f 0200 	mov.w	r2, #0
 8002cfa:	ea03 0501 	and.w	r5, r3, r1
 8002cfe:	ea04 0602 	and.w	r6, r4, r2
 8002d02:	4629      	mov	r1, r5
 8002d04:	4632      	mov	r2, r6
 8002d06:	f04f 0300 	mov.w	r3, #0
 8002d0a:	f04f 0400 	mov.w	r4, #0
 8002d0e:	0154      	lsls	r4, r2, #5
 8002d10:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d14:	014b      	lsls	r3, r1, #5
 8002d16:	4619      	mov	r1, r3
 8002d18:	4622      	mov	r2, r4
 8002d1a:	1b49      	subs	r1, r1, r5
 8002d1c:	eb62 0206 	sbc.w	r2, r2, r6
 8002d20:	f04f 0300 	mov.w	r3, #0
 8002d24:	f04f 0400 	mov.w	r4, #0
 8002d28:	0194      	lsls	r4, r2, #6
 8002d2a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002d2e:	018b      	lsls	r3, r1, #6
 8002d30:	1a5b      	subs	r3, r3, r1
 8002d32:	eb64 0402 	sbc.w	r4, r4, r2
 8002d36:	f04f 0100 	mov.w	r1, #0
 8002d3a:	f04f 0200 	mov.w	r2, #0
 8002d3e:	00e2      	lsls	r2, r4, #3
 8002d40:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002d44:	00d9      	lsls	r1, r3, #3
 8002d46:	460b      	mov	r3, r1
 8002d48:	4614      	mov	r4, r2
 8002d4a:	195b      	adds	r3, r3, r5
 8002d4c:	eb44 0406 	adc.w	r4, r4, r6
 8002d50:	f04f 0100 	mov.w	r1, #0
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	02a2      	lsls	r2, r4, #10
 8002d5a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002d5e:	0299      	lsls	r1, r3, #10
 8002d60:	460b      	mov	r3, r1
 8002d62:	4614      	mov	r4, r2
 8002d64:	4618      	mov	r0, r3
 8002d66:	4621      	mov	r1, r4
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f04f 0400 	mov.w	r4, #0
 8002d6e:	461a      	mov	r2, r3
 8002d70:	4623      	mov	r3, r4
 8002d72:	f7fd fe9d 	bl	8000ab0 <__aeabi_uldivmod>
 8002d76:	4603      	mov	r3, r0
 8002d78:	460c      	mov	r4, r1
 8002d7a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d7c:	4b0a      	ldr	r3, [pc, #40]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	0c1b      	lsrs	r3, r3, #16
 8002d82:	f003 0303 	and.w	r3, r3, #3
 8002d86:	3301      	adds	r3, #1
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d94:	60bb      	str	r3, [r7, #8]
      break;
 8002d96:	e002      	b.n	8002d9e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d98:	4b04      	ldr	r3, [pc, #16]	; (8002dac <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002d9a:	60bb      	str	r3, [r7, #8]
      break;
 8002d9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d9e:	68bb      	ldr	r3, [r7, #8]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3714      	adds	r7, #20
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002da8:	40023800 	.word	0x40023800
 8002dac:	00f42400 	.word	0x00f42400
 8002db0:	007a1200 	.word	0x007a1200

08002db4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002db8:	4b03      	ldr	r3, [pc, #12]	; (8002dc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dba:	681b      	ldr	r3, [r3, #0]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	20000008 	.word	0x20000008

08002dcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002dd0:	f7ff fff0 	bl	8002db4 <HAL_RCC_GetHCLKFreq>
 8002dd4:	4601      	mov	r1, r0
 8002dd6:	4b05      	ldr	r3, [pc, #20]	; (8002dec <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	0a9b      	lsrs	r3, r3, #10
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	4a03      	ldr	r2, [pc, #12]	; (8002df0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002de2:	5cd3      	ldrb	r3, [r2, r3]
 8002de4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40023800 	.word	0x40023800
 8002df0:	080050bc 	.word	0x080050bc

08002df4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002df8:	f7ff ffdc 	bl	8002db4 <HAL_RCC_GetHCLKFreq>
 8002dfc:	4601      	mov	r1, r0
 8002dfe:	4b05      	ldr	r3, [pc, #20]	; (8002e14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	0b5b      	lsrs	r3, r3, #13
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	4a03      	ldr	r2, [pc, #12]	; (8002e18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e0a:	5cd3      	ldrb	r3, [r2, r3]
 8002e0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40023800 	.word	0x40023800
 8002e18:	080050bc 	.word	0x080050bc

08002e1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e01d      	b.n	8002e6a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d106      	bne.n	8002e48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f001 fd6c 	bl	8004920 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3304      	adds	r3, #4
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4610      	mov	r0, r2
 8002e5c:	f000 f8c0 	bl	8002fe0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b084      	sub	sp, #16
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
 8002e7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d101      	bne.n	8002e8a <HAL_TIM_ConfigClockSource+0x18>
 8002e86:	2302      	movs	r3, #2
 8002e88:	e0a6      	b.n	8002fd8 <HAL_TIM_ConfigClockSource+0x166>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2202      	movs	r2, #2
 8002e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ea8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002eb0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2b40      	cmp	r3, #64	; 0x40
 8002ec0:	d067      	beq.n	8002f92 <HAL_TIM_ConfigClockSource+0x120>
 8002ec2:	2b40      	cmp	r3, #64	; 0x40
 8002ec4:	d80b      	bhi.n	8002ede <HAL_TIM_ConfigClockSource+0x6c>
 8002ec6:	2b10      	cmp	r3, #16
 8002ec8:	d073      	beq.n	8002fb2 <HAL_TIM_ConfigClockSource+0x140>
 8002eca:	2b10      	cmp	r3, #16
 8002ecc:	d802      	bhi.n	8002ed4 <HAL_TIM_ConfigClockSource+0x62>
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d06f      	beq.n	8002fb2 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002ed2:	e078      	b.n	8002fc6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002ed4:	2b20      	cmp	r3, #32
 8002ed6:	d06c      	beq.n	8002fb2 <HAL_TIM_ConfigClockSource+0x140>
 8002ed8:	2b30      	cmp	r3, #48	; 0x30
 8002eda:	d06a      	beq.n	8002fb2 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002edc:	e073      	b.n	8002fc6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002ede:	2b70      	cmp	r3, #112	; 0x70
 8002ee0:	d00d      	beq.n	8002efe <HAL_TIM_ConfigClockSource+0x8c>
 8002ee2:	2b70      	cmp	r3, #112	; 0x70
 8002ee4:	d804      	bhi.n	8002ef0 <HAL_TIM_ConfigClockSource+0x7e>
 8002ee6:	2b50      	cmp	r3, #80	; 0x50
 8002ee8:	d033      	beq.n	8002f52 <HAL_TIM_ConfigClockSource+0xe0>
 8002eea:	2b60      	cmp	r3, #96	; 0x60
 8002eec:	d041      	beq.n	8002f72 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002eee:	e06a      	b.n	8002fc6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002ef0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ef4:	d066      	beq.n	8002fc4 <HAL_TIM_ConfigClockSource+0x152>
 8002ef6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002efa:	d017      	beq.n	8002f2c <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002efc:	e063      	b.n	8002fc6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6818      	ldr	r0, [r3, #0]
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	6899      	ldr	r1, [r3, #8]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685a      	ldr	r2, [r3, #4]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	f000 f961 	bl	80031d4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f20:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	609a      	str	r2, [r3, #8]
      break;
 8002f2a:	e04c      	b.n	8002fc6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6818      	ldr	r0, [r3, #0]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	6899      	ldr	r1, [r3, #8]
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f000 f94a 	bl	80031d4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689a      	ldr	r2, [r3, #8]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f4e:	609a      	str	r2, [r3, #8]
      break;
 8002f50:	e039      	b.n	8002fc6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6818      	ldr	r0, [r3, #0]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	6859      	ldr	r1, [r3, #4]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	f000 f8be 	bl	80030e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2150      	movs	r1, #80	; 0x50
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 f917 	bl	800319e <TIM_ITRx_SetConfig>
      break;
 8002f70:	e029      	b.n	8002fc6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6818      	ldr	r0, [r3, #0]
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	6859      	ldr	r1, [r3, #4]
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	f000 f8dd 	bl	800313e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2160      	movs	r1, #96	; 0x60
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 f907 	bl	800319e <TIM_ITRx_SetConfig>
      break;
 8002f90:	e019      	b.n	8002fc6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6818      	ldr	r0, [r3, #0]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	6859      	ldr	r1, [r3, #4]
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	f000 f89e 	bl	80030e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2140      	movs	r1, #64	; 0x40
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 f8f7 	bl	800319e <TIM_ITRx_SetConfig>
      break;
 8002fb0:	e009      	b.n	8002fc6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4610      	mov	r0, r2
 8002fbe:	f000 f8ee 	bl	800319e <TIM_ITRx_SetConfig>
      break;
 8002fc2:	e000      	b.n	8002fc6 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002fc4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3710      	adds	r7, #16
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a34      	ldr	r2, [pc, #208]	; (80030c4 <TIM_Base_SetConfig+0xe4>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d00f      	beq.n	8003018 <TIM_Base_SetConfig+0x38>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ffe:	d00b      	beq.n	8003018 <TIM_Base_SetConfig+0x38>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a31      	ldr	r2, [pc, #196]	; (80030c8 <TIM_Base_SetConfig+0xe8>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d007      	beq.n	8003018 <TIM_Base_SetConfig+0x38>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a30      	ldr	r2, [pc, #192]	; (80030cc <TIM_Base_SetConfig+0xec>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d003      	beq.n	8003018 <TIM_Base_SetConfig+0x38>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a2f      	ldr	r2, [pc, #188]	; (80030d0 <TIM_Base_SetConfig+0xf0>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d108      	bne.n	800302a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800301e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	4313      	orrs	r3, r2
 8003028:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a25      	ldr	r2, [pc, #148]	; (80030c4 <TIM_Base_SetConfig+0xe4>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d01b      	beq.n	800306a <TIM_Base_SetConfig+0x8a>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003038:	d017      	beq.n	800306a <TIM_Base_SetConfig+0x8a>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a22      	ldr	r2, [pc, #136]	; (80030c8 <TIM_Base_SetConfig+0xe8>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d013      	beq.n	800306a <TIM_Base_SetConfig+0x8a>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a21      	ldr	r2, [pc, #132]	; (80030cc <TIM_Base_SetConfig+0xec>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d00f      	beq.n	800306a <TIM_Base_SetConfig+0x8a>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a20      	ldr	r2, [pc, #128]	; (80030d0 <TIM_Base_SetConfig+0xf0>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d00b      	beq.n	800306a <TIM_Base_SetConfig+0x8a>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a1f      	ldr	r2, [pc, #124]	; (80030d4 <TIM_Base_SetConfig+0xf4>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d007      	beq.n	800306a <TIM_Base_SetConfig+0x8a>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a1e      	ldr	r2, [pc, #120]	; (80030d8 <TIM_Base_SetConfig+0xf8>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d003      	beq.n	800306a <TIM_Base_SetConfig+0x8a>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a1d      	ldr	r2, [pc, #116]	; (80030dc <TIM_Base_SetConfig+0xfc>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d108      	bne.n	800307c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003070:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	4313      	orrs	r3, r2
 800307a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	4313      	orrs	r3, r2
 8003088:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a08      	ldr	r2, [pc, #32]	; (80030c4 <TIM_Base_SetConfig+0xe4>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d103      	bne.n	80030b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	691a      	ldr	r2, [r3, #16]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	615a      	str	r2, [r3, #20]
}
 80030b6:	bf00      	nop
 80030b8:	3714      	adds	r7, #20
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	40010000 	.word	0x40010000
 80030c8:	40000400 	.word	0x40000400
 80030cc:	40000800 	.word	0x40000800
 80030d0:	40000c00 	.word	0x40000c00
 80030d4:	40014000 	.word	0x40014000
 80030d8:	40014400 	.word	0x40014400
 80030dc:	40014800 	.word	0x40014800

080030e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b087      	sub	sp, #28
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6a1b      	ldr	r3, [r3, #32]
 80030f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	f023 0201 	bic.w	r2, r3, #1
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800310a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	011b      	lsls	r3, r3, #4
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	4313      	orrs	r3, r2
 8003114:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	f023 030a 	bic.w	r3, r3, #10
 800311c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	4313      	orrs	r3, r2
 8003124:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	621a      	str	r2, [r3, #32]
}
 8003132:	bf00      	nop
 8003134:	371c      	adds	r7, #28
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr

0800313e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800313e:	b480      	push	{r7}
 8003140:	b087      	sub	sp, #28
 8003142:	af00      	add	r7, sp, #0
 8003144:	60f8      	str	r0, [r7, #12]
 8003146:	60b9      	str	r1, [r7, #8]
 8003148:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	f023 0210 	bic.w	r2, r3, #16
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6a1b      	ldr	r3, [r3, #32]
 8003160:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003168:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	031b      	lsls	r3, r3, #12
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	4313      	orrs	r3, r2
 8003172:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800317a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	011b      	lsls	r3, r3, #4
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	4313      	orrs	r3, r2
 8003184:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	621a      	str	r2, [r3, #32]
}
 8003192:	bf00      	nop
 8003194:	371c      	adds	r7, #28
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800319e:	b480      	push	{r7}
 80031a0:	b085      	sub	sp, #20
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
 80031a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	f043 0307 	orr.w	r3, r3, #7
 80031c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	609a      	str	r2, [r3, #8]
}
 80031c8:	bf00      	nop
 80031ca:	3714      	adds	r7, #20
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b087      	sub	sp, #28
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
 80031e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	021a      	lsls	r2, r3, #8
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	431a      	orrs	r2, r3
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	697a      	ldr	r2, [r7, #20]
 80031fe:	4313      	orrs	r3, r2
 8003200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	609a      	str	r2, [r3, #8]
}
 8003208:	bf00      	nop
 800320a:	371c      	adds	r7, #28
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003224:	2b01      	cmp	r3, #1
 8003226:	d101      	bne.n	800322c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003228:	2302      	movs	r3, #2
 800322a:	e032      	b.n	8003292 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2202      	movs	r2, #2
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003252:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	4313      	orrs	r3, r2
 800325c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003264:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	68ba      	ldr	r2, [r7, #8]
 800326c:	4313      	orrs	r3, r2
 800326e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68ba      	ldr	r2, [r7, #8]
 800327e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr

0800329e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b082      	sub	sp, #8
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e03f      	b.n	8003330 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d106      	bne.n	80032ca <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f001 fb75 	bl	80049b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2224      	movs	r2, #36	; 0x24
 80032ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68da      	ldr	r2, [r3, #12]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032e0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f90c 	bl	8003500 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	691a      	ldr	r2, [r3, #16]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032f6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	695a      	ldr	r2, [r3, #20]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003306:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68da      	ldr	r2, [r3, #12]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003316:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2220      	movs	r2, #32
 8003322:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2220      	movs	r2, #32
 800332a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b088      	sub	sp, #32
 800333c:	af02      	add	r7, sp, #8
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	603b      	str	r3, [r7, #0]
 8003344:	4613      	mov	r3, r2
 8003346:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003348:	2300      	movs	r3, #0
 800334a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b20      	cmp	r3, #32
 8003356:	f040 8083 	bne.w	8003460 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d002      	beq.n	8003366 <HAL_UART_Transmit+0x2e>
 8003360:	88fb      	ldrh	r3, [r7, #6]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e07b      	b.n	8003462 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003370:	2b01      	cmp	r3, #1
 8003372:	d101      	bne.n	8003378 <HAL_UART_Transmit+0x40>
 8003374:	2302      	movs	r3, #2
 8003376:	e074      	b.n	8003462 <HAL_UART_Transmit+0x12a>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2221      	movs	r2, #33	; 0x21
 800338a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800338e:	f7fd fd75 	bl	8000e7c <HAL_GetTick>
 8003392:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	88fa      	ldrh	r2, [r7, #6]
 8003398:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	88fa      	ldrh	r2, [r7, #6]
 800339e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80033a0:	e042      	b.n	8003428 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	3b01      	subs	r3, #1
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033b8:	d122      	bne.n	8003400 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	9300      	str	r3, [sp, #0]
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	2200      	movs	r2, #0
 80033c2:	2180      	movs	r1, #128	; 0x80
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f000 f850 	bl	800346a <UART_WaitOnFlagUntilTimeout>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e046      	b.n	8003462 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	881b      	ldrh	r3, [r3, #0]
 80033dc:	461a      	mov	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033e6:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d103      	bne.n	80033f8 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	3302      	adds	r3, #2
 80033f4:	60bb      	str	r3, [r7, #8]
 80033f6:	e017      	b.n	8003428 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	3301      	adds	r3, #1
 80033fc:	60bb      	str	r3, [r7, #8]
 80033fe:	e013      	b.n	8003428 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	9300      	str	r3, [sp, #0]
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	2200      	movs	r2, #0
 8003408:	2180      	movs	r1, #128	; 0x80
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f000 f82d 	bl	800346a <UART_WaitOnFlagUntilTimeout>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e023      	b.n	8003462 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	1c5a      	adds	r2, r3, #1
 800341e:	60ba      	str	r2, [r7, #8]
 8003420:	781a      	ldrb	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800342c:	b29b      	uxth	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1b7      	bne.n	80033a2 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	2200      	movs	r2, #0
 800343a:	2140      	movs	r1, #64	; 0x40
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f000 f814 	bl	800346a <UART_WaitOnFlagUntilTimeout>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e00a      	b.n	8003462 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2220      	movs	r2, #32
 8003450:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800345c:	2300      	movs	r3, #0
 800345e:	e000      	b.n	8003462 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003460:	2302      	movs	r3, #2
  }
}
 8003462:	4618      	mov	r0, r3
 8003464:	3718      	adds	r7, #24
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b084      	sub	sp, #16
 800346e:	af00      	add	r7, sp, #0
 8003470:	60f8      	str	r0, [r7, #12]
 8003472:	60b9      	str	r1, [r7, #8]
 8003474:	603b      	str	r3, [r7, #0]
 8003476:	4613      	mov	r3, r2
 8003478:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800347a:	e02c      	b.n	80034d6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003482:	d028      	beq.n	80034d6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d007      	beq.n	800349a <UART_WaitOnFlagUntilTimeout+0x30>
 800348a:	f7fd fcf7 	bl	8000e7c <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	429a      	cmp	r2, r3
 8003498:	d21d      	bcs.n	80034d6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68da      	ldr	r2, [r3, #12]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80034a8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	695a      	ldr	r2, [r3, #20]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 0201 	bic.w	r2, r2, #1
 80034b8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2220      	movs	r2, #32
 80034be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2220      	movs	r2, #32
 80034c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e00f      	b.n	80034f6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	4013      	ands	r3, r2
 80034e0:	68ba      	ldr	r2, [r7, #8]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	bf0c      	ite	eq
 80034e6:	2301      	moveq	r3, #1
 80034e8:	2300      	movne	r3, #0
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	461a      	mov	r2, r3
 80034ee:	79fb      	ldrb	r3, [r7, #7]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d0c3      	beq.n	800347c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
	...

08003500 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003500:	b5b0      	push	{r4, r5, r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	68da      	ldr	r2, [r3, #12]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	430a      	orrs	r2, r1
 800351c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	689a      	ldr	r2, [r3, #8]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	431a      	orrs	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	695b      	ldr	r3, [r3, #20]
 800352c:	431a      	orrs	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	4313      	orrs	r3, r2
 8003534:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003540:	f023 030c 	bic.w	r3, r3, #12
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	6812      	ldr	r2, [r2, #0]
 8003548:	68f9      	ldr	r1, [r7, #12]
 800354a:	430b      	orrs	r3, r1
 800354c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	699a      	ldr	r2, [r3, #24]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	69db      	ldr	r3, [r3, #28]
 8003568:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800356c:	f040 80e4 	bne.w	8003738 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4aab      	ldr	r2, [pc, #684]	; (8003824 <UART_SetConfig+0x324>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d004      	beq.n	8003584 <UART_SetConfig+0x84>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4aaa      	ldr	r2, [pc, #680]	; (8003828 <UART_SetConfig+0x328>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d16c      	bne.n	800365e <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003584:	f7ff fc36 	bl	8002df4 <HAL_RCC_GetPCLK2Freq>
 8003588:	4602      	mov	r2, r0
 800358a:	4613      	mov	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4413      	add	r3, r2
 8003590:	009a      	lsls	r2, r3, #2
 8003592:	441a      	add	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	fbb2 f3f3 	udiv	r3, r2, r3
 800359e:	4aa3      	ldr	r2, [pc, #652]	; (800382c <UART_SetConfig+0x32c>)
 80035a0:	fba2 2303 	umull	r2, r3, r2, r3
 80035a4:	095b      	lsrs	r3, r3, #5
 80035a6:	011c      	lsls	r4, r3, #4
 80035a8:	f7ff fc24 	bl	8002df4 <HAL_RCC_GetPCLK2Freq>
 80035ac:	4602      	mov	r2, r0
 80035ae:	4613      	mov	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4413      	add	r3, r2
 80035b4:	009a      	lsls	r2, r3, #2
 80035b6:	441a      	add	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	fbb2 f5f3 	udiv	r5, r2, r3
 80035c2:	f7ff fc17 	bl	8002df4 <HAL_RCC_GetPCLK2Freq>
 80035c6:	4602      	mov	r2, r0
 80035c8:	4613      	mov	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	009a      	lsls	r2, r3, #2
 80035d0:	441a      	add	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035dc:	4a93      	ldr	r2, [pc, #588]	; (800382c <UART_SetConfig+0x32c>)
 80035de:	fba2 2303 	umull	r2, r3, r2, r3
 80035e2:	095b      	lsrs	r3, r3, #5
 80035e4:	2264      	movs	r2, #100	; 0x64
 80035e6:	fb02 f303 	mul.w	r3, r2, r3
 80035ea:	1aeb      	subs	r3, r5, r3
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	3332      	adds	r3, #50	; 0x32
 80035f0:	4a8e      	ldr	r2, [pc, #568]	; (800382c <UART_SetConfig+0x32c>)
 80035f2:	fba2 2303 	umull	r2, r3, r2, r3
 80035f6:	095b      	lsrs	r3, r3, #5
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80035fe:	441c      	add	r4, r3
 8003600:	f7ff fbf8 	bl	8002df4 <HAL_RCC_GetPCLK2Freq>
 8003604:	4602      	mov	r2, r0
 8003606:	4613      	mov	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	009a      	lsls	r2, r3, #2
 800360e:	441a      	add	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	fbb2 f5f3 	udiv	r5, r2, r3
 800361a:	f7ff fbeb 	bl	8002df4 <HAL_RCC_GetPCLK2Freq>
 800361e:	4602      	mov	r2, r0
 8003620:	4613      	mov	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	4413      	add	r3, r2
 8003626:	009a      	lsls	r2, r3, #2
 8003628:	441a      	add	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	fbb2 f3f3 	udiv	r3, r2, r3
 8003634:	4a7d      	ldr	r2, [pc, #500]	; (800382c <UART_SetConfig+0x32c>)
 8003636:	fba2 2303 	umull	r2, r3, r2, r3
 800363a:	095b      	lsrs	r3, r3, #5
 800363c:	2264      	movs	r2, #100	; 0x64
 800363e:	fb02 f303 	mul.w	r3, r2, r3
 8003642:	1aeb      	subs	r3, r5, r3
 8003644:	00db      	lsls	r3, r3, #3
 8003646:	3332      	adds	r3, #50	; 0x32
 8003648:	4a78      	ldr	r2, [pc, #480]	; (800382c <UART_SetConfig+0x32c>)
 800364a:	fba2 2303 	umull	r2, r3, r2, r3
 800364e:	095b      	lsrs	r3, r3, #5
 8003650:	f003 0207 	and.w	r2, r3, #7
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4422      	add	r2, r4
 800365a:	609a      	str	r2, [r3, #8]
 800365c:	e154      	b.n	8003908 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800365e:	f7ff fbb5 	bl	8002dcc <HAL_RCC_GetPCLK1Freq>
 8003662:	4602      	mov	r2, r0
 8003664:	4613      	mov	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4413      	add	r3, r2
 800366a:	009a      	lsls	r2, r3, #2
 800366c:	441a      	add	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	fbb2 f3f3 	udiv	r3, r2, r3
 8003678:	4a6c      	ldr	r2, [pc, #432]	; (800382c <UART_SetConfig+0x32c>)
 800367a:	fba2 2303 	umull	r2, r3, r2, r3
 800367e:	095b      	lsrs	r3, r3, #5
 8003680:	011c      	lsls	r4, r3, #4
 8003682:	f7ff fba3 	bl	8002dcc <HAL_RCC_GetPCLK1Freq>
 8003686:	4602      	mov	r2, r0
 8003688:	4613      	mov	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	4413      	add	r3, r2
 800368e:	009a      	lsls	r2, r3, #2
 8003690:	441a      	add	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	fbb2 f5f3 	udiv	r5, r2, r3
 800369c:	f7ff fb96 	bl	8002dcc <HAL_RCC_GetPCLK1Freq>
 80036a0:	4602      	mov	r2, r0
 80036a2:	4613      	mov	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	4413      	add	r3, r2
 80036a8:	009a      	lsls	r2, r3, #2
 80036aa:	441a      	add	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b6:	4a5d      	ldr	r2, [pc, #372]	; (800382c <UART_SetConfig+0x32c>)
 80036b8:	fba2 2303 	umull	r2, r3, r2, r3
 80036bc:	095b      	lsrs	r3, r3, #5
 80036be:	2264      	movs	r2, #100	; 0x64
 80036c0:	fb02 f303 	mul.w	r3, r2, r3
 80036c4:	1aeb      	subs	r3, r5, r3
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	3332      	adds	r3, #50	; 0x32
 80036ca:	4a58      	ldr	r2, [pc, #352]	; (800382c <UART_SetConfig+0x32c>)
 80036cc:	fba2 2303 	umull	r2, r3, r2, r3
 80036d0:	095b      	lsrs	r3, r3, #5
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80036d8:	441c      	add	r4, r3
 80036da:	f7ff fb77 	bl	8002dcc <HAL_RCC_GetPCLK1Freq>
 80036de:	4602      	mov	r2, r0
 80036e0:	4613      	mov	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	009a      	lsls	r2, r3, #2
 80036e8:	441a      	add	r2, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	fbb2 f5f3 	udiv	r5, r2, r3
 80036f4:	f7ff fb6a 	bl	8002dcc <HAL_RCC_GetPCLK1Freq>
 80036f8:	4602      	mov	r2, r0
 80036fa:	4613      	mov	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4413      	add	r3, r2
 8003700:	009a      	lsls	r2, r3, #2
 8003702:	441a      	add	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	fbb2 f3f3 	udiv	r3, r2, r3
 800370e:	4a47      	ldr	r2, [pc, #284]	; (800382c <UART_SetConfig+0x32c>)
 8003710:	fba2 2303 	umull	r2, r3, r2, r3
 8003714:	095b      	lsrs	r3, r3, #5
 8003716:	2264      	movs	r2, #100	; 0x64
 8003718:	fb02 f303 	mul.w	r3, r2, r3
 800371c:	1aeb      	subs	r3, r5, r3
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	3332      	adds	r3, #50	; 0x32
 8003722:	4a42      	ldr	r2, [pc, #264]	; (800382c <UART_SetConfig+0x32c>)
 8003724:	fba2 2303 	umull	r2, r3, r2, r3
 8003728:	095b      	lsrs	r3, r3, #5
 800372a:	f003 0207 	and.w	r2, r3, #7
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4422      	add	r2, r4
 8003734:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8003736:	e0e7      	b.n	8003908 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a39      	ldr	r2, [pc, #228]	; (8003824 <UART_SetConfig+0x324>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d004      	beq.n	800374c <UART_SetConfig+0x24c>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a38      	ldr	r2, [pc, #224]	; (8003828 <UART_SetConfig+0x328>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d171      	bne.n	8003830 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800374c:	f7ff fb52 	bl	8002df4 <HAL_RCC_GetPCLK2Freq>
 8003750:	4602      	mov	r2, r0
 8003752:	4613      	mov	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4413      	add	r3, r2
 8003758:	009a      	lsls	r2, r3, #2
 800375a:	441a      	add	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	fbb2 f3f3 	udiv	r3, r2, r3
 8003766:	4a31      	ldr	r2, [pc, #196]	; (800382c <UART_SetConfig+0x32c>)
 8003768:	fba2 2303 	umull	r2, r3, r2, r3
 800376c:	095b      	lsrs	r3, r3, #5
 800376e:	011c      	lsls	r4, r3, #4
 8003770:	f7ff fb40 	bl	8002df4 <HAL_RCC_GetPCLK2Freq>
 8003774:	4602      	mov	r2, r0
 8003776:	4613      	mov	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	4413      	add	r3, r2
 800377c:	009a      	lsls	r2, r3, #2
 800377e:	441a      	add	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	fbb2 f5f3 	udiv	r5, r2, r3
 800378a:	f7ff fb33 	bl	8002df4 <HAL_RCC_GetPCLK2Freq>
 800378e:	4602      	mov	r2, r0
 8003790:	4613      	mov	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	4413      	add	r3, r2
 8003796:	009a      	lsls	r2, r3, #2
 8003798:	441a      	add	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a4:	4a21      	ldr	r2, [pc, #132]	; (800382c <UART_SetConfig+0x32c>)
 80037a6:	fba2 2303 	umull	r2, r3, r2, r3
 80037aa:	095b      	lsrs	r3, r3, #5
 80037ac:	2264      	movs	r2, #100	; 0x64
 80037ae:	fb02 f303 	mul.w	r3, r2, r3
 80037b2:	1aeb      	subs	r3, r5, r3
 80037b4:	011b      	lsls	r3, r3, #4
 80037b6:	3332      	adds	r3, #50	; 0x32
 80037b8:	4a1c      	ldr	r2, [pc, #112]	; (800382c <UART_SetConfig+0x32c>)
 80037ba:	fba2 2303 	umull	r2, r3, r2, r3
 80037be:	095b      	lsrs	r3, r3, #5
 80037c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037c4:	441c      	add	r4, r3
 80037c6:	f7ff fb15 	bl	8002df4 <HAL_RCC_GetPCLK2Freq>
 80037ca:	4602      	mov	r2, r0
 80037cc:	4613      	mov	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	009a      	lsls	r2, r3, #2
 80037d4:	441a      	add	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	fbb2 f5f3 	udiv	r5, r2, r3
 80037e0:	f7ff fb08 	bl	8002df4 <HAL_RCC_GetPCLK2Freq>
 80037e4:	4602      	mov	r2, r0
 80037e6:	4613      	mov	r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4413      	add	r3, r2
 80037ec:	009a      	lsls	r2, r3, #2
 80037ee:	441a      	add	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037fa:	4a0c      	ldr	r2, [pc, #48]	; (800382c <UART_SetConfig+0x32c>)
 80037fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003800:	095b      	lsrs	r3, r3, #5
 8003802:	2264      	movs	r2, #100	; 0x64
 8003804:	fb02 f303 	mul.w	r3, r2, r3
 8003808:	1aeb      	subs	r3, r5, r3
 800380a:	011b      	lsls	r3, r3, #4
 800380c:	3332      	adds	r3, #50	; 0x32
 800380e:	4a07      	ldr	r2, [pc, #28]	; (800382c <UART_SetConfig+0x32c>)
 8003810:	fba2 2303 	umull	r2, r3, r2, r3
 8003814:	095b      	lsrs	r3, r3, #5
 8003816:	f003 020f 	and.w	r2, r3, #15
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4422      	add	r2, r4
 8003820:	609a      	str	r2, [r3, #8]
 8003822:	e071      	b.n	8003908 <UART_SetConfig+0x408>
 8003824:	40011000 	.word	0x40011000
 8003828:	40011400 	.word	0x40011400
 800382c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003830:	f7ff facc 	bl	8002dcc <HAL_RCC_GetPCLK1Freq>
 8003834:	4602      	mov	r2, r0
 8003836:	4613      	mov	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	4413      	add	r3, r2
 800383c:	009a      	lsls	r2, r3, #2
 800383e:	441a      	add	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	fbb2 f3f3 	udiv	r3, r2, r3
 800384a:	4a31      	ldr	r2, [pc, #196]	; (8003910 <UART_SetConfig+0x410>)
 800384c:	fba2 2303 	umull	r2, r3, r2, r3
 8003850:	095b      	lsrs	r3, r3, #5
 8003852:	011c      	lsls	r4, r3, #4
 8003854:	f7ff faba 	bl	8002dcc <HAL_RCC_GetPCLK1Freq>
 8003858:	4602      	mov	r2, r0
 800385a:	4613      	mov	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	4413      	add	r3, r2
 8003860:	009a      	lsls	r2, r3, #2
 8003862:	441a      	add	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	fbb2 f5f3 	udiv	r5, r2, r3
 800386e:	f7ff faad 	bl	8002dcc <HAL_RCC_GetPCLK1Freq>
 8003872:	4602      	mov	r2, r0
 8003874:	4613      	mov	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4413      	add	r3, r2
 800387a:	009a      	lsls	r2, r3, #2
 800387c:	441a      	add	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	fbb2 f3f3 	udiv	r3, r2, r3
 8003888:	4a21      	ldr	r2, [pc, #132]	; (8003910 <UART_SetConfig+0x410>)
 800388a:	fba2 2303 	umull	r2, r3, r2, r3
 800388e:	095b      	lsrs	r3, r3, #5
 8003890:	2264      	movs	r2, #100	; 0x64
 8003892:	fb02 f303 	mul.w	r3, r2, r3
 8003896:	1aeb      	subs	r3, r5, r3
 8003898:	011b      	lsls	r3, r3, #4
 800389a:	3332      	adds	r3, #50	; 0x32
 800389c:	4a1c      	ldr	r2, [pc, #112]	; (8003910 <UART_SetConfig+0x410>)
 800389e:	fba2 2303 	umull	r2, r3, r2, r3
 80038a2:	095b      	lsrs	r3, r3, #5
 80038a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038a8:	441c      	add	r4, r3
 80038aa:	f7ff fa8f 	bl	8002dcc <HAL_RCC_GetPCLK1Freq>
 80038ae:	4602      	mov	r2, r0
 80038b0:	4613      	mov	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4413      	add	r3, r2
 80038b6:	009a      	lsls	r2, r3, #2
 80038b8:	441a      	add	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	fbb2 f5f3 	udiv	r5, r2, r3
 80038c4:	f7ff fa82 	bl	8002dcc <HAL_RCC_GetPCLK1Freq>
 80038c8:	4602      	mov	r2, r0
 80038ca:	4613      	mov	r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	4413      	add	r3, r2
 80038d0:	009a      	lsls	r2, r3, #2
 80038d2:	441a      	add	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	fbb2 f3f3 	udiv	r3, r2, r3
 80038de:	4a0c      	ldr	r2, [pc, #48]	; (8003910 <UART_SetConfig+0x410>)
 80038e0:	fba2 2303 	umull	r2, r3, r2, r3
 80038e4:	095b      	lsrs	r3, r3, #5
 80038e6:	2264      	movs	r2, #100	; 0x64
 80038e8:	fb02 f303 	mul.w	r3, r2, r3
 80038ec:	1aeb      	subs	r3, r5, r3
 80038ee:	011b      	lsls	r3, r3, #4
 80038f0:	3332      	adds	r3, #50	; 0x32
 80038f2:	4a07      	ldr	r2, [pc, #28]	; (8003910 <UART_SetConfig+0x410>)
 80038f4:	fba2 2303 	umull	r2, r3, r2, r3
 80038f8:	095b      	lsrs	r3, r3, #5
 80038fa:	f003 020f 	and.w	r2, r3, #15
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4422      	add	r2, r4
 8003904:	609a      	str	r2, [r3, #8]
}
 8003906:	e7ff      	b.n	8003908 <UART_SetConfig+0x408>
 8003908:	bf00      	nop
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bdb0      	pop	{r4, r5, r7, pc}
 8003910:	51eb851f 	.word	0x51eb851f

08003914 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b08a      	sub	sp, #40	; 0x28
 8003918:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800391a:	f107 0314 	add.w	r3, r7, #20
 800391e:	2200      	movs	r2, #0
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	605a      	str	r2, [r3, #4]
 8003924:	609a      	str	r2, [r3, #8]
 8003926:	60da      	str	r2, [r3, #12]
 8003928:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800392a:	2300      	movs	r3, #0
 800392c:	613b      	str	r3, [r7, #16]
 800392e:	4b41      	ldr	r3, [pc, #260]	; (8003a34 <MX_GPIO_Init+0x120>)
 8003930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003932:	4a40      	ldr	r2, [pc, #256]	; (8003a34 <MX_GPIO_Init+0x120>)
 8003934:	f043 0304 	orr.w	r3, r3, #4
 8003938:	6313      	str	r3, [r2, #48]	; 0x30
 800393a:	4b3e      	ldr	r3, [pc, #248]	; (8003a34 <MX_GPIO_Init+0x120>)
 800393c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393e:	f003 0304 	and.w	r3, r3, #4
 8003942:	613b      	str	r3, [r7, #16]
 8003944:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003946:	2300      	movs	r3, #0
 8003948:	60fb      	str	r3, [r7, #12]
 800394a:	4b3a      	ldr	r3, [pc, #232]	; (8003a34 <MX_GPIO_Init+0x120>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394e:	4a39      	ldr	r2, [pc, #228]	; (8003a34 <MX_GPIO_Init+0x120>)
 8003950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003954:	6313      	str	r3, [r2, #48]	; 0x30
 8003956:	4b37      	ldr	r3, [pc, #220]	; (8003a34 <MX_GPIO_Init+0x120>)
 8003958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003962:	2300      	movs	r3, #0
 8003964:	60bb      	str	r3, [r7, #8]
 8003966:	4b33      	ldr	r3, [pc, #204]	; (8003a34 <MX_GPIO_Init+0x120>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396a:	4a32      	ldr	r2, [pc, #200]	; (8003a34 <MX_GPIO_Init+0x120>)
 800396c:	f043 0301 	orr.w	r3, r3, #1
 8003970:	6313      	str	r3, [r2, #48]	; 0x30
 8003972:	4b30      	ldr	r3, [pc, #192]	; (8003a34 <MX_GPIO_Init+0x120>)
 8003974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	60bb      	str	r3, [r7, #8]
 800397c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800397e:	2300      	movs	r3, #0
 8003980:	607b      	str	r3, [r7, #4]
 8003982:	4b2c      	ldr	r3, [pc, #176]	; (8003a34 <MX_GPIO_Init+0x120>)
 8003984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003986:	4a2b      	ldr	r2, [pc, #172]	; (8003a34 <MX_GPIO_Init+0x120>)
 8003988:	f043 0302 	orr.w	r3, r3, #2
 800398c:	6313      	str	r3, [r2, #48]	; 0x30
 800398e:	4b29      	ldr	r3, [pc, #164]	; (8003a34 <MX_GPIO_Init+0x120>)
 8003990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	607b      	str	r3, [r7, #4]
 8003998:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800399a:	2200      	movs	r2, #0
 800399c:	2120      	movs	r1, #32
 800399e:	4826      	ldr	r0, [pc, #152]	; (8003a38 <MX_GPIO_Init+0x124>)
 80039a0:	f7fd fd2e 	bl	8001400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MPU6050_AD0_Pin|Red_LED_Pin|Green_LED_Pin, GPIO_PIN_RESET);
 80039a4:	2200      	movs	r2, #0
 80039a6:	2132      	movs	r1, #50	; 0x32
 80039a8:	4824      	ldr	r0, [pc, #144]	; (8003a3c <MX_GPIO_Init+0x128>)
 80039aa:	f7fd fd29 	bl	8001400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80039ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80039b4:	4b22      	ldr	r3, [pc, #136]	; (8003a40 <MX_GPIO_Init+0x12c>)
 80039b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b8:	2300      	movs	r3, #0
 80039ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80039bc:	f107 0314 	add.w	r3, r7, #20
 80039c0:	4619      	mov	r1, r3
 80039c2:	4820      	ldr	r0, [pc, #128]	; (8003a44 <MX_GPIO_Init+0x130>)
 80039c4:	f7fd fb9a 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80039c8:	2320      	movs	r3, #32
 80039ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039cc:	2301      	movs	r3, #1
 80039ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d0:	2300      	movs	r3, #0
 80039d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039d4:	2300      	movs	r3, #0
 80039d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80039d8:	f107 0314 	add.w	r3, r7, #20
 80039dc:	4619      	mov	r1, r3
 80039de:	4816      	ldr	r0, [pc, #88]	; (8003a38 <MX_GPIO_Init+0x124>)
 80039e0:	f7fd fb8c 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MPU6050_AD0_Pin|Red_LED_Pin|Green_LED_Pin;
 80039e4:	2332      	movs	r3, #50	; 0x32
 80039e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039e8:	2301      	movs	r3, #1
 80039ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ec:	2300      	movs	r3, #0
 80039ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039f0:	2300      	movs	r3, #0
 80039f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039f4:	f107 0314 	add.w	r3, r7, #20
 80039f8:	4619      	mov	r1, r3
 80039fa:	4810      	ldr	r0, [pc, #64]	; (8003a3c <MX_GPIO_Init+0x128>)
 80039fc:	f7fd fb7e 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = calibration_button_Pin|turbo_button_Pin;
 8003a00:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a06:	4b10      	ldr	r3, [pc, #64]	; (8003a48 <MX_GPIO_Init+0x134>)
 8003a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a0e:	f107 0314 	add.w	r3, r7, #20
 8003a12:	4619      	mov	r1, r3
 8003a14:	4808      	ldr	r0, [pc, #32]	; (8003a38 <MX_GPIO_Init+0x124>)
 8003a16:	f7fd fb71 	bl	80010fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	2017      	movs	r0, #23
 8003a20:	f7fd fb35 	bl	800108e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003a24:	2017      	movs	r0, #23
 8003a26:	f7fd fb4e 	bl	80010c6 <HAL_NVIC_EnableIRQ>

}
 8003a2a:	bf00      	nop
 8003a2c:	3728      	adds	r7, #40	; 0x28
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	40023800 	.word	0x40023800
 8003a38:	40020000 	.word	0x40020000
 8003a3c:	40020400 	.word	0x40020400
 8003a40:	10210000 	.word	0x10210000
 8003a44:	40020800 	.word	0x40020800
 8003a48:	10110000 	.word	0x10110000

08003a4c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8003a50:	4b12      	ldr	r3, [pc, #72]	; (8003a9c <MX_I2C2_Init+0x50>)
 8003a52:	4a13      	ldr	r2, [pc, #76]	; (8003aa0 <MX_I2C2_Init+0x54>)
 8003a54:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8003a56:	4b11      	ldr	r3, [pc, #68]	; (8003a9c <MX_I2C2_Init+0x50>)
 8003a58:	4a12      	ldr	r2, [pc, #72]	; (8003aa4 <MX_I2C2_Init+0x58>)
 8003a5a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003a5c:	4b0f      	ldr	r3, [pc, #60]	; (8003a9c <MX_I2C2_Init+0x50>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003a62:	4b0e      	ldr	r3, [pc, #56]	; (8003a9c <MX_I2C2_Init+0x50>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a68:	4b0c      	ldr	r3, [pc, #48]	; (8003a9c <MX_I2C2_Init+0x50>)
 8003a6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003a6e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a70:	4b0a      	ldr	r3, [pc, #40]	; (8003a9c <MX_I2C2_Init+0x50>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003a76:	4b09      	ldr	r3, [pc, #36]	; (8003a9c <MX_I2C2_Init+0x50>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a7c:	4b07      	ldr	r3, [pc, #28]	; (8003a9c <MX_I2C2_Init+0x50>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a82:	4b06      	ldr	r3, [pc, #24]	; (8003a9c <MX_I2C2_Init+0x50>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003a88:	4804      	ldr	r0, [pc, #16]	; (8003a9c <MX_I2C2_Init+0x50>)
 8003a8a:	f7fd fd05 	bl	8001498 <HAL_I2C_Init>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d001      	beq.n	8003a98 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003a94:	f000 fc38 	bl	8004308 <Error_Handler>
  }

}
 8003a98:	bf00      	nop
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	20000110 	.word	0x20000110
 8003aa0:	40005800 	.word	0x40005800
 8003aa4:	00061a80 	.word	0x00061a80

08003aa8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b08a      	sub	sp, #40	; 0x28
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ab0:	f107 0314 	add.w	r3, r7, #20
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]
 8003ab8:	605a      	str	r2, [r3, #4]
 8003aba:	609a      	str	r2, [r3, #8]
 8003abc:	60da      	str	r2, [r3, #12]
 8003abe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a22      	ldr	r2, [pc, #136]	; (8003b50 <HAL_I2C_MspInit+0xa8>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d13d      	bne.n	8003b46 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aca:	2300      	movs	r3, #0
 8003acc:	613b      	str	r3, [r7, #16]
 8003ace:	4b21      	ldr	r3, [pc, #132]	; (8003b54 <HAL_I2C_MspInit+0xac>)
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad2:	4a20      	ldr	r2, [pc, #128]	; (8003b54 <HAL_I2C_MspInit+0xac>)
 8003ad4:	f043 0302 	orr.w	r3, r3, #2
 8003ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8003ada:	4b1e      	ldr	r3, [pc, #120]	; (8003b54 <HAL_I2C_MspInit+0xac>)
 8003adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	613b      	str	r3, [r7, #16]
 8003ae4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003ae6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003aec:	2312      	movs	r3, #18
 8003aee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003af0:	2301      	movs	r3, #1
 8003af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003af4:	2303      	movs	r3, #3
 8003af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003af8:	2304      	movs	r3, #4
 8003afa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003afc:	f107 0314 	add.w	r3, r7, #20
 8003b00:	4619      	mov	r1, r3
 8003b02:	4815      	ldr	r0, [pc, #84]	; (8003b58 <HAL_I2C_MspInit+0xb0>)
 8003b04:	f7fd fafa 	bl	80010fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003b08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b0e:	2312      	movs	r3, #18
 8003b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b12:	2301      	movs	r3, #1
 8003b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b16:	2303      	movs	r3, #3
 8003b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8003b1a:	2309      	movs	r3, #9
 8003b1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b1e:	f107 0314 	add.w	r3, r7, #20
 8003b22:	4619      	mov	r1, r3
 8003b24:	480c      	ldr	r0, [pc, #48]	; (8003b58 <HAL_I2C_MspInit+0xb0>)
 8003b26:	f7fd fae9 	bl	80010fc <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	60fb      	str	r3, [r7, #12]
 8003b2e:	4b09      	ldr	r3, [pc, #36]	; (8003b54 <HAL_I2C_MspInit+0xac>)
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	4a08      	ldr	r2, [pc, #32]	; (8003b54 <HAL_I2C_MspInit+0xac>)
 8003b34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b38:	6413      	str	r3, [r2, #64]	; 0x40
 8003b3a:	4b06      	ldr	r3, [pc, #24]	; (8003b54 <HAL_I2C_MspInit+0xac>)
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b42:	60fb      	str	r3, [r7, #12]
 8003b44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8003b46:	bf00      	nop
 8003b48:	3728      	adds	r7, #40	; 0x28
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	40005800 	.word	0x40005800
 8003b54:	40023800 	.word	0x40023800
 8003b58:	40020400 	.word	0x40020400
 8003b5c:	00000000 	.word	0x00000000

08003b60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003b60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003b64:	b08c      	sub	sp, #48	; 0x30
 8003b66:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  SD_MPU6050_Result result;
  uint8_t mpu_ok[16] = {"MPU WORK FINE\r\n"};
 8003b68:	4b28      	ldr	r3, [pc, #160]	; (8003c0c <main+0xac>)
 8003b6a:	f107 0414 	add.w	r4, r7, #20
 8003b6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint8_t mpu_not[18] = {"MPU NOT WORKING\r\n"};
 8003b74:	4b26      	ldr	r3, [pc, #152]	; (8003c10 <main+0xb0>)
 8003b76:	463c      	mov	r4, r7
 8003b78:	461d      	mov	r5, r3
 8003b7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b7e:	682b      	ldr	r3, [r5, #0]
 8003b80:	8023      	strh	r3, [r4, #0]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003b82:	f7fd f915 	bl	8000db0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003b86:	f000 fb37 	bl	80041f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003b8a:	f7ff fec3 	bl	8003914 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003b8e:	f000 fee7 	bl	8004960 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8003b92:	f000 fe77 	bl	8004884 <MX_TIM2_Init>
  MX_I2C2_Init();
 8003b96:	f7ff ff59 	bl	8003a4c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  // turn on mpu6050 sensor
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	2102      	movs	r1, #2
 8003b9e:	481d      	ldr	r0, [pc, #116]	; (8003c14 <main+0xb4>)
 8003ba0:	f7fd fc2e 	bl	8001400 <HAL_GPIO_WritePin>
  
  HAL_TIM_Base_Init(&htim2);
 8003ba4:	481c      	ldr	r0, [pc, #112]	; (8003c18 <main+0xb8>)
 8003ba6:	f7ff f939 	bl	8002e1c <HAL_TIM_Base_Init>
  {
    
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    switch (state)
 8003baa:	4b1c      	ldr	r3, [pc, #112]	; (8003c1c <main+0xbc>)
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b03      	cmp	r3, #3
 8003bb2:	f200 82f1 	bhi.w	8004198 <main+0x638>
 8003bb6:	a201      	add	r2, pc, #4	; (adr r2, 8003bbc <main+0x5c>)
 8003bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bbc:	08003bcd 	.word	0x08003bcd
 8003bc0:	08003c2d 	.word	0x08003c2d
 8003bc4:	0800401f 	.word	0x0800401f
 8003bc8:	08004199 	.word	0x08004199
    {
    case STATE_IDLE:
      result = SD_MPU6050_Init(&hi2c2,&mpu1,SD_MPU6050_Device_0,SD_MPU6050_Accelerometer_2G,SD_MPU6050_Gyroscope_500s );
 8003bcc:	2301      	movs	r3, #1
 8003bce:	9300      	str	r3, [sp, #0]
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	4912      	ldr	r1, [pc, #72]	; (8003c20 <main+0xc0>)
 8003bd6:	4813      	ldr	r0, [pc, #76]	; (8003c24 <main+0xc4>)
 8003bd8:	f000 fb9d 	bl	8004316 <SD_MPU6050_Init>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      HAL_Delay(10);
 8003be2:	200a      	movs	r0, #10
 8003be4:	f7fd f956 	bl	8000e94 <HAL_Delay>

      // check if MPU6050 is active
      if (result == SD_MPU6050_Result_Ok)
 8003be8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f040 82d5 	bne.w	800419c <main+0x63c>
      {
        HAL_UART_Transmit(&huart2, mpu_ok, 16, HAL_MAX_DELAY);
 8003bf2:	f107 0114 	add.w	r1, r7, #20
 8003bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8003bfa:	2210      	movs	r2, #16
 8003bfc:	480a      	ldr	r0, [pc, #40]	; (8003c28 <main+0xc8>)
 8003bfe:	f7ff fb9b 	bl	8003338 <HAL_UART_Transmit>
        state = STATE_OPERATE;
 8003c02:	4b06      	ldr	r3, [pc, #24]	; (8003c1c <main+0xbc>)
 8003c04:	2201      	movs	r2, #1
 8003c06:	701a      	strb	r2, [r3, #0]
      }
      break;
 8003c08:	e2c8      	b.n	800419c <main+0x63c>
 8003c0a:	bf00      	nop
 8003c0c:	08005088 	.word	0x08005088
 8003c10:	08005098 	.word	0x08005098
 8003c14:	40020400 	.word	0x40020400
 8003c18:	20000180 	.word	0x20000180
 8003c1c:	20000094 	.word	0x20000094
 8003c20:	20000164 	.word	0x20000164
 8003c24:	20000110 	.word	0x20000110
 8003c28:	200001c0 	.word	0x200001c0

    case STATE_OPERATE:
      // read accelero values
      SD_MPU6050_ReadAccelerometer(&hi2c2, &mpu1);
 8003c2c:	49ba      	ldr	r1, [pc, #744]	; (8003f18 <main+0x3b8>)
 8003c2e:	48bb      	ldr	r0, [pc, #748]	; (8003f1c <main+0x3bc>)
 8003c30:	f000 fcee 	bl	8004610 <SD_MPU6050_ReadAccelerometer>
      a_x = mpu1.Accelerometer_X + offset_a_x;
 8003c34:	4bb8      	ldr	r3, [pc, #736]	; (8003f18 <main+0x3b8>)
 8003c36:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	4bb8      	ldr	r3, [pc, #736]	; (8003f20 <main+0x3c0>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	4413      	add	r3, r2
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	b21a      	sxth	r2, r3
 8003c48:	4bb6      	ldr	r3, [pc, #728]	; (8003f24 <main+0x3c4>)
 8003c4a:	801a      	strh	r2, [r3, #0]
      a_y = mpu1.Accelerometer_Y + offset_a_y;
 8003c4c:	4bb2      	ldr	r3, [pc, #712]	; (8003f18 <main+0x3b8>)
 8003c4e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	4bb4      	ldr	r3, [pc, #720]	; (8003f28 <main+0x3c8>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	4413      	add	r3, r2
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	b21a      	sxth	r2, r3
 8003c60:	4bb2      	ldr	r3, [pc, #712]	; (8003f2c <main+0x3cc>)
 8003c62:	801a      	strh	r2, [r3, #0]
      a_z = mpu1.Accelerometer_Z + offset_a_z;
 8003c64:	4bac      	ldr	r3, [pc, #688]	; (8003f18 <main+0x3b8>)
 8003c66:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	4bb0      	ldr	r3, [pc, #704]	; (8003f30 <main+0x3d0>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	4413      	add	r3, r2
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	b21a      	sxth	r2, r3
 8003c78:	4bae      	ldr	r3, [pc, #696]	; (8003f34 <main+0x3d4>)
 8003c7a:	801a      	strh	r2, [r3, #0]

      // read gyro values
      SD_MPU6050_ReadGyroscope(&hi2c2, &mpu1);
 8003c7c:	49a6      	ldr	r1, [pc, #664]	; (8003f18 <main+0x3b8>)
 8003c7e:	48a7      	ldr	r0, [pc, #668]	; (8003f1c <main+0x3bc>)
 8003c80:	f000 fd10 	bl	80046a4 <SD_MPU6050_ReadGyroscope>
      g_x = mpu1.Gyroscope_X + offset_g_x;
 8003c84:	4ba4      	ldr	r3, [pc, #656]	; (8003f18 <main+0x3b8>)
 8003c86:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	4baa      	ldr	r3, [pc, #680]	; (8003f38 <main+0x3d8>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	4413      	add	r3, r2
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	b21a      	sxth	r2, r3
 8003c98:	4ba8      	ldr	r3, [pc, #672]	; (8003f3c <main+0x3dc>)
 8003c9a:	801a      	strh	r2, [r3, #0]
      g_y = mpu1.Gyroscope_Y + offset_g_y;
 8003c9c:	4b9e      	ldr	r3, [pc, #632]	; (8003f18 <main+0x3b8>)
 8003c9e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003ca2:	b29a      	uxth	r2, r3
 8003ca4:	4ba6      	ldr	r3, [pc, #664]	; (8003f40 <main+0x3e0>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	4413      	add	r3, r2
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	b21a      	sxth	r2, r3
 8003cb0:	4ba4      	ldr	r3, [pc, #656]	; (8003f44 <main+0x3e4>)
 8003cb2:	801a      	strh	r2, [r3, #0]
      g_z = mpu1.Gyroscope_Z + offset_g_z;
 8003cb4:	4b98      	ldr	r3, [pc, #608]	; (8003f18 <main+0x3b8>)
 8003cb6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	4ba2      	ldr	r3, [pc, #648]	; (8003f48 <main+0x3e8>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	4413      	add	r3, r2
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	b21a      	sxth	r2, r3
 8003cc8:	4ba0      	ldr	r3, [pc, #640]	; (8003f4c <main+0x3ec>)
 8003cca:	801a      	strh	r2, [r3, #0]

      // correct accelero values
      cor_a_x = (double) a_x * mpu1.Acce_Mult;
 8003ccc:	4b95      	ldr	r3, [pc, #596]	; (8003f24 <main+0x3c4>)
 8003cce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7fc fbd2 	bl	800047c <__aeabi_i2d>
 8003cd8:	4604      	mov	r4, r0
 8003cda:	460d      	mov	r5, r1
 8003cdc:	4b8e      	ldr	r3, [pc, #568]	; (8003f18 <main+0x3b8>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7fc fbdd 	bl	80004a0 <__aeabi_f2d>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	460b      	mov	r3, r1
 8003cea:	4620      	mov	r0, r4
 8003cec:	4629      	mov	r1, r5
 8003cee:	f7fc fc2f 	bl	8000550 <__aeabi_dmul>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	460c      	mov	r4, r1
 8003cf6:	4a96      	ldr	r2, [pc, #600]	; (8003f50 <main+0x3f0>)
 8003cf8:	e9c2 3400 	strd	r3, r4, [r2]
      cor_a_y = (double) a_y * mpu1.Acce_Mult;
 8003cfc:	4b8b      	ldr	r3, [pc, #556]	; (8003f2c <main+0x3cc>)
 8003cfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fc fbba 	bl	800047c <__aeabi_i2d>
 8003d08:	4604      	mov	r4, r0
 8003d0a:	460d      	mov	r5, r1
 8003d0c:	4b82      	ldr	r3, [pc, #520]	; (8003f18 <main+0x3b8>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7fc fbc5 	bl	80004a0 <__aeabi_f2d>
 8003d16:	4602      	mov	r2, r0
 8003d18:	460b      	mov	r3, r1
 8003d1a:	4620      	mov	r0, r4
 8003d1c:	4629      	mov	r1, r5
 8003d1e:	f7fc fc17 	bl	8000550 <__aeabi_dmul>
 8003d22:	4603      	mov	r3, r0
 8003d24:	460c      	mov	r4, r1
 8003d26:	4a8b      	ldr	r2, [pc, #556]	; (8003f54 <main+0x3f4>)
 8003d28:	e9c2 3400 	strd	r3, r4, [r2]
      cor_a_z = (double) a_z * mpu1.Acce_Mult;
 8003d2c:	4b81      	ldr	r3, [pc, #516]	; (8003f34 <main+0x3d4>)
 8003d2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7fc fba2 	bl	800047c <__aeabi_i2d>
 8003d38:	4604      	mov	r4, r0
 8003d3a:	460d      	mov	r5, r1
 8003d3c:	4b76      	ldr	r3, [pc, #472]	; (8003f18 <main+0x3b8>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7fc fbad 	bl	80004a0 <__aeabi_f2d>
 8003d46:	4602      	mov	r2, r0
 8003d48:	460b      	mov	r3, r1
 8003d4a:	4620      	mov	r0, r4
 8003d4c:	4629      	mov	r1, r5
 8003d4e:	f7fc fbff 	bl	8000550 <__aeabi_dmul>
 8003d52:	4603      	mov	r3, r0
 8003d54:	460c      	mov	r4, r1
 8003d56:	4a80      	ldr	r2, [pc, #512]	; (8003f58 <main+0x3f8>)
 8003d58:	e9c2 3400 	strd	r3, r4, [r2]

      // correct gyro values
      cor_g_x = (double) g_x * mpu1.Gyro_Mult;
 8003d5c:	4b77      	ldr	r3, [pc, #476]	; (8003f3c <main+0x3dc>)
 8003d5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7fc fb8a 	bl	800047c <__aeabi_i2d>
 8003d68:	4604      	mov	r4, r0
 8003d6a:	460d      	mov	r5, r1
 8003d6c:	4b6a      	ldr	r3, [pc, #424]	; (8003f18 <main+0x3b8>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7fc fb95 	bl	80004a0 <__aeabi_f2d>
 8003d76:	4602      	mov	r2, r0
 8003d78:	460b      	mov	r3, r1
 8003d7a:	4620      	mov	r0, r4
 8003d7c:	4629      	mov	r1, r5
 8003d7e:	f7fc fbe7 	bl	8000550 <__aeabi_dmul>
 8003d82:	4603      	mov	r3, r0
 8003d84:	460c      	mov	r4, r1
 8003d86:	4a75      	ldr	r2, [pc, #468]	; (8003f5c <main+0x3fc>)
 8003d88:	e9c2 3400 	strd	r3, r4, [r2]
      cor_g_y = (double) g_y * mpu1.Gyro_Mult;
 8003d8c:	4b6d      	ldr	r3, [pc, #436]	; (8003f44 <main+0x3e4>)
 8003d8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7fc fb72 	bl	800047c <__aeabi_i2d>
 8003d98:	4604      	mov	r4, r0
 8003d9a:	460d      	mov	r5, r1
 8003d9c:	4b5e      	ldr	r3, [pc, #376]	; (8003f18 <main+0x3b8>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7fc fb7d 	bl	80004a0 <__aeabi_f2d>
 8003da6:	4602      	mov	r2, r0
 8003da8:	460b      	mov	r3, r1
 8003daa:	4620      	mov	r0, r4
 8003dac:	4629      	mov	r1, r5
 8003dae:	f7fc fbcf 	bl	8000550 <__aeabi_dmul>
 8003db2:	4603      	mov	r3, r0
 8003db4:	460c      	mov	r4, r1
 8003db6:	4a6a      	ldr	r2, [pc, #424]	; (8003f60 <main+0x400>)
 8003db8:	e9c2 3400 	strd	r3, r4, [r2]
      cor_g_z = (double) g_z * mpu1.Gyro_Mult;
 8003dbc:	4b63      	ldr	r3, [pc, #396]	; (8003f4c <main+0x3ec>)
 8003dbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fc fb5a 	bl	800047c <__aeabi_i2d>
 8003dc8:	4604      	mov	r4, r0
 8003dca:	460d      	mov	r5, r1
 8003dcc:	4b52      	ldr	r3, [pc, #328]	; (8003f18 <main+0x3b8>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7fc fb65 	bl	80004a0 <__aeabi_f2d>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	460b      	mov	r3, r1
 8003dda:	4620      	mov	r0, r4
 8003ddc:	4629      	mov	r1, r5
 8003dde:	f7fc fbb7 	bl	8000550 <__aeabi_dmul>
 8003de2:	4603      	mov	r3, r0
 8003de4:	460c      	mov	r4, r1
 8003de6:	4a5f      	ldr	r2, [pc, #380]	; (8003f64 <main+0x404>)
 8003de8:	e9c2 3400 	strd	r3, r4, [r2]

      // roll, pitch, yaw calculation
      roll = 180 * atan(cor_g_x / sqrt(cor_g_x * cor_g_x + cor_g_z + cor_g_z)) / M_PI; 
 8003dec:	4b5b      	ldr	r3, [pc, #364]	; (8003f5c <main+0x3fc>)
 8003dee:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003df2:	4b5a      	ldr	r3, [pc, #360]	; (8003f5c <main+0x3fc>)
 8003df4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003df8:	4b58      	ldr	r3, [pc, #352]	; (8003f5c <main+0x3fc>)
 8003dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfe:	f7fc fba7 	bl	8000550 <__aeabi_dmul>
 8003e02:	4602      	mov	r2, r0
 8003e04:	460b      	mov	r3, r1
 8003e06:	4610      	mov	r0, r2
 8003e08:	4619      	mov	r1, r3
 8003e0a:	4b56      	ldr	r3, [pc, #344]	; (8003f64 <main+0x404>)
 8003e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e10:	f7fc f9e8 	bl	80001e4 <__adddf3>
 8003e14:	4602      	mov	r2, r0
 8003e16:	460b      	mov	r3, r1
 8003e18:	4610      	mov	r0, r2
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	4b51      	ldr	r3, [pc, #324]	; (8003f64 <main+0x404>)
 8003e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e22:	f7fc f9df 	bl	80001e4 <__adddf3>
 8003e26:	4602      	mov	r2, r0
 8003e28:	460b      	mov	r3, r1
 8003e2a:	ec43 2b17 	vmov	d7, r2, r3
 8003e2e:	eeb0 0a47 	vmov.f32	s0, s14
 8003e32:	eef0 0a67 	vmov.f32	s1, s15
 8003e36:	f001 f80d 	bl	8004e54 <sqrt>
 8003e3a:	ec53 2b10 	vmov	r2, r3, d0
 8003e3e:	4620      	mov	r0, r4
 8003e40:	4629      	mov	r1, r5
 8003e42:	f7fc fcaf 	bl	80007a4 <__aeabi_ddiv>
 8003e46:	4603      	mov	r3, r0
 8003e48:	460c      	mov	r4, r1
 8003e4a:	ec44 3b17 	vmov	d7, r3, r4
 8003e4e:	eeb0 0a47 	vmov.f32	s0, s14
 8003e52:	eef0 0a67 	vmov.f32	s1, s15
 8003e56:	f000 fe53 	bl	8004b00 <atan>
 8003e5a:	ec51 0b10 	vmov	r0, r1, d0
 8003e5e:	f04f 0200 	mov.w	r2, #0
 8003e62:	4b41      	ldr	r3, [pc, #260]	; (8003f68 <main+0x408>)
 8003e64:	f7fc fb74 	bl	8000550 <__aeabi_dmul>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	460c      	mov	r4, r1
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	4621      	mov	r1, r4
 8003e70:	a327      	add	r3, pc, #156	; (adr r3, 8003f10 <main+0x3b0>)
 8003e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e76:	f7fc fc95 	bl	80007a4 <__aeabi_ddiv>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	460c      	mov	r4, r1
 8003e7e:	4a3b      	ldr	r2, [pc, #236]	; (8003f6c <main+0x40c>)
 8003e80:	e9c2 3400 	strd	r3, r4, [r2]
      pitch = 180 * atan(cor_g_x / sqrt(cor_g_y * cor_g_y + cor_g_z * cor_g_z)) / M_PI;
 8003e84:	4b35      	ldr	r3, [pc, #212]	; (8003f5c <main+0x3fc>)
 8003e86:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003e8a:	4b35      	ldr	r3, [pc, #212]	; (8003f60 <main+0x400>)
 8003e8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e90:	4b33      	ldr	r3, [pc, #204]	; (8003f60 <main+0x400>)
 8003e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e96:	f7fc fb5b 	bl	8000550 <__aeabi_dmul>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	4690      	mov	r8, r2
 8003ea0:	4699      	mov	r9, r3
 8003ea2:	4b30      	ldr	r3, [pc, #192]	; (8003f64 <main+0x404>)
 8003ea4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ea8:	4b2e      	ldr	r3, [pc, #184]	; (8003f64 <main+0x404>)
 8003eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eae:	f7fc fb4f 	bl	8000550 <__aeabi_dmul>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	4640      	mov	r0, r8
 8003eb8:	4649      	mov	r1, r9
 8003eba:	f7fc f993 	bl	80001e4 <__adddf3>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	ec43 2b17 	vmov	d7, r2, r3
 8003ec6:	eeb0 0a47 	vmov.f32	s0, s14
 8003eca:	eef0 0a67 	vmov.f32	s1, s15
 8003ece:	f000 ffc1 	bl	8004e54 <sqrt>
 8003ed2:	ec53 2b10 	vmov	r2, r3, d0
 8003ed6:	4620      	mov	r0, r4
 8003ed8:	4629      	mov	r1, r5
 8003eda:	f7fc fc63 	bl	80007a4 <__aeabi_ddiv>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	460c      	mov	r4, r1
 8003ee2:	ec44 3b17 	vmov	d7, r3, r4
 8003ee6:	eeb0 0a47 	vmov.f32	s0, s14
 8003eea:	eef0 0a67 	vmov.f32	s1, s15
 8003eee:	f000 fe07 	bl	8004b00 <atan>
 8003ef2:	ec51 0b10 	vmov	r0, r1, d0
 8003ef6:	f04f 0200 	mov.w	r2, #0
 8003efa:	4b1b      	ldr	r3, [pc, #108]	; (8003f68 <main+0x408>)
 8003efc:	f7fc fb28 	bl	8000550 <__aeabi_dmul>
 8003f00:	4603      	mov	r3, r0
 8003f02:	460c      	mov	r4, r1
 8003f04:	4618      	mov	r0, r3
 8003f06:	4621      	mov	r1, r4
 8003f08:	e032      	b.n	8003f70 <main+0x410>
 8003f0a:	bf00      	nop
 8003f0c:	f3af 8000 	nop.w
 8003f10:	54442d18 	.word	0x54442d18
 8003f14:	400921fb 	.word	0x400921fb
 8003f18:	20000164 	.word	0x20000164
 8003f1c:	20000110 	.word	0x20000110
 8003f20:	200000a4 	.word	0x200000a4
 8003f24:	20000096 	.word	0x20000096
 8003f28:	200000a8 	.word	0x200000a8
 8003f2c:	20000098 	.word	0x20000098
 8003f30:	200000ac 	.word	0x200000ac
 8003f34:	2000009a 	.word	0x2000009a
 8003f38:	200000b0 	.word	0x200000b0
 8003f3c:	2000009c 	.word	0x2000009c
 8003f40:	200000b4 	.word	0x200000b4
 8003f44:	2000009e 	.word	0x2000009e
 8003f48:	200000b8 	.word	0x200000b8
 8003f4c:	200000a0 	.word	0x200000a0
 8003f50:	200000c0 	.word	0x200000c0
 8003f54:	200000c8 	.word	0x200000c8
 8003f58:	200000d0 	.word	0x200000d0
 8003f5c:	200000d8 	.word	0x200000d8
 8003f60:	200000e0 	.word	0x200000e0
 8003f64:	200000e8 	.word	0x200000e8
 8003f68:	40668000 	.word	0x40668000
 8003f6c:	200000f0 	.word	0x200000f0
 8003f70:	a38d      	add	r3, pc, #564	; (adr r3, 80041a8 <main+0x648>)
 8003f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f76:	f7fc fc15 	bl	80007a4 <__aeabi_ddiv>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	460c      	mov	r4, r1
 8003f7e:	4a8c      	ldr	r2, [pc, #560]	; (80041b0 <main+0x650>)
 8003f80:	e9c2 3400 	strd	r3, r4, [r2]
      yaw = 180 * atan (cor_g_z / sqrt(cor_g_x * cor_g_x + cor_g_z * cor_g_z)) / M_PI;
 8003f84:	4b8b      	ldr	r3, [pc, #556]	; (80041b4 <main+0x654>)
 8003f86:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003f8a:	4b8b      	ldr	r3, [pc, #556]	; (80041b8 <main+0x658>)
 8003f8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f90:	4b89      	ldr	r3, [pc, #548]	; (80041b8 <main+0x658>)
 8003f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f96:	f7fc fadb 	bl	8000550 <__aeabi_dmul>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	4690      	mov	r8, r2
 8003fa0:	4699      	mov	r9, r3
 8003fa2:	4b84      	ldr	r3, [pc, #528]	; (80041b4 <main+0x654>)
 8003fa4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003fa8:	4b82      	ldr	r3, [pc, #520]	; (80041b4 <main+0x654>)
 8003faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fae:	f7fc facf 	bl	8000550 <__aeabi_dmul>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	4640      	mov	r0, r8
 8003fb8:	4649      	mov	r1, r9
 8003fba:	f7fc f913 	bl	80001e4 <__adddf3>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	ec43 2b17 	vmov	d7, r2, r3
 8003fc6:	eeb0 0a47 	vmov.f32	s0, s14
 8003fca:	eef0 0a67 	vmov.f32	s1, s15
 8003fce:	f000 ff41 	bl	8004e54 <sqrt>
 8003fd2:	ec53 2b10 	vmov	r2, r3, d0
 8003fd6:	4620      	mov	r0, r4
 8003fd8:	4629      	mov	r1, r5
 8003fda:	f7fc fbe3 	bl	80007a4 <__aeabi_ddiv>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	460c      	mov	r4, r1
 8003fe2:	ec44 3b17 	vmov	d7, r3, r4
 8003fe6:	eeb0 0a47 	vmov.f32	s0, s14
 8003fea:	eef0 0a67 	vmov.f32	s1, s15
 8003fee:	f000 fd87 	bl	8004b00 <atan>
 8003ff2:	ec51 0b10 	vmov	r0, r1, d0
 8003ff6:	f04f 0200 	mov.w	r2, #0
 8003ffa:	4b70      	ldr	r3, [pc, #448]	; (80041bc <main+0x65c>)
 8003ffc:	f7fc faa8 	bl	8000550 <__aeabi_dmul>
 8004000:	4603      	mov	r3, r0
 8004002:	460c      	mov	r4, r1
 8004004:	4618      	mov	r0, r3
 8004006:	4621      	mov	r1, r4
 8004008:	a367      	add	r3, pc, #412	; (adr r3, 80041a8 <main+0x648>)
 800400a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400e:	f7fc fbc9 	bl	80007a4 <__aeabi_ddiv>
 8004012:	4603      	mov	r3, r0
 8004014:	460c      	mov	r4, r1
 8004016:	4a6a      	ldr	r2, [pc, #424]	; (80041c0 <main+0x660>)
 8004018:	e9c2 3400 	strd	r3, r4, [r2]
      //     break;
      //   }

      //   acce_uart_transmit(cor_a_x, cor_a_y, cor_a_z, orient);
      // }      
      break;
 800401c:	e0bf      	b.n	800419e <main+0x63e>

    case STATE_CALIBRATE:
      // disable interrupt on LINE8. This will prevent interrupt button works 
      // while performing calibration.
      EXTI->IMR = 0x2200;
 800401e:	4b69      	ldr	r3, [pc, #420]	; (80041c4 <main+0x664>)
 8004020:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 8004024:	601a      	str	r2, [r3, #0]

      // turn calibration LED on
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8004026:	2201      	movs	r2, #1
 8004028:	2110      	movs	r1, #16
 800402a:	4867      	ldr	r0, [pc, #412]	; (80041c8 <main+0x668>)
 800402c:	f7fd f9e8 	bl	8001400 <HAL_GPIO_WritePin>
      HAL_Delay(500);
 8004030:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004034:	f7fc ff2e 	bl	8000e94 <HAL_Delay>

      // set all offsets to zero
      offset_a_x = 0;
 8004038:	4b64      	ldr	r3, [pc, #400]	; (80041cc <main+0x66c>)
 800403a:	2200      	movs	r2, #0
 800403c:	601a      	str	r2, [r3, #0]
      offset_a_y = 0;
 800403e:	4b64      	ldr	r3, [pc, #400]	; (80041d0 <main+0x670>)
 8004040:	2200      	movs	r2, #0
 8004042:	601a      	str	r2, [r3, #0]
      offset_a_z = 0;
 8004044:	4b63      	ldr	r3, [pc, #396]	; (80041d4 <main+0x674>)
 8004046:	2200      	movs	r2, #0
 8004048:	601a      	str	r2, [r3, #0]
      offset_g_x = 0;
 800404a:	4b63      	ldr	r3, [pc, #396]	; (80041d8 <main+0x678>)
 800404c:	2200      	movs	r2, #0
 800404e:	601a      	str	r2, [r3, #0]
      offset_g_y = 0;
 8004050:	4b62      	ldr	r3, [pc, #392]	; (80041dc <main+0x67c>)
 8004052:	2200      	movs	r2, #0
 8004054:	601a      	str	r2, [r3, #0]
      offset_g_z = 0;
 8004056:	4b62      	ldr	r3, [pc, #392]	; (80041e0 <main+0x680>)
 8004058:	2200      	movs	r2, #0
 800405a:	601a      	str	r2, [r3, #0]

      for (calibrate_cnt = 0; calibrate_cnt < 10; ++calibrate_cnt)
 800405c:	4b61      	ldr	r3, [pc, #388]	; (80041e4 <main+0x684>)
 800405e:	2200      	movs	r2, #0
 8004060:	701a      	strb	r2, [r3, #0]
 8004062:	e04b      	b.n	80040fc <main+0x59c>
      {
        // accumulate sampling values of Accelero and Gyro
        SD_MPU6050_ReadAccelerometer(&hi2c2, &mpu1);
 8004064:	4960      	ldr	r1, [pc, #384]	; (80041e8 <main+0x688>)
 8004066:	4861      	ldr	r0, [pc, #388]	; (80041ec <main+0x68c>)
 8004068:	f000 fad2 	bl	8004610 <SD_MPU6050_ReadAccelerometer>
        offset_a_x += mpu1.Accelerometer_X;
 800406c:	4b5e      	ldr	r3, [pc, #376]	; (80041e8 <main+0x688>)
 800406e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004072:	461a      	mov	r2, r3
 8004074:	4b55      	ldr	r3, [pc, #340]	; (80041cc <main+0x66c>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4413      	add	r3, r2
 800407a:	4a54      	ldr	r2, [pc, #336]	; (80041cc <main+0x66c>)
 800407c:	6013      	str	r3, [r2, #0]
        offset_a_y += mpu1.Accelerometer_Y;
 800407e:	4b5a      	ldr	r3, [pc, #360]	; (80041e8 <main+0x688>)
 8004080:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004084:	461a      	mov	r2, r3
 8004086:	4b52      	ldr	r3, [pc, #328]	; (80041d0 <main+0x670>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4413      	add	r3, r2
 800408c:	4a50      	ldr	r2, [pc, #320]	; (80041d0 <main+0x670>)
 800408e:	6013      	str	r3, [r2, #0]
        offset_a_z += mpu1.Accelerometer_Z;
 8004090:	4b55      	ldr	r3, [pc, #340]	; (80041e8 <main+0x688>)
 8004092:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8004096:	461a      	mov	r2, r3
 8004098:	4b4e      	ldr	r3, [pc, #312]	; (80041d4 <main+0x674>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4413      	add	r3, r2
 800409e:	4a4d      	ldr	r2, [pc, #308]	; (80041d4 <main+0x674>)
 80040a0:	6013      	str	r3, [r2, #0]

        SD_MPU6050_ReadGyroscope(&hi2c2, &mpu1);
 80040a2:	4951      	ldr	r1, [pc, #324]	; (80041e8 <main+0x688>)
 80040a4:	4851      	ldr	r0, [pc, #324]	; (80041ec <main+0x68c>)
 80040a6:	f000 fafd 	bl	80046a4 <SD_MPU6050_ReadGyroscope>
        offset_g_x += mpu1.Gyroscope_X;
 80040aa:	4b4f      	ldr	r3, [pc, #316]	; (80041e8 <main+0x688>)
 80040ac:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80040b0:	461a      	mov	r2, r3
 80040b2:	4b49      	ldr	r3, [pc, #292]	; (80041d8 <main+0x678>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4413      	add	r3, r2
 80040b8:	4a47      	ldr	r2, [pc, #284]	; (80041d8 <main+0x678>)
 80040ba:	6013      	str	r3, [r2, #0]
        offset_g_y += mpu1.Gyroscope_Y;
 80040bc:	4b4a      	ldr	r3, [pc, #296]	; (80041e8 <main+0x688>)
 80040be:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80040c2:	461a      	mov	r2, r3
 80040c4:	4b45      	ldr	r3, [pc, #276]	; (80041dc <main+0x67c>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4413      	add	r3, r2
 80040ca:	4a44      	ldr	r2, [pc, #272]	; (80041dc <main+0x67c>)
 80040cc:	6013      	str	r3, [r2, #0]
        offset_g_z += mpu1.Gyroscope_Z;
 80040ce:	4b46      	ldr	r3, [pc, #280]	; (80041e8 <main+0x688>)
 80040d0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80040d4:	461a      	mov	r2, r3
 80040d6:	4b42      	ldr	r3, [pc, #264]	; (80041e0 <main+0x680>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4413      	add	r3, r2
 80040dc:	4a40      	ldr	r2, [pc, #256]	; (80041e0 <main+0x680>)
 80040de:	6013      	str	r3, [r2, #0]

        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 80040e0:	2110      	movs	r1, #16
 80040e2:	4839      	ldr	r0, [pc, #228]	; (80041c8 <main+0x668>)
 80040e4:	f7fd f9a5 	bl	8001432 <HAL_GPIO_TogglePin>
        HAL_Delay(200);
 80040e8:	20c8      	movs	r0, #200	; 0xc8
 80040ea:	f7fc fed3 	bl	8000e94 <HAL_Delay>
      for (calibrate_cnt = 0; calibrate_cnt < 10; ++calibrate_cnt)
 80040ee:	4b3d      	ldr	r3, [pc, #244]	; (80041e4 <main+0x684>)
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	3301      	adds	r3, #1
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	4b3a      	ldr	r3, [pc, #232]	; (80041e4 <main+0x684>)
 80040fa:	701a      	strb	r2, [r3, #0]
 80040fc:	4b39      	ldr	r3, [pc, #228]	; (80041e4 <main+0x684>)
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b09      	cmp	r3, #9
 8004104:	d9ae      	bls.n	8004064 <main+0x504>
      }
      
      // average to obtain offset
      offset_a_x = offset_a_x / -10;
 8004106:	4b31      	ldr	r3, [pc, #196]	; (80041cc <main+0x66c>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a39      	ldr	r2, [pc, #228]	; (80041f0 <main+0x690>)
 800410c:	fb82 1203 	smull	r1, r2, r2, r3
 8004110:	1092      	asrs	r2, r2, #2
 8004112:	17db      	asrs	r3, r3, #31
 8004114:	1a9b      	subs	r3, r3, r2
 8004116:	4a2d      	ldr	r2, [pc, #180]	; (80041cc <main+0x66c>)
 8004118:	6013      	str	r3, [r2, #0]
      offset_a_y = offset_a_y / -10;
 800411a:	4b2d      	ldr	r3, [pc, #180]	; (80041d0 <main+0x670>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a34      	ldr	r2, [pc, #208]	; (80041f0 <main+0x690>)
 8004120:	fb82 1203 	smull	r1, r2, r2, r3
 8004124:	1092      	asrs	r2, r2, #2
 8004126:	17db      	asrs	r3, r3, #31
 8004128:	1a9b      	subs	r3, r3, r2
 800412a:	4a29      	ldr	r2, [pc, #164]	; (80041d0 <main+0x670>)
 800412c:	6013      	str	r3, [r2, #0]
      offset_a_z = offset_a_z / -10;
 800412e:	4b29      	ldr	r3, [pc, #164]	; (80041d4 <main+0x674>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a2f      	ldr	r2, [pc, #188]	; (80041f0 <main+0x690>)
 8004134:	fb82 1203 	smull	r1, r2, r2, r3
 8004138:	1092      	asrs	r2, r2, #2
 800413a:	17db      	asrs	r3, r3, #31
 800413c:	1a9b      	subs	r3, r3, r2
 800413e:	4a25      	ldr	r2, [pc, #148]	; (80041d4 <main+0x674>)
 8004140:	6013      	str	r3, [r2, #0]
      offset_g_x = offset_g_x / -10;
 8004142:	4b25      	ldr	r3, [pc, #148]	; (80041d8 <main+0x678>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a2a      	ldr	r2, [pc, #168]	; (80041f0 <main+0x690>)
 8004148:	fb82 1203 	smull	r1, r2, r2, r3
 800414c:	1092      	asrs	r2, r2, #2
 800414e:	17db      	asrs	r3, r3, #31
 8004150:	1a9b      	subs	r3, r3, r2
 8004152:	4a21      	ldr	r2, [pc, #132]	; (80041d8 <main+0x678>)
 8004154:	6013      	str	r3, [r2, #0]
      offset_g_y = offset_g_y / -10;
 8004156:	4b21      	ldr	r3, [pc, #132]	; (80041dc <main+0x67c>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a25      	ldr	r2, [pc, #148]	; (80041f0 <main+0x690>)
 800415c:	fb82 1203 	smull	r1, r2, r2, r3
 8004160:	1092      	asrs	r2, r2, #2
 8004162:	17db      	asrs	r3, r3, #31
 8004164:	1a9b      	subs	r3, r3, r2
 8004166:	4a1d      	ldr	r2, [pc, #116]	; (80041dc <main+0x67c>)
 8004168:	6013      	str	r3, [r2, #0]
      offset_g_z = offset_g_z / -10;
 800416a:	4b1d      	ldr	r3, [pc, #116]	; (80041e0 <main+0x680>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a20      	ldr	r2, [pc, #128]	; (80041f0 <main+0x690>)
 8004170:	fb82 1203 	smull	r1, r2, r2, r3
 8004174:	1092      	asrs	r2, r2, #2
 8004176:	17db      	asrs	r3, r3, #31
 8004178:	1a9b      	subs	r3, r3, r2
 800417a:	4a19      	ldr	r2, [pc, #100]	; (80041e0 <main+0x680>)
 800417c:	6013      	str	r3, [r2, #0]
      
      // turn off calibration LED
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800417e:	2200      	movs	r2, #0
 8004180:	2110      	movs	r1, #16
 8004182:	4811      	ldr	r0, [pc, #68]	; (80041c8 <main+0x668>)
 8004184:	f7fd f93c 	bl	8001400 <HAL_GPIO_WritePin>
      
      // go back to operate
      state = STATE_OPERATE;
 8004188:	4b1a      	ldr	r3, [pc, #104]	; (80041f4 <main+0x694>)
 800418a:	2201      	movs	r2, #1
 800418c:	701a      	strb	r2, [r3, #0]

      // turn interrupt back on
      EXTI->IMR = 0x2300;
 800418e:	4b0d      	ldr	r3, [pc, #52]	; (80041c4 <main+0x664>)
 8004190:	f44f 520c 	mov.w	r2, #8960	; 0x2300
 8004194:	601a      	str	r2, [r3, #0]

      break;
 8004196:	e002      	b.n	800419e <main+0x63e>
    case STATE_TEST:
      // for test purpose
      break;

    default:
      break;
 8004198:	bf00      	nop
 800419a:	e000      	b.n	800419e <main+0x63e>
      break;
 800419c:	bf00      	nop
    }

    HAL_Delay(100);
 800419e:	2064      	movs	r0, #100	; 0x64
 80041a0:	f7fc fe78 	bl	8000e94 <HAL_Delay>
    switch (state)
 80041a4:	e501      	b.n	8003baa <main+0x4a>
 80041a6:	bf00      	nop
 80041a8:	54442d18 	.word	0x54442d18
 80041ac:	400921fb 	.word	0x400921fb
 80041b0:	200000f8 	.word	0x200000f8
 80041b4:	200000e8 	.word	0x200000e8
 80041b8:	200000d8 	.word	0x200000d8
 80041bc:	40668000 	.word	0x40668000
 80041c0:	20000100 	.word	0x20000100
 80041c4:	40013c00 	.word	0x40013c00
 80041c8:	40020400 	.word	0x40020400
 80041cc:	200000a4 	.word	0x200000a4
 80041d0:	200000a8 	.word	0x200000a8
 80041d4:	200000ac 	.word	0x200000ac
 80041d8:	200000b0 	.word	0x200000b0
 80041dc:	200000b4 	.word	0x200000b4
 80041e0:	200000b8 	.word	0x200000b8
 80041e4:	20000095 	.word	0x20000095
 80041e8:	20000164 	.word	0x20000164
 80041ec:	20000110 	.word	0x20000110
 80041f0:	66666667 	.word	0x66666667
 80041f4:	20000094 	.word	0x20000094

080041f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b094      	sub	sp, #80	; 0x50
 80041fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80041fe:	f107 0320 	add.w	r3, r7, #32
 8004202:	2230      	movs	r2, #48	; 0x30
 8004204:	2100      	movs	r1, #0
 8004206:	4618      	mov	r0, r3
 8004208:	f000 fc70 	bl	8004aec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800420c:	f107 030c 	add.w	r3, r7, #12
 8004210:	2200      	movs	r2, #0
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	605a      	str	r2, [r3, #4]
 8004216:	609a      	str	r2, [r3, #8]
 8004218:	60da      	str	r2, [r3, #12]
 800421a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800421c:	2300      	movs	r3, #0
 800421e:	60bb      	str	r3, [r7, #8]
 8004220:	4b28      	ldr	r3, [pc, #160]	; (80042c4 <SystemClock_Config+0xcc>)
 8004222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004224:	4a27      	ldr	r2, [pc, #156]	; (80042c4 <SystemClock_Config+0xcc>)
 8004226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800422a:	6413      	str	r3, [r2, #64]	; 0x40
 800422c:	4b25      	ldr	r3, [pc, #148]	; (80042c4 <SystemClock_Config+0xcc>)
 800422e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004234:	60bb      	str	r3, [r7, #8]
 8004236:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004238:	2300      	movs	r3, #0
 800423a:	607b      	str	r3, [r7, #4]
 800423c:	4b22      	ldr	r3, [pc, #136]	; (80042c8 <SystemClock_Config+0xd0>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a21      	ldr	r2, [pc, #132]	; (80042c8 <SystemClock_Config+0xd0>)
 8004242:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004246:	6013      	str	r3, [r2, #0]
 8004248:	4b1f      	ldr	r3, [pc, #124]	; (80042c8 <SystemClock_Config+0xd0>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004250:	607b      	str	r3, [r7, #4]
 8004252:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004254:	2302      	movs	r3, #2
 8004256:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004258:	2301      	movs	r3, #1
 800425a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800425c:	2310      	movs	r3, #16
 800425e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004260:	2302      	movs	r3, #2
 8004262:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004264:	2300      	movs	r3, #0
 8004266:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8004268:	2310      	movs	r3, #16
 800426a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800426c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8004270:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8004272:	2304      	movs	r3, #4
 8004274:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004276:	2304      	movs	r3, #4
 8004278:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800427a:	f107 0320 	add.w	r3, r7, #32
 800427e:	4618      	mov	r0, r3
 8004280:	f7fe f99c 	bl	80025bc <HAL_RCC_OscConfig>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800428a:	f000 f83d 	bl	8004308 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800428e:	230f      	movs	r3, #15
 8004290:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004292:	2302      	movs	r3, #2
 8004294:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004296:	2300      	movs	r3, #0
 8004298:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800429a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800429e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80042a0:	2300      	movs	r3, #0
 80042a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80042a4:	f107 030c 	add.w	r3, r7, #12
 80042a8:	2102      	movs	r1, #2
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7fe fbc8 	bl	8002a40 <HAL_RCC_ClockConfig>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80042b6:	f000 f827 	bl	8004308 <Error_Handler>
  }
}
 80042ba:	bf00      	nop
 80042bc:	3750      	adds	r7, #80	; 0x50
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	40023800 	.word	0x40023800
 80042c8:	40007000 	.word	0x40007000

080042cc <HAL_GPIO_EXTI_Callback>:

///////////////////
// *--- ISR ---* //
///////////////////
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	4603      	mov	r3, r0
 80042d4:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_9)
 80042d6:	88fb      	ldrh	r3, [r7, #6]
 80042d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042dc:	d103      	bne.n	80042e6 <HAL_GPIO_EXTI_Callback+0x1a>
  {
    turbo = 1;
 80042de:	4b08      	ldr	r3, [pc, #32]	; (8004300 <HAL_GPIO_EXTI_Callback+0x34>)
 80042e0:	2201      	movs	r2, #1
 80042e2:	701a      	strb	r2, [r3, #0]
  }
  else if (GPIO_Pin == GPIO_PIN_8)
  {
    state = STATE_CALIBRATE;
  }
}
 80042e4:	e006      	b.n	80042f4 <HAL_GPIO_EXTI_Callback+0x28>
  else if (GPIO_Pin == GPIO_PIN_8)
 80042e6:	88fb      	ldrh	r3, [r7, #6]
 80042e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042ec:	d102      	bne.n	80042f4 <HAL_GPIO_EXTI_Callback+0x28>
    state = STATE_CALIBRATE;
 80042ee:	4b05      	ldr	r3, [pc, #20]	; (8004304 <HAL_GPIO_EXTI_Callback+0x38>)
 80042f0:	2202      	movs	r2, #2
 80042f2:	701a      	strb	r2, [r3, #0]
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr
 8004300:	20000108 	.word	0x20000108
 8004304:	20000094 	.word	0x20000094

08004308 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004308:	b480      	push	{r7}
 800430a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800430c:	bf00      	nop
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr

08004316 <SD_MPU6050_Init>:
#define MPU6050_ACCE_SENS_4			((float) 8192)
#define MPU6050_ACCE_SENS_8			((float) 4096)
#define MPU6050_ACCE_SENS_16		((float) 2048)

SD_MPU6050_Result SD_MPU6050_Init(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Device DeviceNumber, SD_MPU6050_Accelerometer AccelerometerSensitivity, SD_MPU6050_Gyroscope GyroscopeSensitivity)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b08a      	sub	sp, #40	; 0x28
 800431a:	af02      	add	r7, sp, #8
 800431c:	60f8      	str	r0, [r7, #12]
 800431e:	60b9      	str	r1, [r7, #8]
 8004320:	4611      	mov	r1, r2
 8004322:	461a      	mov	r2, r3
 8004324:	460b      	mov	r3, r1
 8004326:	71fb      	strb	r3, [r7, #7]
 8004328:	4613      	mov	r3, r2
 800432a:	71bb      	strb	r3, [r7, #6]
	uint8_t WHO_AM_I = (uint8_t)MPU6050_WHO_AM_I;
 800432c:	2375      	movs	r3, #117	; 0x75
 800432e:	76bb      	strb	r3, [r7, #26]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	61fb      	str	r3, [r7, #28]
	uint8_t d[2];


	/* Format I2C address */
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t)DeviceNumber;
 8004334:	79fb      	ldrb	r3, [r7, #7]
 8004336:	f063 032f 	orn	r3, r3, #47	; 0x2f
 800433a:	b2da      	uxtb	r2, r3
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	701a      	strb	r2, [r3, #0]
	uint8_t address = DataStruct->Address;
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	76fb      	strb	r3, [r7, #27]

	/* Check if device is connected */
	if(HAL_I2C_IsDeviceReady(Handle,address,2,5)!=HAL_OK)
 8004346:	7efb      	ldrb	r3, [r7, #27]
 8004348:	b299      	uxth	r1, r3
 800434a:	2305      	movs	r3, #5
 800434c:	2202      	movs	r2, #2
 800434e:	69f8      	ldr	r0, [r7, #28]
 8004350:	f7fd fcee 	bl	8001d30 <HAL_I2C_IsDeviceReady>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <SD_MPU6050_Init+0x48>
	{
				return SD_MPU6050_Result_Error;
 800435a:	2301      	movs	r3, #1
 800435c:	e04c      	b.n	80043f8 <SD_MPU6050_Init+0xe2>
	}
	/* Check who am I */
	//------------------
		/* Send address */
		if(HAL_I2C_Master_Transmit(Handle, address, &WHO_AM_I, 1, 1000) != HAL_OK)
 800435e:	7efb      	ldrb	r3, [r7, #27]
 8004360:	b299      	uxth	r1, r3
 8004362:	f107 021a 	add.w	r2, r7, #26
 8004366:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800436a:	9300      	str	r3, [sp, #0]
 800436c:	2301      	movs	r3, #1
 800436e:	69f8      	ldr	r0, [r7, #28]
 8004370:	f7fd f9ba 	bl	80016e8 <HAL_I2C_Master_Transmit>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <SD_MPU6050_Init+0x68>
		{
			return SD_MPU6050_Result_Error;
 800437a:	2301      	movs	r3, #1
 800437c:	e03c      	b.n	80043f8 <SD_MPU6050_Init+0xe2>
		}

		/* Receive multiple byte */
		if(HAL_I2C_Master_Receive(Handle, address, &temp, 1, 1000) != HAL_OK)
 800437e:	7efb      	ldrb	r3, [r7, #27]
 8004380:	b299      	uxth	r1, r3
 8004382:	f107 0219 	add.w	r2, r7, #25
 8004386:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	2301      	movs	r3, #1
 800438e:	69f8      	ldr	r0, [r7, #28]
 8004390:	f7fd faa8 	bl	80018e4 <HAL_I2C_Master_Receive>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d003      	beq.n	80043a2 <SD_MPU6050_Init+0x8c>
		{
			return SD_MPU6050_Result_Error;
 800439a:	2301      	movs	r3, #1
 800439c:	e02c      	b.n	80043f8 <SD_MPU6050_Init+0xe2>

		/* Checking */
		while(temp != MPU6050_I_AM)
		{
				/* Return error */
				return SD_MPU6050_Result_DeviceInvalid;
 800439e:	2303      	movs	r3, #3
 80043a0:	e02a      	b.n	80043f8 <SD_MPU6050_Init+0xe2>
		while(temp != MPU6050_I_AM)
 80043a2:	bf00      	nop
 80043a4:	7e7b      	ldrb	r3, [r7, #25]
 80043a6:	2b68      	cmp	r3, #104	; 0x68
 80043a8:	d1f9      	bne.n	800439e <SD_MPU6050_Init+0x88>
	//------------------

	/* Wakeup MPU6050 */
	//------------------
		/* Format array to send */
		d[0] = MPU6050_PWR_MGMT_1;
 80043aa:	236b      	movs	r3, #107	; 0x6b
 80043ac:	753b      	strb	r3, [r7, #20]
		d[1] = 0x00;
 80043ae:	2300      	movs	r3, #0
 80043b0:	757b      	strb	r3, [r7, #21]

		/* Try to transmit via I2C */
		if(HAL_I2C_Master_Transmit(Handle,(uint16_t)address , (uint8_t *)d, 2, 1000) != HAL_OK)
 80043b2:	7efb      	ldrb	r3, [r7, #27]
 80043b4:	b299      	uxth	r1, r3
 80043b6:	f107 0214 	add.w	r2, r7, #20
 80043ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043be:	9300      	str	r3, [sp, #0]
 80043c0:	2302      	movs	r3, #2
 80043c2:	69f8      	ldr	r0, [r7, #28]
 80043c4:	f7fd f990 	bl	80016e8 <HAL_I2C_Master_Transmit>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <SD_MPU6050_Init+0xbc>
		{
					return SD_MPU6050_Result_Error;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e012      	b.n	80043f8 <SD_MPU6050_Init+0xe2>
		}
	//------------------

	/* Set sample rate to 1kHz */
	SD_MPU6050_SetDataRate(I2Cx,DataStruct, SD_MPU6050_DataRate_1KHz);
 80043d2:	2207      	movs	r2, #7
 80043d4:	68b9      	ldr	r1, [r7, #8]
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f000 f812 	bl	8004400 <SD_MPU6050_SetDataRate>

	/* Config accelerometer */
	SD_MPU6050_SetAccelerometer(I2Cx,DataStruct, AccelerometerSensitivity);
 80043dc:	79bb      	ldrb	r3, [r7, #6]
 80043de:	461a      	mov	r2, r3
 80043e0:	68b9      	ldr	r1, [r7, #8]
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f000 f830 	bl	8004448 <SD_MPU6050_SetAccelerometer>

	/* Config Gyroscope */
	SD_MPU6050_SetGyroscope(I2Cx,DataStruct, GyroscopeSensitivity);
 80043e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80043ec:	461a      	mov	r2, r3
 80043ee:	68b9      	ldr	r1, [r7, #8]
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f000 f899 	bl	8004528 <SD_MPU6050_SetGyroscope>

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3720      	adds	r7, #32
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <SD_MPU6050_SetDataRate>:

SD_MPU6050_Result SD_MPU6050_SetDataRate(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, uint8_t rate)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b088      	sub	sp, #32
 8004404:	af02      	add	r7, sp, #8
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	4613      	mov	r3, r2
 800440c:	71fb      	strb	r3, [r7, #7]
	uint8_t d[2];
	I2C_HandleTypeDef* Handle = I2Cx;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	74fb      	strb	r3, [r7, #19]
	/* Format array to send */
	d[0] = MPU6050_SMPLRT_DIV;
 8004418:	2319      	movs	r3, #25
 800441a:	743b      	strb	r3, [r7, #16]
	d[1] = rate;
 800441c:	79fb      	ldrb	r3, [r7, #7]
 800441e:	747b      	strb	r3, [r7, #17]

	/* Set data sample rate */
	while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
 8004420:	bf00      	nop
 8004422:	7cfb      	ldrb	r3, [r7, #19]
 8004424:	b299      	uxth	r1, r3
 8004426:	f107 0210 	add.w	r2, r7, #16
 800442a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	2302      	movs	r3, #2
 8004432:	6978      	ldr	r0, [r7, #20]
 8004434:	f7fd f958 	bl	80016e8 <HAL_I2C_Master_Transmit>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1f1      	bne.n	8004422 <SD_MPU6050_SetDataRate+0x22>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3718      	adds	r7, #24
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <SD_MPU6050_SetAccelerometer>:

SD_MPU6050_Result SD_MPU6050_SetAccelerometer(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Accelerometer AccelerometerSensitivity)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b088      	sub	sp, #32
 800444c:	af02      	add	r7, sp, #8
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	4613      	mov	r3, r2
 8004454:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	74fb      	strb	r3, [r7, #19]
	uint8_t regAdd =(uint8_t )MPU6050_ACCEL_CONFIG;
 8004460:	231c      	movs	r3, #28
 8004462:	747b      	strb	r3, [r7, #17]

	/* Config accelerometer */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 8004464:	bf00      	nop
 8004466:	7cfb      	ldrb	r3, [r7, #19]
 8004468:	b299      	uxth	r1, r3
 800446a:	f107 0211 	add.w	r2, r7, #17
 800446e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	2301      	movs	r3, #1
 8004476:	6978      	ldr	r0, [r7, #20]
 8004478:	f7fd f936 	bl	80016e8 <HAL_I2C_Master_Transmit>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1f1      	bne.n	8004466 <SD_MPU6050_SetAccelerometer+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 8004482:	bf00      	nop
 8004484:	7cfb      	ldrb	r3, [r7, #19]
 8004486:	b299      	uxth	r1, r3
 8004488:	f107 0212 	add.w	r2, r7, #18
 800448c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004490:	9300      	str	r3, [sp, #0]
 8004492:	2301      	movs	r3, #1
 8004494:	6978      	ldr	r0, [r7, #20]
 8004496:	f7fd fa25 	bl	80018e4 <HAL_I2C_Master_Receive>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1f1      	bne.n	8004484 <SD_MPU6050_SetAccelerometer+0x3c>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)AccelerometerSensitivity << 3;
 80044a0:	7cbb      	ldrb	r3, [r7, #18]
 80044a2:	b25b      	sxtb	r3, r3
 80044a4:	f023 0318 	bic.w	r3, r3, #24
 80044a8:	b25a      	sxtb	r2, r3
 80044aa:	79fb      	ldrb	r3, [r7, #7]
 80044ac:	00db      	lsls	r3, r3, #3
 80044ae:	b25b      	sxtb	r3, r3
 80044b0:	4313      	orrs	r3, r2
 80044b2:	b25b      	sxtb	r3, r3
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	74bb      	strb	r3, [r7, #18]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 80044b8:	bf00      	nop
 80044ba:	7cfb      	ldrb	r3, [r7, #19]
 80044bc:	b299      	uxth	r1, r3
 80044be:	f107 0212 	add.w	r2, r7, #18
 80044c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	2301      	movs	r3, #1
 80044ca:	6978      	ldr	r0, [r7, #20]
 80044cc:	f7fd f90c 	bl	80016e8 <HAL_I2C_Master_Transmit>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1f1      	bne.n	80044ba <SD_MPU6050_SetAccelerometer+0x72>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	/* Set sensitivities for multiplying gyro and accelerometer data */
	switch (AccelerometerSensitivity) {
 80044d6:	79fb      	ldrb	r3, [r7, #7]
 80044d8:	2b03      	cmp	r3, #3
 80044da:	d81f      	bhi.n	800451c <SD_MPU6050_SetAccelerometer+0xd4>
 80044dc:	a201      	add	r2, pc, #4	; (adr r2, 80044e4 <SD_MPU6050_SetAccelerometer+0x9c>)
 80044de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e2:	bf00      	nop
 80044e4:	080044f5 	.word	0x080044f5
 80044e8:	080044ff 	.word	0x080044ff
 80044ec:	08004509 	.word	0x08004509
 80044f0:	08004513 	.word	0x08004513
		case SD_MPU6050_Accelerometer_2G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_2;
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 80044fa:	609a      	str	r2, [r3, #8]
			break;
 80044fc:	e00f      	b.n	800451e <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_4G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_4;
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8004504:	609a      	str	r2, [r3, #8]
			break;
 8004506:	e00a      	b.n	800451e <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_8G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_8;
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800450e:	609a      	str	r2, [r3, #8]
			break;
 8004510:	e005      	b.n	800451e <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_16G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_16;
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8004518:	609a      	str	r2, [r3, #8]
			break;
 800451a:	e000      	b.n	800451e <SD_MPU6050_SetAccelerometer+0xd6>
		default:
			break;
 800451c:	bf00      	nop
		}

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3718      	adds	r7, #24
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <SD_MPU6050_SetGyroscope>:

SD_MPU6050_Result SD_MPU6050_SetGyroscope(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Gyroscope GyroscopeSensitivity)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b088      	sub	sp, #32
 800452c:	af02      	add	r7, sp, #8
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	4613      	mov	r3, r2
 8004534:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	74fb      	strb	r3, [r7, #19]
	uint8_t regAdd =(uint8_t )MPU6050_GYRO_CONFIG;
 8004540:	231b      	movs	r3, #27
 8004542:	747b      	strb	r3, [r7, #17]

	/* Config gyroscope */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 8004544:	bf00      	nop
 8004546:	7cfb      	ldrb	r3, [r7, #19]
 8004548:	b299      	uxth	r1, r3
 800454a:	f107 0211 	add.w	r2, r7, #17
 800454e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004552:	9300      	str	r3, [sp, #0]
 8004554:	2301      	movs	r3, #1
 8004556:	6978      	ldr	r0, [r7, #20]
 8004558:	f7fd f8c6 	bl	80016e8 <HAL_I2C_Master_Transmit>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1f1      	bne.n	8004546 <SD_MPU6050_SetGyroscope+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 8004562:	bf00      	nop
 8004564:	7cfb      	ldrb	r3, [r7, #19]
 8004566:	b299      	uxth	r1, r3
 8004568:	f107 0212 	add.w	r2, r7, #18
 800456c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004570:	9300      	str	r3, [sp, #0]
 8004572:	2301      	movs	r3, #1
 8004574:	6978      	ldr	r0, [r7, #20]
 8004576:	f7fd f9b5 	bl	80018e4 <HAL_I2C_Master_Receive>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1f1      	bne.n	8004564 <SD_MPU6050_SetGyroscope+0x3c>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)GyroscopeSensitivity << 3;
 8004580:	7cbb      	ldrb	r3, [r7, #18]
 8004582:	b25b      	sxtb	r3, r3
 8004584:	f023 0318 	bic.w	r3, r3, #24
 8004588:	b25a      	sxtb	r2, r3
 800458a:	79fb      	ldrb	r3, [r7, #7]
 800458c:	00db      	lsls	r3, r3, #3
 800458e:	b25b      	sxtb	r3, r3
 8004590:	4313      	orrs	r3, r2
 8004592:	b25b      	sxtb	r3, r3
 8004594:	b2db      	uxtb	r3, r3
 8004596:	74bb      	strb	r3, [r7, #18]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 8004598:	bf00      	nop
 800459a:	7cfb      	ldrb	r3, [r7, #19]
 800459c:	b299      	uxth	r1, r3
 800459e:	f107 0212 	add.w	r2, r7, #18
 80045a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045a6:	9300      	str	r3, [sp, #0]
 80045a8:	2301      	movs	r3, #1
 80045aa:	6978      	ldr	r0, [r7, #20]
 80045ac:	f7fd f89c 	bl	80016e8 <HAL_I2C_Master_Transmit>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1f1      	bne.n	800459a <SD_MPU6050_SetGyroscope+0x72>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	switch (GyroscopeSensitivity) {
 80045b6:	79fb      	ldrb	r3, [r7, #7]
 80045b8:	2b03      	cmp	r3, #3
 80045ba:	d81b      	bhi.n	80045f4 <SD_MPU6050_SetGyroscope+0xcc>
 80045bc:	a201      	add	r2, pc, #4	; (adr r2, 80045c4 <SD_MPU6050_SetGyroscope+0x9c>)
 80045be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c2:	bf00      	nop
 80045c4:	080045d5 	.word	0x080045d5
 80045c8:	080045dd 	.word	0x080045dd
 80045cc:	080045e5 	.word	0x080045e5
 80045d0:	080045ed 	.word	0x080045ed
			case SD_MPU6050_Gyroscope_250s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_250;
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	4a0a      	ldr	r2, [pc, #40]	; (8004600 <SD_MPU6050_SetGyroscope+0xd8>)
 80045d8:	605a      	str	r2, [r3, #4]
				break;
 80045da:	e00c      	b.n	80045f6 <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_500s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_500;
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	4a09      	ldr	r2, [pc, #36]	; (8004604 <SD_MPU6050_SetGyroscope+0xdc>)
 80045e0:	605a      	str	r2, [r3, #4]
				break;
 80045e2:	e008      	b.n	80045f6 <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_1000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_1000;
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	4a08      	ldr	r2, [pc, #32]	; (8004608 <SD_MPU6050_SetGyroscope+0xe0>)
 80045e8:	605a      	str	r2, [r3, #4]
				break;
 80045ea:	e004      	b.n	80045f6 <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_2000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_2000;
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	4a07      	ldr	r2, [pc, #28]	; (800460c <SD_MPU6050_SetGyroscope+0xe4>)
 80045f0:	605a      	str	r2, [r3, #4]
				break;
 80045f2:	e000      	b.n	80045f6 <SD_MPU6050_SetGyroscope+0xce>
			default:
				break;
 80045f4:	bf00      	nop
		}
	/* Return OK */
	return SD_MPU6050_Result_Ok;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3718      	adds	r7, #24
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	3bfa232d 	.word	0x3bfa232d
 8004604:	3c7a232d 	.word	0x3c7a232d
 8004608:	3cf9c190 	.word	0x3cf9c190
 800460c:	3d79c190 	.word	0x3d79c190

08004610 <SD_MPU6050_ReadAccelerometer>:

SD_MPU6050_Result SD_MPU6050_ReadAccelerometer(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b088      	sub	sp, #32
 8004614:	af02      	add	r7, sp, #8
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	uint8_t reg = MPU6050_ACCEL_XOUT_H;
 800461a:	233b      	movs	r3, #59	; 0x3b
 800461c:	72fb      	strb	r3, [r7, #11]
	I2C_HandleTypeDef* Handle = I2Cx;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	74fb      	strb	r3, [r7, #19]

	/* Read accelerometer data */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 8004628:	bf00      	nop
 800462a:	7cfb      	ldrb	r3, [r7, #19]
 800462c:	b299      	uxth	r1, r3
 800462e:	f107 020b 	add.w	r2, r7, #11
 8004632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004636:	9300      	str	r3, [sp, #0]
 8004638:	2301      	movs	r3, #1
 800463a:	6978      	ldr	r0, [r7, #20]
 800463c:	f7fd f854 	bl	80016e8 <HAL_I2C_Master_Transmit>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1f1      	bne.n	800462a <SD_MPU6050_ReadAccelerometer+0x1a>

	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 6, 1000) != HAL_OK);
 8004646:	bf00      	nop
 8004648:	7cfb      	ldrb	r3, [r7, #19]
 800464a:	b299      	uxth	r1, r3
 800464c:	f107 020c 	add.w	r2, r7, #12
 8004650:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	2306      	movs	r3, #6
 8004658:	6978      	ldr	r0, [r7, #20]
 800465a:	f7fd f943 	bl	80018e4 <HAL_I2C_Master_Receive>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1f1      	bne.n	8004648 <SD_MPU6050_ReadAccelerometer+0x38>

	/* Format */
	DataStruct->Accelerometer_X = (int16_t)(data[0] << 8 | data[1]);
 8004664:	7b3b      	ldrb	r3, [r7, #12]
 8004666:	021b      	lsls	r3, r3, #8
 8004668:	b21a      	sxth	r2, r3
 800466a:	7b7b      	ldrb	r3, [r7, #13]
 800466c:	b21b      	sxth	r3, r3
 800466e:	4313      	orrs	r3, r2
 8004670:	b21a      	sxth	r2, r3
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	819a      	strh	r2, [r3, #12]
	DataStruct->Accelerometer_Y = (int16_t)(data[2] << 8 | data[3]);
 8004676:	7bbb      	ldrb	r3, [r7, #14]
 8004678:	021b      	lsls	r3, r3, #8
 800467a:	b21a      	sxth	r2, r3
 800467c:	7bfb      	ldrb	r3, [r7, #15]
 800467e:	b21b      	sxth	r3, r3
 8004680:	4313      	orrs	r3, r2
 8004682:	b21a      	sxth	r2, r3
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	81da      	strh	r2, [r3, #14]
	DataStruct->Accelerometer_Z = (int16_t)(data[4] << 8 | data[5]);
 8004688:	7c3b      	ldrb	r3, [r7, #16]
 800468a:	021b      	lsls	r3, r3, #8
 800468c:	b21a      	sxth	r2, r3
 800468e:	7c7b      	ldrb	r3, [r7, #17]
 8004690:	b21b      	sxth	r3, r3
 8004692:	4313      	orrs	r3, r2
 8004694:	b21a      	sxth	r2, r3
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	821a      	strh	r2, [r3, #16]

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3718      	adds	r7, #24
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <SD_MPU6050_ReadGyroscope>:
SD_MPU6050_Result SD_MPU6050_ReadGyroscope(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b088      	sub	sp, #32
 80046a8:	af02      	add	r7, sp, #8
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	uint8_t reg = MPU6050_GYRO_XOUT_H;
 80046ae:	2343      	movs	r3, #67	; 0x43
 80046b0:	72fb      	strb	r3, [r7, #11]
	I2C_HandleTypeDef* Handle = I2Cx;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	74fb      	strb	r3, [r7, #19]

	/* Read gyroscope data */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 80046bc:	bf00      	nop
 80046be:	7cfb      	ldrb	r3, [r7, #19]
 80046c0:	b299      	uxth	r1, r3
 80046c2:	f107 020b 	add.w	r2, r7, #11
 80046c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80046ca:	9300      	str	r3, [sp, #0]
 80046cc:	2301      	movs	r3, #1
 80046ce:	6978      	ldr	r0, [r7, #20]
 80046d0:	f7fd f80a 	bl	80016e8 <HAL_I2C_Master_Transmit>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1f1      	bne.n	80046be <SD_MPU6050_ReadGyroscope+0x1a>

	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 6, 1000) != HAL_OK);
 80046da:	bf00      	nop
 80046dc:	7cfb      	ldrb	r3, [r7, #19]
 80046de:	b299      	uxth	r1, r3
 80046e0:	f107 020c 	add.w	r2, r7, #12
 80046e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80046e8:	9300      	str	r3, [sp, #0]
 80046ea:	2306      	movs	r3, #6
 80046ec:	6978      	ldr	r0, [r7, #20]
 80046ee:	f7fd f8f9 	bl	80018e4 <HAL_I2C_Master_Receive>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1f1      	bne.n	80046dc <SD_MPU6050_ReadGyroscope+0x38>

	/* Format */
	DataStruct->Gyroscope_X = (int16_t)(data[0] << 8 | data[1]);
 80046f8:	7b3b      	ldrb	r3, [r7, #12]
 80046fa:	021b      	lsls	r3, r3, #8
 80046fc:	b21a      	sxth	r2, r3
 80046fe:	7b7b      	ldrb	r3, [r7, #13]
 8004700:	b21b      	sxth	r3, r3
 8004702:	4313      	orrs	r3, r2
 8004704:	b21a      	sxth	r2, r3
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	825a      	strh	r2, [r3, #18]
	DataStruct->Gyroscope_Y = (int16_t)(data[2] << 8 | data[3]);
 800470a:	7bbb      	ldrb	r3, [r7, #14]
 800470c:	021b      	lsls	r3, r3, #8
 800470e:	b21a      	sxth	r2, r3
 8004710:	7bfb      	ldrb	r3, [r7, #15]
 8004712:	b21b      	sxth	r3, r3
 8004714:	4313      	orrs	r3, r2
 8004716:	b21a      	sxth	r2, r3
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	829a      	strh	r2, [r3, #20]
	DataStruct->Gyroscope_Z = (int16_t)(data[4] << 8 | data[5]);
 800471c:	7c3b      	ldrb	r3, [r7, #16]
 800471e:	021b      	lsls	r3, r3, #8
 8004720:	b21a      	sxth	r2, r3
 8004722:	7c7b      	ldrb	r3, [r7, #17]
 8004724:	b21b      	sxth	r3, r3
 8004726:	4313      	orrs	r3, r2
 8004728:	b21a      	sxth	r2, r3
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	82da      	strh	r2, [r3, #22]

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3718      	adds	r7, #24
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800473e:	2300      	movs	r3, #0
 8004740:	607b      	str	r3, [r7, #4]
 8004742:	4b14      	ldr	r3, [pc, #80]	; (8004794 <HAL_MspInit+0x5c>)
 8004744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004746:	4a13      	ldr	r2, [pc, #76]	; (8004794 <HAL_MspInit+0x5c>)
 8004748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800474c:	6453      	str	r3, [r2, #68]	; 0x44
 800474e:	4b11      	ldr	r3, [pc, #68]	; (8004794 <HAL_MspInit+0x5c>)
 8004750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004756:	607b      	str	r3, [r7, #4]
 8004758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800475a:	2300      	movs	r3, #0
 800475c:	603b      	str	r3, [r7, #0]
 800475e:	4b0d      	ldr	r3, [pc, #52]	; (8004794 <HAL_MspInit+0x5c>)
 8004760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004762:	4a0c      	ldr	r2, [pc, #48]	; (8004794 <HAL_MspInit+0x5c>)
 8004764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004768:	6413      	str	r3, [r2, #64]	; 0x40
 800476a:	4b0a      	ldr	r3, [pc, #40]	; (8004794 <HAL_MspInit+0x5c>)
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004772:	603b      	str	r3, [r7, #0]
 8004774:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004776:	2007      	movs	r0, #7
 8004778:	f7fc fc7e 	bl	8001078 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 800477c:	2200      	movs	r2, #0
 800477e:	2100      	movs	r1, #0
 8004780:	2001      	movs	r0, #1
 8004782:	f7fc fc84 	bl	800108e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8004786:	2001      	movs	r0, #1
 8004788:	f7fc fc9d 	bl	80010c6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800478c:	bf00      	nop
 800478e:	3708      	adds	r7, #8
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	40023800 	.word	0x40023800

08004798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004798:	b480      	push	{r7}
 800479a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800479c:	bf00      	nop
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr

080047a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80047a6:	b480      	push	{r7}
 80047a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80047aa:	e7fe      	b.n	80047aa <HardFault_Handler+0x4>

080047ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80047ac:	b480      	push	{r7}
 80047ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80047b0:	e7fe      	b.n	80047b0 <MemManage_Handler+0x4>

080047b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80047b2:	b480      	push	{r7}
 80047b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80047b6:	e7fe      	b.n	80047b6 <BusFault_Handler+0x4>

080047b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80047b8:	b480      	push	{r7}
 80047ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80047bc:	e7fe      	b.n	80047bc <UsageFault_Handler+0x4>

080047be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80047be:	b480      	push	{r7}
 80047c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80047c2:	bf00      	nop
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80047cc:	b480      	push	{r7}
 80047ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80047d0:	bf00      	nop
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr

080047da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80047da:	b480      	push	{r7}
 80047dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80047de:	bf00      	nop
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80047ec:	f7fc fb32 	bl	8000e54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80047f0:	bf00      	nop
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 80047f8:	f7fd fec6 	bl	8002588 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 80047fc:	bf00      	nop
 80047fe:	bd80      	pop	{r7, pc}

08004800 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004804:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004808:	f7fc fe2e 	bl	8001468 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800480c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004810:	f7fc fe2a 	bl	8001468 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004814:	bf00      	nop
 8004816:	bd80      	pop	{r7, pc}

08004818 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004818:	b480      	push	{r7}
 800481a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800481c:	4b16      	ldr	r3, [pc, #88]	; (8004878 <SystemInit+0x60>)
 800481e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004822:	4a15      	ldr	r2, [pc, #84]	; (8004878 <SystemInit+0x60>)
 8004824:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004828:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800482c:	4b13      	ldr	r3, [pc, #76]	; (800487c <SystemInit+0x64>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a12      	ldr	r2, [pc, #72]	; (800487c <SystemInit+0x64>)
 8004832:	f043 0301 	orr.w	r3, r3, #1
 8004836:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004838:	4b10      	ldr	r3, [pc, #64]	; (800487c <SystemInit+0x64>)
 800483a:	2200      	movs	r2, #0
 800483c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800483e:	4b0f      	ldr	r3, [pc, #60]	; (800487c <SystemInit+0x64>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a0e      	ldr	r2, [pc, #56]	; (800487c <SystemInit+0x64>)
 8004844:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004848:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800484c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800484e:	4b0b      	ldr	r3, [pc, #44]	; (800487c <SystemInit+0x64>)
 8004850:	4a0b      	ldr	r2, [pc, #44]	; (8004880 <SystemInit+0x68>)
 8004852:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004854:	4b09      	ldr	r3, [pc, #36]	; (800487c <SystemInit+0x64>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a08      	ldr	r2, [pc, #32]	; (800487c <SystemInit+0x64>)
 800485a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800485e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004860:	4b06      	ldr	r3, [pc, #24]	; (800487c <SystemInit+0x64>)
 8004862:	2200      	movs	r2, #0
 8004864:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004866:	4b04      	ldr	r3, [pc, #16]	; (8004878 <SystemInit+0x60>)
 8004868:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800486c:	609a      	str	r2, [r3, #8]
#endif
}
 800486e:	bf00      	nop
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr
 8004878:	e000ed00 	.word	0xe000ed00
 800487c:	40023800 	.word	0x40023800
 8004880:	24003010 	.word	0x24003010

08004884 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800488a:	f107 0308 	add.w	r3, r7, #8
 800488e:	2200      	movs	r2, #0
 8004890:	601a      	str	r2, [r3, #0]
 8004892:	605a      	str	r2, [r3, #4]
 8004894:	609a      	str	r2, [r3, #8]
 8004896:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004898:	463b      	mov	r3, r7
 800489a:	2200      	movs	r2, #0
 800489c:	601a      	str	r2, [r3, #0]
 800489e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80048a0:	4b1e      	ldr	r3, [pc, #120]	; (800491c <MX_TIM2_Init+0x98>)
 80048a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80048a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 80048a8:	4b1c      	ldr	r3, [pc, #112]	; (800491c <MX_TIM2_Init+0x98>)
 80048aa:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80048ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048b0:	4b1a      	ldr	r3, [pc, #104]	; (800491c <MX_TIM2_Init+0x98>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 80048b6:	4b19      	ldr	r3, [pc, #100]	; (800491c <MX_TIM2_Init+0x98>)
 80048b8:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80048bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048be:	4b17      	ldr	r3, [pc, #92]	; (800491c <MX_TIM2_Init+0x98>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80048c4:	4b15      	ldr	r3, [pc, #84]	; (800491c <MX_TIM2_Init+0x98>)
 80048c6:	2280      	movs	r2, #128	; 0x80
 80048c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80048ca:	4814      	ldr	r0, [pc, #80]	; (800491c <MX_TIM2_Init+0x98>)
 80048cc:	f7fe faa6 	bl	8002e1c <HAL_TIM_Base_Init>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80048d6:	f7ff fd17 	bl	8004308 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80048da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80048e0:	f107 0308 	add.w	r3, r7, #8
 80048e4:	4619      	mov	r1, r3
 80048e6:	480d      	ldr	r0, [pc, #52]	; (800491c <MX_TIM2_Init+0x98>)
 80048e8:	f7fe fac3 	bl	8002e72 <HAL_TIM_ConfigClockSource>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d001      	beq.n	80048f6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80048f2:	f7ff fd09 	bl	8004308 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048f6:	2300      	movs	r3, #0
 80048f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048fa:	2300      	movs	r3, #0
 80048fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80048fe:	463b      	mov	r3, r7
 8004900:	4619      	mov	r1, r3
 8004902:	4806      	ldr	r0, [pc, #24]	; (800491c <MX_TIM2_Init+0x98>)
 8004904:	f7fe fc86 	bl	8003214 <HAL_TIMEx_MasterConfigSynchronization>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800490e:	f7ff fcfb 	bl	8004308 <Error_Handler>
  }

}
 8004912:	bf00      	nop
 8004914:	3718      	adds	r7, #24
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	20000180 	.word	0x20000180

08004920 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004930:	d10d      	bne.n	800494e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004932:	2300      	movs	r3, #0
 8004934:	60fb      	str	r3, [r7, #12]
 8004936:	4b09      	ldr	r3, [pc, #36]	; (800495c <HAL_TIM_Base_MspInit+0x3c>)
 8004938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493a:	4a08      	ldr	r2, [pc, #32]	; (800495c <HAL_TIM_Base_MspInit+0x3c>)
 800493c:	f043 0301 	orr.w	r3, r3, #1
 8004940:	6413      	str	r3, [r2, #64]	; 0x40
 8004942:	4b06      	ldr	r3, [pc, #24]	; (800495c <HAL_TIM_Base_MspInit+0x3c>)
 8004944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	60fb      	str	r3, [r7, #12]
 800494c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800494e:	bf00      	nop
 8004950:	3714      	adds	r7, #20
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	40023800 	.word	0x40023800

08004960 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8004964:	4b11      	ldr	r3, [pc, #68]	; (80049ac <MX_USART2_UART_Init+0x4c>)
 8004966:	4a12      	ldr	r2, [pc, #72]	; (80049b0 <MX_USART2_UART_Init+0x50>)
 8004968:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800496a:	4b10      	ldr	r3, [pc, #64]	; (80049ac <MX_USART2_UART_Init+0x4c>)
 800496c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004970:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004972:	4b0e      	ldr	r3, [pc, #56]	; (80049ac <MX_USART2_UART_Init+0x4c>)
 8004974:	2200      	movs	r2, #0
 8004976:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004978:	4b0c      	ldr	r3, [pc, #48]	; (80049ac <MX_USART2_UART_Init+0x4c>)
 800497a:	2200      	movs	r2, #0
 800497c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800497e:	4b0b      	ldr	r3, [pc, #44]	; (80049ac <MX_USART2_UART_Init+0x4c>)
 8004980:	2200      	movs	r2, #0
 8004982:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004984:	4b09      	ldr	r3, [pc, #36]	; (80049ac <MX_USART2_UART_Init+0x4c>)
 8004986:	220c      	movs	r2, #12
 8004988:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800498a:	4b08      	ldr	r3, [pc, #32]	; (80049ac <MX_USART2_UART_Init+0x4c>)
 800498c:	2200      	movs	r2, #0
 800498e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004990:	4b06      	ldr	r3, [pc, #24]	; (80049ac <MX_USART2_UART_Init+0x4c>)
 8004992:	2200      	movs	r2, #0
 8004994:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004996:	4805      	ldr	r0, [pc, #20]	; (80049ac <MX_USART2_UART_Init+0x4c>)
 8004998:	f7fe fc81 	bl	800329e <HAL_UART_Init>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80049a2:	f7ff fcb1 	bl	8004308 <Error_Handler>
  }

}
 80049a6:	bf00      	nop
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	200001c0 	.word	0x200001c0
 80049b0:	40004400 	.word	0x40004400

080049b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b08a      	sub	sp, #40	; 0x28
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049bc:	f107 0314 	add.w	r3, r7, #20
 80049c0:	2200      	movs	r2, #0
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	605a      	str	r2, [r3, #4]
 80049c6:	609a      	str	r2, [r3, #8]
 80049c8:	60da      	str	r2, [r3, #12]
 80049ca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a19      	ldr	r2, [pc, #100]	; (8004a38 <HAL_UART_MspInit+0x84>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d12b      	bne.n	8004a2e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80049d6:	2300      	movs	r3, #0
 80049d8:	613b      	str	r3, [r7, #16]
 80049da:	4b18      	ldr	r3, [pc, #96]	; (8004a3c <HAL_UART_MspInit+0x88>)
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	4a17      	ldr	r2, [pc, #92]	; (8004a3c <HAL_UART_MspInit+0x88>)
 80049e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049e4:	6413      	str	r3, [r2, #64]	; 0x40
 80049e6:	4b15      	ldr	r3, [pc, #84]	; (8004a3c <HAL_UART_MspInit+0x88>)
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ee:	613b      	str	r3, [r7, #16]
 80049f0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049f2:	2300      	movs	r3, #0
 80049f4:	60fb      	str	r3, [r7, #12]
 80049f6:	4b11      	ldr	r3, [pc, #68]	; (8004a3c <HAL_UART_MspInit+0x88>)
 80049f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fa:	4a10      	ldr	r2, [pc, #64]	; (8004a3c <HAL_UART_MspInit+0x88>)
 80049fc:	f043 0301 	orr.w	r3, r3, #1
 8004a00:	6313      	str	r3, [r2, #48]	; 0x30
 8004a02:	4b0e      	ldr	r3, [pc, #56]	; (8004a3c <HAL_UART_MspInit+0x88>)
 8004a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	60fb      	str	r3, [r7, #12]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004a0e:	230c      	movs	r3, #12
 8004a10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a12:	2302      	movs	r3, #2
 8004a14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a16:	2301      	movs	r3, #1
 8004a18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004a1e:	2307      	movs	r3, #7
 8004a20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a22:	f107 0314 	add.w	r3, r7, #20
 8004a26:	4619      	mov	r1, r3
 8004a28:	4805      	ldr	r0, [pc, #20]	; (8004a40 <HAL_UART_MspInit+0x8c>)
 8004a2a:	f7fc fb67 	bl	80010fc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004a2e:	bf00      	nop
 8004a30:	3728      	adds	r7, #40	; 0x28
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	40004400 	.word	0x40004400
 8004a3c:	40023800 	.word	0x40023800
 8004a40:	40020000 	.word	0x40020000

08004a44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004a44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004a7c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004a48:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004a4a:	e003      	b.n	8004a54 <LoopCopyDataInit>

08004a4c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004a4c:	4b0c      	ldr	r3, [pc, #48]	; (8004a80 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004a4e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004a50:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004a52:	3104      	adds	r1, #4

08004a54 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004a54:	480b      	ldr	r0, [pc, #44]	; (8004a84 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004a56:	4b0c      	ldr	r3, [pc, #48]	; (8004a88 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004a58:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004a5a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004a5c:	d3f6      	bcc.n	8004a4c <CopyDataInit>
  ldr  r2, =_sbss
 8004a5e:	4a0b      	ldr	r2, [pc, #44]	; (8004a8c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004a60:	e002      	b.n	8004a68 <LoopFillZerobss>

08004a62 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004a62:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004a64:	f842 3b04 	str.w	r3, [r2], #4

08004a68 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004a68:	4b09      	ldr	r3, [pc, #36]	; (8004a90 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004a6a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004a6c:	d3f9      	bcc.n	8004a62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004a6e:	f7ff fed3 	bl	8004818 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004a72:	f000 f817 	bl	8004aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004a76:	f7ff f873 	bl	8003b60 <main>
  bx  lr    
 8004a7a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004a7c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004a80:	08005120 	.word	0x08005120
  ldr  r0, =_sdata
 8004a84:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004a88:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8004a8c:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8004a90:	20000200 	.word	0x20000200

08004a94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a94:	e7fe      	b.n	8004a94 <ADC_IRQHandler>
	...

08004a98 <__errno>:
 8004a98:	4b01      	ldr	r3, [pc, #4]	; (8004aa0 <__errno+0x8>)
 8004a9a:	6818      	ldr	r0, [r3, #0]
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	2000000c 	.word	0x2000000c

08004aa4 <__libc_init_array>:
 8004aa4:	b570      	push	{r4, r5, r6, lr}
 8004aa6:	4e0d      	ldr	r6, [pc, #52]	; (8004adc <__libc_init_array+0x38>)
 8004aa8:	4c0d      	ldr	r4, [pc, #52]	; (8004ae0 <__libc_init_array+0x3c>)
 8004aaa:	1ba4      	subs	r4, r4, r6
 8004aac:	10a4      	asrs	r4, r4, #2
 8004aae:	2500      	movs	r5, #0
 8004ab0:	42a5      	cmp	r5, r4
 8004ab2:	d109      	bne.n	8004ac8 <__libc_init_array+0x24>
 8004ab4:	4e0b      	ldr	r6, [pc, #44]	; (8004ae4 <__libc_init_array+0x40>)
 8004ab6:	4c0c      	ldr	r4, [pc, #48]	; (8004ae8 <__libc_init_array+0x44>)
 8004ab8:	f000 fad8 	bl	800506c <_init>
 8004abc:	1ba4      	subs	r4, r4, r6
 8004abe:	10a4      	asrs	r4, r4, #2
 8004ac0:	2500      	movs	r5, #0
 8004ac2:	42a5      	cmp	r5, r4
 8004ac4:	d105      	bne.n	8004ad2 <__libc_init_array+0x2e>
 8004ac6:	bd70      	pop	{r4, r5, r6, pc}
 8004ac8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004acc:	4798      	blx	r3
 8004ace:	3501      	adds	r5, #1
 8004ad0:	e7ee      	b.n	8004ab0 <__libc_init_array+0xc>
 8004ad2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ad6:	4798      	blx	r3
 8004ad8:	3501      	adds	r5, #1
 8004ada:	e7f2      	b.n	8004ac2 <__libc_init_array+0x1e>
 8004adc:	08005118 	.word	0x08005118
 8004ae0:	08005118 	.word	0x08005118
 8004ae4:	08005118 	.word	0x08005118
 8004ae8:	0800511c 	.word	0x0800511c

08004aec <memset>:
 8004aec:	4402      	add	r2, r0
 8004aee:	4603      	mov	r3, r0
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d100      	bne.n	8004af6 <memset+0xa>
 8004af4:	4770      	bx	lr
 8004af6:	f803 1b01 	strb.w	r1, [r3], #1
 8004afa:	e7f9      	b.n	8004af0 <memset+0x4>
 8004afc:	0000      	movs	r0, r0
	...

08004b00 <atan>:
 8004b00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b04:	ec55 4b10 	vmov	r4, r5, d0
 8004b08:	4bc3      	ldr	r3, [pc, #780]	; (8004e18 <atan+0x318>)
 8004b0a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004b0e:	429e      	cmp	r6, r3
 8004b10:	46ab      	mov	fp, r5
 8004b12:	dd18      	ble.n	8004b46 <atan+0x46>
 8004b14:	4bc1      	ldr	r3, [pc, #772]	; (8004e1c <atan+0x31c>)
 8004b16:	429e      	cmp	r6, r3
 8004b18:	dc01      	bgt.n	8004b1e <atan+0x1e>
 8004b1a:	d109      	bne.n	8004b30 <atan+0x30>
 8004b1c:	b144      	cbz	r4, 8004b30 <atan+0x30>
 8004b1e:	4622      	mov	r2, r4
 8004b20:	462b      	mov	r3, r5
 8004b22:	4620      	mov	r0, r4
 8004b24:	4629      	mov	r1, r5
 8004b26:	f7fb fb5d 	bl	80001e4 <__adddf3>
 8004b2a:	4604      	mov	r4, r0
 8004b2c:	460d      	mov	r5, r1
 8004b2e:	e006      	b.n	8004b3e <atan+0x3e>
 8004b30:	f1bb 0f00 	cmp.w	fp, #0
 8004b34:	f340 8131 	ble.w	8004d9a <atan+0x29a>
 8004b38:	a59b      	add	r5, pc, #620	; (adr r5, 8004da8 <atan+0x2a8>)
 8004b3a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004b3e:	ec45 4b10 	vmov	d0, r4, r5
 8004b42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b46:	4bb6      	ldr	r3, [pc, #728]	; (8004e20 <atan+0x320>)
 8004b48:	429e      	cmp	r6, r3
 8004b4a:	dc14      	bgt.n	8004b76 <atan+0x76>
 8004b4c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8004b50:	429e      	cmp	r6, r3
 8004b52:	dc0d      	bgt.n	8004b70 <atan+0x70>
 8004b54:	a396      	add	r3, pc, #600	; (adr r3, 8004db0 <atan+0x2b0>)
 8004b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5a:	ee10 0a10 	vmov	r0, s0
 8004b5e:	4629      	mov	r1, r5
 8004b60:	f7fb fb40 	bl	80001e4 <__adddf3>
 8004b64:	2200      	movs	r2, #0
 8004b66:	4baf      	ldr	r3, [pc, #700]	; (8004e24 <atan+0x324>)
 8004b68:	f7fb ff82 	bl	8000a70 <__aeabi_dcmpgt>
 8004b6c:	2800      	cmp	r0, #0
 8004b6e:	d1e6      	bne.n	8004b3e <atan+0x3e>
 8004b70:	f04f 3aff 	mov.w	sl, #4294967295
 8004b74:	e02b      	b.n	8004bce <atan+0xce>
 8004b76:	f000 f963 	bl	8004e40 <fabs>
 8004b7a:	4bab      	ldr	r3, [pc, #684]	; (8004e28 <atan+0x328>)
 8004b7c:	429e      	cmp	r6, r3
 8004b7e:	ec55 4b10 	vmov	r4, r5, d0
 8004b82:	f300 80bf 	bgt.w	8004d04 <atan+0x204>
 8004b86:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8004b8a:	429e      	cmp	r6, r3
 8004b8c:	f300 80a0 	bgt.w	8004cd0 <atan+0x1d0>
 8004b90:	ee10 2a10 	vmov	r2, s0
 8004b94:	ee10 0a10 	vmov	r0, s0
 8004b98:	462b      	mov	r3, r5
 8004b9a:	4629      	mov	r1, r5
 8004b9c:	f7fb fb22 	bl	80001e4 <__adddf3>
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	4ba0      	ldr	r3, [pc, #640]	; (8004e24 <atan+0x324>)
 8004ba4:	f7fb fb1c 	bl	80001e0 <__aeabi_dsub>
 8004ba8:	2200      	movs	r2, #0
 8004baa:	4606      	mov	r6, r0
 8004bac:	460f      	mov	r7, r1
 8004bae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004bb2:	4620      	mov	r0, r4
 8004bb4:	4629      	mov	r1, r5
 8004bb6:	f7fb fb15 	bl	80001e4 <__adddf3>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	4630      	mov	r0, r6
 8004bc0:	4639      	mov	r1, r7
 8004bc2:	f7fb fdef 	bl	80007a4 <__aeabi_ddiv>
 8004bc6:	f04f 0a00 	mov.w	sl, #0
 8004bca:	4604      	mov	r4, r0
 8004bcc:	460d      	mov	r5, r1
 8004bce:	4622      	mov	r2, r4
 8004bd0:	462b      	mov	r3, r5
 8004bd2:	4620      	mov	r0, r4
 8004bd4:	4629      	mov	r1, r5
 8004bd6:	f7fb fcbb 	bl	8000550 <__aeabi_dmul>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	460b      	mov	r3, r1
 8004bde:	4680      	mov	r8, r0
 8004be0:	4689      	mov	r9, r1
 8004be2:	f7fb fcb5 	bl	8000550 <__aeabi_dmul>
 8004be6:	a374      	add	r3, pc, #464	; (adr r3, 8004db8 <atan+0x2b8>)
 8004be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bec:	4606      	mov	r6, r0
 8004bee:	460f      	mov	r7, r1
 8004bf0:	f7fb fcae 	bl	8000550 <__aeabi_dmul>
 8004bf4:	a372      	add	r3, pc, #456	; (adr r3, 8004dc0 <atan+0x2c0>)
 8004bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfa:	f7fb faf3 	bl	80001e4 <__adddf3>
 8004bfe:	4632      	mov	r2, r6
 8004c00:	463b      	mov	r3, r7
 8004c02:	f7fb fca5 	bl	8000550 <__aeabi_dmul>
 8004c06:	a370      	add	r3, pc, #448	; (adr r3, 8004dc8 <atan+0x2c8>)
 8004c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0c:	f7fb faea 	bl	80001e4 <__adddf3>
 8004c10:	4632      	mov	r2, r6
 8004c12:	463b      	mov	r3, r7
 8004c14:	f7fb fc9c 	bl	8000550 <__aeabi_dmul>
 8004c18:	a36d      	add	r3, pc, #436	; (adr r3, 8004dd0 <atan+0x2d0>)
 8004c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1e:	f7fb fae1 	bl	80001e4 <__adddf3>
 8004c22:	4632      	mov	r2, r6
 8004c24:	463b      	mov	r3, r7
 8004c26:	f7fb fc93 	bl	8000550 <__aeabi_dmul>
 8004c2a:	a36b      	add	r3, pc, #428	; (adr r3, 8004dd8 <atan+0x2d8>)
 8004c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c30:	f7fb fad8 	bl	80001e4 <__adddf3>
 8004c34:	4632      	mov	r2, r6
 8004c36:	463b      	mov	r3, r7
 8004c38:	f7fb fc8a 	bl	8000550 <__aeabi_dmul>
 8004c3c:	a368      	add	r3, pc, #416	; (adr r3, 8004de0 <atan+0x2e0>)
 8004c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c42:	f7fb facf 	bl	80001e4 <__adddf3>
 8004c46:	4642      	mov	r2, r8
 8004c48:	464b      	mov	r3, r9
 8004c4a:	f7fb fc81 	bl	8000550 <__aeabi_dmul>
 8004c4e:	a366      	add	r3, pc, #408	; (adr r3, 8004de8 <atan+0x2e8>)
 8004c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c54:	4680      	mov	r8, r0
 8004c56:	4689      	mov	r9, r1
 8004c58:	4630      	mov	r0, r6
 8004c5a:	4639      	mov	r1, r7
 8004c5c:	f7fb fc78 	bl	8000550 <__aeabi_dmul>
 8004c60:	a363      	add	r3, pc, #396	; (adr r3, 8004df0 <atan+0x2f0>)
 8004c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c66:	f7fb fabb 	bl	80001e0 <__aeabi_dsub>
 8004c6a:	4632      	mov	r2, r6
 8004c6c:	463b      	mov	r3, r7
 8004c6e:	f7fb fc6f 	bl	8000550 <__aeabi_dmul>
 8004c72:	a361      	add	r3, pc, #388	; (adr r3, 8004df8 <atan+0x2f8>)
 8004c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c78:	f7fb fab2 	bl	80001e0 <__aeabi_dsub>
 8004c7c:	4632      	mov	r2, r6
 8004c7e:	463b      	mov	r3, r7
 8004c80:	f7fb fc66 	bl	8000550 <__aeabi_dmul>
 8004c84:	a35e      	add	r3, pc, #376	; (adr r3, 8004e00 <atan+0x300>)
 8004c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8a:	f7fb faa9 	bl	80001e0 <__aeabi_dsub>
 8004c8e:	4632      	mov	r2, r6
 8004c90:	463b      	mov	r3, r7
 8004c92:	f7fb fc5d 	bl	8000550 <__aeabi_dmul>
 8004c96:	a35c      	add	r3, pc, #368	; (adr r3, 8004e08 <atan+0x308>)
 8004c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9c:	f7fb faa0 	bl	80001e0 <__aeabi_dsub>
 8004ca0:	4632      	mov	r2, r6
 8004ca2:	463b      	mov	r3, r7
 8004ca4:	f7fb fc54 	bl	8000550 <__aeabi_dmul>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	460b      	mov	r3, r1
 8004cac:	4640      	mov	r0, r8
 8004cae:	4649      	mov	r1, r9
 8004cb0:	f7fb fa98 	bl	80001e4 <__adddf3>
 8004cb4:	4622      	mov	r2, r4
 8004cb6:	462b      	mov	r3, r5
 8004cb8:	f7fb fc4a 	bl	8000550 <__aeabi_dmul>
 8004cbc:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	d14b      	bne.n	8004d5e <atan+0x25e>
 8004cc6:	4620      	mov	r0, r4
 8004cc8:	4629      	mov	r1, r5
 8004cca:	f7fb fa89 	bl	80001e0 <__aeabi_dsub>
 8004cce:	e72c      	b.n	8004b2a <atan+0x2a>
 8004cd0:	ee10 0a10 	vmov	r0, s0
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	4b53      	ldr	r3, [pc, #332]	; (8004e24 <atan+0x324>)
 8004cd8:	4629      	mov	r1, r5
 8004cda:	f7fb fa81 	bl	80001e0 <__aeabi_dsub>
 8004cde:	2200      	movs	r2, #0
 8004ce0:	4606      	mov	r6, r0
 8004ce2:	460f      	mov	r7, r1
 8004ce4:	4b4f      	ldr	r3, [pc, #316]	; (8004e24 <atan+0x324>)
 8004ce6:	4620      	mov	r0, r4
 8004ce8:	4629      	mov	r1, r5
 8004cea:	f7fb fa7b 	bl	80001e4 <__adddf3>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	4630      	mov	r0, r6
 8004cf4:	4639      	mov	r1, r7
 8004cf6:	f7fb fd55 	bl	80007a4 <__aeabi_ddiv>
 8004cfa:	f04f 0a01 	mov.w	sl, #1
 8004cfe:	4604      	mov	r4, r0
 8004d00:	460d      	mov	r5, r1
 8004d02:	e764      	b.n	8004bce <atan+0xce>
 8004d04:	4b49      	ldr	r3, [pc, #292]	; (8004e2c <atan+0x32c>)
 8004d06:	429e      	cmp	r6, r3
 8004d08:	dc1d      	bgt.n	8004d46 <atan+0x246>
 8004d0a:	ee10 0a10 	vmov	r0, s0
 8004d0e:	2200      	movs	r2, #0
 8004d10:	4b47      	ldr	r3, [pc, #284]	; (8004e30 <atan+0x330>)
 8004d12:	4629      	mov	r1, r5
 8004d14:	f7fb fa64 	bl	80001e0 <__aeabi_dsub>
 8004d18:	2200      	movs	r2, #0
 8004d1a:	4606      	mov	r6, r0
 8004d1c:	460f      	mov	r7, r1
 8004d1e:	4b44      	ldr	r3, [pc, #272]	; (8004e30 <atan+0x330>)
 8004d20:	4620      	mov	r0, r4
 8004d22:	4629      	mov	r1, r5
 8004d24:	f7fb fc14 	bl	8000550 <__aeabi_dmul>
 8004d28:	2200      	movs	r2, #0
 8004d2a:	4b3e      	ldr	r3, [pc, #248]	; (8004e24 <atan+0x324>)
 8004d2c:	f7fb fa5a 	bl	80001e4 <__adddf3>
 8004d30:	4602      	mov	r2, r0
 8004d32:	460b      	mov	r3, r1
 8004d34:	4630      	mov	r0, r6
 8004d36:	4639      	mov	r1, r7
 8004d38:	f7fb fd34 	bl	80007a4 <__aeabi_ddiv>
 8004d3c:	f04f 0a02 	mov.w	sl, #2
 8004d40:	4604      	mov	r4, r0
 8004d42:	460d      	mov	r5, r1
 8004d44:	e743      	b.n	8004bce <atan+0xce>
 8004d46:	462b      	mov	r3, r5
 8004d48:	ee10 2a10 	vmov	r2, s0
 8004d4c:	2000      	movs	r0, #0
 8004d4e:	4939      	ldr	r1, [pc, #228]	; (8004e34 <atan+0x334>)
 8004d50:	f7fb fd28 	bl	80007a4 <__aeabi_ddiv>
 8004d54:	f04f 0a03 	mov.w	sl, #3
 8004d58:	4604      	mov	r4, r0
 8004d5a:	460d      	mov	r5, r1
 8004d5c:	e737      	b.n	8004bce <atan+0xce>
 8004d5e:	4b36      	ldr	r3, [pc, #216]	; (8004e38 <atan+0x338>)
 8004d60:	4e36      	ldr	r6, [pc, #216]	; (8004e3c <atan+0x33c>)
 8004d62:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8004d66:	4456      	add	r6, sl
 8004d68:	449a      	add	sl, r3
 8004d6a:	e9da 2300 	ldrd	r2, r3, [sl]
 8004d6e:	f7fb fa37 	bl	80001e0 <__aeabi_dsub>
 8004d72:	4622      	mov	r2, r4
 8004d74:	462b      	mov	r3, r5
 8004d76:	f7fb fa33 	bl	80001e0 <__aeabi_dsub>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8004d82:	f7fb fa2d 	bl	80001e0 <__aeabi_dsub>
 8004d86:	f1bb 0f00 	cmp.w	fp, #0
 8004d8a:	4604      	mov	r4, r0
 8004d8c:	460d      	mov	r5, r1
 8004d8e:	f6bf aed6 	bge.w	8004b3e <atan+0x3e>
 8004d92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004d96:	461d      	mov	r5, r3
 8004d98:	e6d1      	b.n	8004b3e <atan+0x3e>
 8004d9a:	a51d      	add	r5, pc, #116	; (adr r5, 8004e10 <atan+0x310>)
 8004d9c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004da0:	e6cd      	b.n	8004b3e <atan+0x3e>
 8004da2:	bf00      	nop
 8004da4:	f3af 8000 	nop.w
 8004da8:	54442d18 	.word	0x54442d18
 8004dac:	3ff921fb 	.word	0x3ff921fb
 8004db0:	8800759c 	.word	0x8800759c
 8004db4:	7e37e43c 	.word	0x7e37e43c
 8004db8:	e322da11 	.word	0xe322da11
 8004dbc:	3f90ad3a 	.word	0x3f90ad3a
 8004dc0:	24760deb 	.word	0x24760deb
 8004dc4:	3fa97b4b 	.word	0x3fa97b4b
 8004dc8:	a0d03d51 	.word	0xa0d03d51
 8004dcc:	3fb10d66 	.word	0x3fb10d66
 8004dd0:	c54c206e 	.word	0xc54c206e
 8004dd4:	3fb745cd 	.word	0x3fb745cd
 8004dd8:	920083ff 	.word	0x920083ff
 8004ddc:	3fc24924 	.word	0x3fc24924
 8004de0:	5555550d 	.word	0x5555550d
 8004de4:	3fd55555 	.word	0x3fd55555
 8004de8:	2c6a6c2f 	.word	0x2c6a6c2f
 8004dec:	bfa2b444 	.word	0xbfa2b444
 8004df0:	52defd9a 	.word	0x52defd9a
 8004df4:	3fadde2d 	.word	0x3fadde2d
 8004df8:	af749a6d 	.word	0xaf749a6d
 8004dfc:	3fb3b0f2 	.word	0x3fb3b0f2
 8004e00:	fe231671 	.word	0xfe231671
 8004e04:	3fbc71c6 	.word	0x3fbc71c6
 8004e08:	9998ebc4 	.word	0x9998ebc4
 8004e0c:	3fc99999 	.word	0x3fc99999
 8004e10:	54442d18 	.word	0x54442d18
 8004e14:	bff921fb 	.word	0xbff921fb
 8004e18:	440fffff 	.word	0x440fffff
 8004e1c:	7ff00000 	.word	0x7ff00000
 8004e20:	3fdbffff 	.word	0x3fdbffff
 8004e24:	3ff00000 	.word	0x3ff00000
 8004e28:	3ff2ffff 	.word	0x3ff2ffff
 8004e2c:	40037fff 	.word	0x40037fff
 8004e30:	3ff80000 	.word	0x3ff80000
 8004e34:	bff00000 	.word	0xbff00000
 8004e38:	080050e8 	.word	0x080050e8
 8004e3c:	080050c8 	.word	0x080050c8

08004e40 <fabs>:
 8004e40:	ec51 0b10 	vmov	r0, r1, d0
 8004e44:	ee10 2a10 	vmov	r2, s0
 8004e48:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004e4c:	ec43 2b10 	vmov	d0, r2, r3
 8004e50:	4770      	bx	lr
	...

08004e54 <sqrt>:
 8004e54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004e58:	ed2d 8b02 	vpush	{d8}
 8004e5c:	b08b      	sub	sp, #44	; 0x2c
 8004e5e:	ec55 4b10 	vmov	r4, r5, d0
 8004e62:	f000 f851 	bl	8004f08 <__ieee754_sqrt>
 8004e66:	4b26      	ldr	r3, [pc, #152]	; (8004f00 <sqrt+0xac>)
 8004e68:	eeb0 8a40 	vmov.f32	s16, s0
 8004e6c:	eef0 8a60 	vmov.f32	s17, s1
 8004e70:	f993 6000 	ldrsb.w	r6, [r3]
 8004e74:	1c73      	adds	r3, r6, #1
 8004e76:	d02a      	beq.n	8004ece <sqrt+0x7a>
 8004e78:	4622      	mov	r2, r4
 8004e7a:	462b      	mov	r3, r5
 8004e7c:	4620      	mov	r0, r4
 8004e7e:	4629      	mov	r1, r5
 8004e80:	f7fb fe00 	bl	8000a84 <__aeabi_dcmpun>
 8004e84:	4607      	mov	r7, r0
 8004e86:	bb10      	cbnz	r0, 8004ece <sqrt+0x7a>
 8004e88:	f04f 0800 	mov.w	r8, #0
 8004e8c:	f04f 0900 	mov.w	r9, #0
 8004e90:	4642      	mov	r2, r8
 8004e92:	464b      	mov	r3, r9
 8004e94:	4620      	mov	r0, r4
 8004e96:	4629      	mov	r1, r5
 8004e98:	f7fb fdcc 	bl	8000a34 <__aeabi_dcmplt>
 8004e9c:	b1b8      	cbz	r0, 8004ece <sqrt+0x7a>
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	4b18      	ldr	r3, [pc, #96]	; (8004f04 <sqrt+0xb0>)
 8004ea4:	9301      	str	r3, [sp, #4]
 8004ea6:	9708      	str	r7, [sp, #32]
 8004ea8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8004eac:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004eb0:	b9b6      	cbnz	r6, 8004ee0 <sqrt+0x8c>
 8004eb2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004eb6:	4668      	mov	r0, sp
 8004eb8:	f000 f8d6 	bl	8005068 <matherr>
 8004ebc:	b1d0      	cbz	r0, 8004ef4 <sqrt+0xa0>
 8004ebe:	9b08      	ldr	r3, [sp, #32]
 8004ec0:	b11b      	cbz	r3, 8004eca <sqrt+0x76>
 8004ec2:	f7ff fde9 	bl	8004a98 <__errno>
 8004ec6:	9b08      	ldr	r3, [sp, #32]
 8004ec8:	6003      	str	r3, [r0, #0]
 8004eca:	ed9d 8b06 	vldr	d8, [sp, #24]
 8004ece:	eeb0 0a48 	vmov.f32	s0, s16
 8004ed2:	eef0 0a68 	vmov.f32	s1, s17
 8004ed6:	b00b      	add	sp, #44	; 0x2c
 8004ed8:	ecbd 8b02 	vpop	{d8}
 8004edc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004ee0:	4642      	mov	r2, r8
 8004ee2:	464b      	mov	r3, r9
 8004ee4:	4640      	mov	r0, r8
 8004ee6:	4649      	mov	r1, r9
 8004ee8:	f7fb fc5c 	bl	80007a4 <__aeabi_ddiv>
 8004eec:	2e02      	cmp	r6, #2
 8004eee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004ef2:	d1e0      	bne.n	8004eb6 <sqrt+0x62>
 8004ef4:	f7ff fdd0 	bl	8004a98 <__errno>
 8004ef8:	2321      	movs	r3, #33	; 0x21
 8004efa:	6003      	str	r3, [r0, #0]
 8004efc:	e7df      	b.n	8004ebe <sqrt+0x6a>
 8004efe:	bf00      	nop
 8004f00:	20000070 	.word	0x20000070
 8004f04:	08005108 	.word	0x08005108

08004f08 <__ieee754_sqrt>:
 8004f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f0c:	4955      	ldr	r1, [pc, #340]	; (8005064 <__ieee754_sqrt+0x15c>)
 8004f0e:	ec55 4b10 	vmov	r4, r5, d0
 8004f12:	43a9      	bics	r1, r5
 8004f14:	462b      	mov	r3, r5
 8004f16:	462a      	mov	r2, r5
 8004f18:	d112      	bne.n	8004f40 <__ieee754_sqrt+0x38>
 8004f1a:	ee10 2a10 	vmov	r2, s0
 8004f1e:	ee10 0a10 	vmov	r0, s0
 8004f22:	4629      	mov	r1, r5
 8004f24:	f7fb fb14 	bl	8000550 <__aeabi_dmul>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	4620      	mov	r0, r4
 8004f2e:	4629      	mov	r1, r5
 8004f30:	f7fb f958 	bl	80001e4 <__adddf3>
 8004f34:	4604      	mov	r4, r0
 8004f36:	460d      	mov	r5, r1
 8004f38:	ec45 4b10 	vmov	d0, r4, r5
 8004f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f40:	2d00      	cmp	r5, #0
 8004f42:	ee10 0a10 	vmov	r0, s0
 8004f46:	4621      	mov	r1, r4
 8004f48:	dc0f      	bgt.n	8004f6a <__ieee754_sqrt+0x62>
 8004f4a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004f4e:	4330      	orrs	r0, r6
 8004f50:	d0f2      	beq.n	8004f38 <__ieee754_sqrt+0x30>
 8004f52:	b155      	cbz	r5, 8004f6a <__ieee754_sqrt+0x62>
 8004f54:	ee10 2a10 	vmov	r2, s0
 8004f58:	4620      	mov	r0, r4
 8004f5a:	4629      	mov	r1, r5
 8004f5c:	f7fb f940 	bl	80001e0 <__aeabi_dsub>
 8004f60:	4602      	mov	r2, r0
 8004f62:	460b      	mov	r3, r1
 8004f64:	f7fb fc1e 	bl	80007a4 <__aeabi_ddiv>
 8004f68:	e7e4      	b.n	8004f34 <__ieee754_sqrt+0x2c>
 8004f6a:	151b      	asrs	r3, r3, #20
 8004f6c:	d073      	beq.n	8005056 <__ieee754_sqrt+0x14e>
 8004f6e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004f72:	07dd      	lsls	r5, r3, #31
 8004f74:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8004f78:	bf48      	it	mi
 8004f7a:	0fc8      	lsrmi	r0, r1, #31
 8004f7c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004f80:	bf44      	itt	mi
 8004f82:	0049      	lslmi	r1, r1, #1
 8004f84:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8004f88:	2500      	movs	r5, #0
 8004f8a:	1058      	asrs	r0, r3, #1
 8004f8c:	0fcb      	lsrs	r3, r1, #31
 8004f8e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8004f92:	0049      	lsls	r1, r1, #1
 8004f94:	2316      	movs	r3, #22
 8004f96:	462c      	mov	r4, r5
 8004f98:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8004f9c:	19a7      	adds	r7, r4, r6
 8004f9e:	4297      	cmp	r7, r2
 8004fa0:	bfde      	ittt	le
 8004fa2:	19bc      	addle	r4, r7, r6
 8004fa4:	1bd2      	suble	r2, r2, r7
 8004fa6:	19ad      	addle	r5, r5, r6
 8004fa8:	0fcf      	lsrs	r7, r1, #31
 8004faa:	3b01      	subs	r3, #1
 8004fac:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8004fb0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004fb4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004fb8:	d1f0      	bne.n	8004f9c <__ieee754_sqrt+0x94>
 8004fba:	f04f 0c20 	mov.w	ip, #32
 8004fbe:	469e      	mov	lr, r3
 8004fc0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004fc4:	42a2      	cmp	r2, r4
 8004fc6:	eb06 070e 	add.w	r7, r6, lr
 8004fca:	dc02      	bgt.n	8004fd2 <__ieee754_sqrt+0xca>
 8004fcc:	d112      	bne.n	8004ff4 <__ieee754_sqrt+0xec>
 8004fce:	428f      	cmp	r7, r1
 8004fd0:	d810      	bhi.n	8004ff4 <__ieee754_sqrt+0xec>
 8004fd2:	2f00      	cmp	r7, #0
 8004fd4:	eb07 0e06 	add.w	lr, r7, r6
 8004fd8:	da42      	bge.n	8005060 <__ieee754_sqrt+0x158>
 8004fda:	f1be 0f00 	cmp.w	lr, #0
 8004fde:	db3f      	blt.n	8005060 <__ieee754_sqrt+0x158>
 8004fe0:	f104 0801 	add.w	r8, r4, #1
 8004fe4:	1b12      	subs	r2, r2, r4
 8004fe6:	428f      	cmp	r7, r1
 8004fe8:	bf88      	it	hi
 8004fea:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8004fee:	1bc9      	subs	r1, r1, r7
 8004ff0:	4433      	add	r3, r6
 8004ff2:	4644      	mov	r4, r8
 8004ff4:	0052      	lsls	r2, r2, #1
 8004ff6:	f1bc 0c01 	subs.w	ip, ip, #1
 8004ffa:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8004ffe:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005002:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005006:	d1dd      	bne.n	8004fc4 <__ieee754_sqrt+0xbc>
 8005008:	430a      	orrs	r2, r1
 800500a:	d006      	beq.n	800501a <__ieee754_sqrt+0x112>
 800500c:	1c5c      	adds	r4, r3, #1
 800500e:	bf13      	iteet	ne
 8005010:	3301      	addne	r3, #1
 8005012:	3501      	addeq	r5, #1
 8005014:	4663      	moveq	r3, ip
 8005016:	f023 0301 	bicne.w	r3, r3, #1
 800501a:	106a      	asrs	r2, r5, #1
 800501c:	085b      	lsrs	r3, r3, #1
 800501e:	07e9      	lsls	r1, r5, #31
 8005020:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8005024:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8005028:	bf48      	it	mi
 800502a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800502e:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8005032:	461c      	mov	r4, r3
 8005034:	e780      	b.n	8004f38 <__ieee754_sqrt+0x30>
 8005036:	0aca      	lsrs	r2, r1, #11
 8005038:	3815      	subs	r0, #21
 800503a:	0549      	lsls	r1, r1, #21
 800503c:	2a00      	cmp	r2, #0
 800503e:	d0fa      	beq.n	8005036 <__ieee754_sqrt+0x12e>
 8005040:	02d6      	lsls	r6, r2, #11
 8005042:	d50a      	bpl.n	800505a <__ieee754_sqrt+0x152>
 8005044:	f1c3 0420 	rsb	r4, r3, #32
 8005048:	fa21 f404 	lsr.w	r4, r1, r4
 800504c:	1e5d      	subs	r5, r3, #1
 800504e:	4099      	lsls	r1, r3
 8005050:	4322      	orrs	r2, r4
 8005052:	1b43      	subs	r3, r0, r5
 8005054:	e78b      	b.n	8004f6e <__ieee754_sqrt+0x66>
 8005056:	4618      	mov	r0, r3
 8005058:	e7f0      	b.n	800503c <__ieee754_sqrt+0x134>
 800505a:	0052      	lsls	r2, r2, #1
 800505c:	3301      	adds	r3, #1
 800505e:	e7ef      	b.n	8005040 <__ieee754_sqrt+0x138>
 8005060:	46a0      	mov	r8, r4
 8005062:	e7bf      	b.n	8004fe4 <__ieee754_sqrt+0xdc>
 8005064:	7ff00000 	.word	0x7ff00000

08005068 <matherr>:
 8005068:	2000      	movs	r0, #0
 800506a:	4770      	bx	lr

0800506c <_init>:
 800506c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800506e:	bf00      	nop
 8005070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005072:	bc08      	pop	{r3}
 8005074:	469e      	mov	lr, r3
 8005076:	4770      	bx	lr

08005078 <_fini>:
 8005078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800507a:	bf00      	nop
 800507c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800507e:	bc08      	pop	{r3}
 8005080:	469e      	mov	lr, r3
 8005082:	4770      	bx	lr
